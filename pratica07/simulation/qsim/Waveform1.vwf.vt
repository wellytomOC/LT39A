// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/07/2024 16:46:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          GeradorImagem
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module GeradorImagem_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] CircleCol;
reg [8:0] CircleRow;
reg Hactive;
reg Hsync;
reg Vactive;
reg Vsync;
reg clk25;
reg enable;
// wires                                               
wire [7:0] B;
wire [7:0] G;
wire [7:0] R;

// assign statements (if any)                          
GeradorImagem i1 (
// port map - connection between master ports and signals/registers   
	.B(B),
	.CircleCol(CircleCol),
	.CircleRow(CircleRow),
	.G(G),
	.Hactive(Hactive),
	.Hsync(Hsync),
	.R(R),
	.Vactive(Vactive),
	.Vsync(Vsync),
	.clk25(clk25),
	.enable(enable)
);
initial 
begin 
#1000000 $finish;
end 
// CircleCol[ 9 ]
initial
begin
	CircleCol[9] = 1'b0;
end 
// CircleCol[ 8 ]
initial
begin
	CircleCol[8] = 1'b0;
end 
// CircleCol[ 7 ]
initial
begin
	CircleCol[7] = 1'b0;
end 
// CircleCol[ 6 ]
initial
begin
	CircleCol[6] = 1'b1;
end 
// CircleCol[ 5 ]
initial
begin
	CircleCol[5] = 1'b1;
end 
// CircleCol[ 4 ]
initial
begin
	CircleCol[4] = 1'b1;
end 
// CircleCol[ 3 ]
initial
begin
	CircleCol[3] = 1'b1;
end 
// CircleCol[ 2 ]
initial
begin
	CircleCol[2] = 1'b1;
end 
// CircleCol[ 1 ]
initial
begin
	CircleCol[1] = 1'b0;
end 
// CircleCol[ 0 ]
initial
begin
	CircleCol[0] = 1'b1;
end 
// CircleRow[ 8 ]
initial
begin
	CircleRow[8] = 1'b0;
end 
// CircleRow[ 7 ]
initial
begin
	CircleRow[7] = 1'b1;
end 
// CircleRow[ 6 ]
initial
begin
	CircleRow[6] = 1'b0;
end 
// CircleRow[ 5 ]
initial
begin
	CircleRow[5] = 1'b1;
end 
// CircleRow[ 4 ]
initial
begin
	CircleRow[4] = 1'b0;
end 
// CircleRow[ 3 ]
initial
begin
	CircleRow[3] = 1'b1;
end 
// CircleRow[ 2 ]
initial
begin
	CircleRow[2] = 1'b1;
end 
// CircleRow[ 1 ]
initial
begin
	CircleRow[1] = 1'b1;
end 
// CircleRow[ 0 ]
initial
begin
	CircleRow[0] = 1'b1;
end 

// Hactive
always
begin
	Hactive = 1'b0;
	Hactive = #125000 1'b1;
	#125000;
end 

// Hsync
always
begin
	Hsync = 1'b0;
	Hsync = #250000 1'b1;
	#250000;
end 

// Vactive
always
begin
	Vactive = 1'b0;
	Vactive = #100000 1'b1;
	#100000;
end 

// Vsync
initial
begin
	repeat(6)
	begin
		Vsync = 1'b0;
		Vsync = #75000 1'b1;
		# 75000;
	end
	Vsync = 1'b0;
	Vsync = #75000 1'b1;
end 

// clk25
always
begin
	clk25 = 1'b0;
	clk25 = #5000 1'b1;
	#5000;
end 

// enable
always
begin
	enable = 1'b0;
	enable = #50000 1'b1;
	#50000;
end 
endmodule

