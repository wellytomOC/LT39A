// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/07/2024 14:20:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Sistema
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Sistema_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg clock1Hz;
reg [3:0] dataIn;
reg dav;
reg reset;
// wires                                               
wire [1:0] PhraseSel;
wire [1:0] Principal_Pedestrian;
wire [2:0] Principal_Road;
wire [1:0] Secondary_Pedestrian;
wire [2:0] Secondary_Road;
wire [1:0] StateFlag;
wire [6:0] Ta;
wire [6:0] Tpv;
wire [6:0] Tsv;
wire [6:0] timeRemaining;

// assign statements (if any)                          
Sistema i1 (
// port map - connection between master ports and signals/registers   
	.PhraseSel(PhraseSel),
	.Principal_Pedestrian(Principal_Pedestrian),
	.Principal_Road(Principal_Road),
	.Secondary_Pedestrian(Secondary_Pedestrian),
	.Secondary_Road(Secondary_Road),
	.StateFlag(StateFlag),
	.Ta(Ta),
	.Tpv(Tpv),
	.Tsv(Tsv),
	.clock(clock),
	.clock1Hz(clock1Hz),
	.dataIn(dataIn),
	.dav(dav),
	.reset(reset),
	.timeRemaining(timeRemaining)
);
initial 
begin 
#1000000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #2500 1'b1;
	#2500;
end 

// clock1Hz
always
begin
	clock1Hz = 1'b0;
	clock1Hz = #5000 1'b1;
	#5000;
end 
// dataIn[ 3 ]
initial
begin
	dataIn[3] = 1'b1;
	dataIn[3] = #460000 1'b0;
end 
// dataIn[ 2 ]
initial
begin
	dataIn[2] = 1'b1;
	dataIn[2] = #60000 1'b0;
	dataIn[2] = #360000 1'b1;
end 
// dataIn[ 1 ]
initial
begin
	dataIn[1] = 1'b1;
	dataIn[1] = #60000 1'b0;
	dataIn[1] = #360000 1'b1;
	dataIn[1] = #40000 1'b0;
end 
// dataIn[ 0 ]
initial
begin
	dataIn[0] = 1'b1;
end 

// dav
always
begin
	dav = 1'b0;
	dav = #25000 1'b1;
	#25000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 
endmodule

