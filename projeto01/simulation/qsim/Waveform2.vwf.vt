// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2024 17:36:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DisplayControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DisplayControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock500Hz;
reg [7:0] phrase;
reg reset;
// wires                                               
wire [7:0] DB;
wire E;
wire RS;
wire RW;
wire [4:0] char_index;

// assign statements (if any)                          
DisplayControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.DB(DB),
	.E(E),
	.RS(RS),
	.RW(RW),
	.char_index(char_index),
	.clock500Hz(clock500Hz),
	.phrase(phrase),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clock500Hz
always
begin
	clock500Hz = 1'b0;
	clock500Hz = #10000 1'b1;
	#10000;
end 
// phrase[ 7 ]
initial
begin
	phrase[7] = 1'b0;
end 
// phrase[ 6 ]
initial
begin
	phrase[6] = 1'b0;
end 
// phrase[ 5 ]
initial
begin
	phrase[5] = 1'b0;
	phrase[5] = #540000 1'b1;
end 
// phrase[ 4 ]
initial
begin
	phrase[4] = 1'b0;
	phrase[4] = #220000 1'b1;
	phrase[4] = #320000 1'b0;
	phrase[4] = #320000 1'b1;
end 
// phrase[ 3 ]
initial
begin
	phrase[3] = 1'b0;
	# 60000;
	repeat(2)
	begin
		phrase[3] = 1'b1;
		phrase[3] = #160000 1'b0;
		# 160000;
	end
	phrase[3] = 1'b1;
	phrase[3] = #160000 1'b0;
end 
// phrase[ 2 ]
initial
begin
	phrase[2] = 1'b1;
	# 60000;
	repeat(5)
	begin
		phrase[2] = 1'b0;
		phrase[2] = #80000 1'b1;
		# 80000;
	end
	phrase[2] = 1'b0;
	phrase[2] = #80000 1'b1;
end 
// phrase[ 1 ]
initial
begin
	phrase[1] = 1'b0;
	# 20000;
	repeat(12)
	begin
		phrase[1] = 1'b1;
		phrase[1] = #40000 1'b0;
		# 40000;
	end
	phrase[1] = 1'b1;
end 
// phrase[ 0 ]
always
begin
	phrase[0] = 1'b1;
	phrase[0] = #20000 1'b0;
	#20000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 
endmodule

