// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/23/2024 18:07:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Saida
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Saida_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] AddressIn;
reg [3:0] DataIn;
reg [3:0] KeypadDataIn;
reg [1:0] PresentStateFlag;
reg clock50MHz;
reg clock500Hz;
reg reset;
// wires                                               
wire [7:0] DB;
wire E;
wire LCD_Blon;
wire LCD_On;
wire RS;
wire RW;

// assign statements (if any)                          
Saida i1 (
// port map - connection between master ports and signals/registers   
	.AddressIn(AddressIn),
	.DB(DB),
	.DataIn(DataIn),
	.E(E),
	.KeypadDataIn(KeypadDataIn),
	.LCD_Blon(LCD_Blon),
	.LCD_On(LCD_On),
	.PresentStateFlag(PresentStateFlag),
	.RS(RS),
	.RW(RW),
	.clock50MHz(clock50MHz),
	.clock500Hz(clock500Hz),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 
// AddressIn[ 3 ]
initial
begin
	AddressIn[3] = 1'b0;
end 
// AddressIn[ 2 ]
always
begin
	AddressIn[2] = 1'b0;
	AddressIn[2] = #500000 1'b1;
	#500000;
end 
// AddressIn[ 1 ]
always
begin
	AddressIn[1] = 1'b0;
	AddressIn[1] = #250000 1'b1;
	#250000;
end 
// AddressIn[ 0 ]
always
begin
	AddressIn[0] = 1'b0;
	AddressIn[0] = #125000 1'b1;
	#125000;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
end 
// KeypadDataIn[ 3 ]
initial
begin
	KeypadDataIn[3] = 1'b0;
	KeypadDataIn[3] = #750000 1'b1;
end 
// KeypadDataIn[ 2 ]
initial
begin
	KeypadDataIn[2] = 1'b0;
	KeypadDataIn[2] = #250000 1'b1;
	KeypadDataIn[2] = #500000 1'b0;
end 
// KeypadDataIn[ 1 ]
always
begin
	KeypadDataIn[1] = 1'b1;
	KeypadDataIn[1] = #250000 1'b0;
	#250000;
end 
// KeypadDataIn[ 0 ]
always
begin
	KeypadDataIn[0] = 1'b0;
	KeypadDataIn[0] = #125000 1'b1;
	#125000;
end 
// PresentStateFlag[ 1 ]
always
begin
	PresentStateFlag[1] = 1'b0;
	PresentStateFlag[1] = #250000 1'b1;
	#250000;
end 
// PresentStateFlag[ 0 ]
always
begin
	PresentStateFlag[0] = 1'b0;
	PresentStateFlag[0] = #125000 1'b1;
	#125000;
end 

// clock50MHz
always
begin
	clock50MHz = 1'b0;
	clock50MHz = #1000 1'b1;
	#1000;
end 

// clock500Hz
always
begin
	clock500Hz = 1'b0;
	clock500Hz = #2500 1'b1;
	#2500;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #40000 1'b0;
end 
endmodule

