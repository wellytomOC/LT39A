// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/23/2024 14:22:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Sistema
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Sistema_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] AddressIn;
reg [3:0] KeypadData;
reg clock1Hz;
reg clock50MHz;
reg dav;
reg reset;
// wires                                               
wire [3:0] DataOut;
wire [1:0] PresentStateDEBUG;

// assign statements (if any)                          
Sistema i1 (
// port map - connection between master ports and signals/registers   
	.AddressIn(AddressIn),
	.DataOut(DataOut),
	.KeypadData(KeypadData),
	.PresentStateDEBUG(PresentStateDEBUG),
	.clock1Hz(clock1Hz),
	.clock50MHz(clock50MHz),
	.dav(dav),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// clock50MHz
always
begin
	clock50MHz = 1'b0;
	clock50MHz = #2500 1'b1;
	#2500;
end 

// clock1Hz
always
begin
	clock1Hz = 1'b0;
	clock1Hz = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #30000 1'b0;
end 

// dav
always
begin
	dav = 1'b0;
	dav = #50000 1'b1;
	#50000;
end 
// KeypadData[ 3 ]
initial
begin
	KeypadData[3] = 1'b0;
	KeypadData[3] = #875000 1'b1;
end 
// KeypadData[ 2 ]
initial
begin
	KeypadData[2] = 1'b0;
	KeypadData[2] = #375000 1'b1;
	KeypadData[2] = #500000 1'b0;
end 
// KeypadData[ 1 ]
initial
begin
	KeypadData[1] = 1'b0;
	KeypadData[1] = #125000 1'b1;
	KeypadData[1] = #250000 1'b0;
	KeypadData[1] = #250000 1'b1;
	KeypadData[1] = #250000 1'b0;
end 
// KeypadData[ 0 ]
always
begin
	KeypadData[0] = 1'b1;
	KeypadData[0] = #125000 1'b0;
	#125000;
end 
// AddressIn[ 3 ]
initial
begin
	AddressIn[3] = 1'b0;
	AddressIn[3] = #400000 1'b1;
	AddressIn[3] = #400000 1'b0;
end 
// AddressIn[ 2 ]
initial
begin
	repeat(2)
	begin
		AddressIn[2] = 1'b0;
		AddressIn[2] = #200000 1'b1;
		# 200000;
	end
	AddressIn[2] = 1'b0;
end 
// AddressIn[ 1 ]
always
begin
	AddressIn[1] = 1'b0;
	AddressIn[1] = #100000 1'b1;
	#100000;
end 
// AddressIn[ 0 ]
always
begin
	AddressIn[0] = 1'b0;
	AddressIn[0] = #50000 1'b1;
	#50000;
end 
endmodule

