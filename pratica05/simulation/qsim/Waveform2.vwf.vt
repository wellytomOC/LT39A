// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/23/2024 18:03:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          RamMemory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RamMemory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] address;
reg clk;
reg [3:0] data_in;
reg write_enable;
// wires                                               
wire [3:0] data_out;

// assign statements (if any)                          
RamMemory i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clk(clk),
	.data_in(data_in),
	.data_out(data_out),
	.write_enable(write_enable)
);
initial 
begin 
#1000000 $finish;
end 
// address[ 9 ]
initial
begin
	address[9] = 1'b0;
end 
// address[ 8 ]
initial
begin
	address[8] = 1'b0;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b0;
	address[4] = #400000 1'b1;
	address[4] = #20000 1'b0;
	address[4] = #400000 1'b1;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b0;
	address[3] = #200000 1'b1;
	address[3] = #200000 1'b0;
	address[3] = #220000 1'b1;
	address[3] = #200000 1'b0;
end 
// address[ 2 ]
initial
begin
	repeat(2)
	begin
		address[2] = 1'b0;
		address[2] = #100000 1'b1;
		# 100000;
	end
	address[2] = 1'b0;
	address[2] = #120000 1'b1;
	address[2] = #100000 1'b0;
	address[2] = #100000 1'b1;
	address[2] = #100000 1'b0;
	address[2] = #100000 1'b1;
end 
// address[ 1 ]
initial
begin
	repeat(4)
	begin
		address[1] = 1'b0;
		address[1] = #50000 1'b1;
		# 50000;
	end
	address[1] = 1'b0;
	address[1] = #70000 1'b1;
	# 50000;
	repeat(4)
	begin
		address[1] = 1'b0;
		address[1] = #50000 1'b1;
		# 50000;
	end
	address[1] = 1'b0;
	address[1] = #50000 1'b1;
end 
// address[ 0 ]
initial
begin
	repeat(8)
	begin
		address[0] = 1'b0;
		address[0] = #25000 1'b1;
		# 25000;
	end
	address[0] = 1'b0;
	address[0] = #45000 1'b1;
	# 25000;
	repeat(10)
	begin
		address[0] = 1'b0;
		address[0] = #25000 1'b1;
		# 25000;
	end
	address[0] = 1'b0;
	address[0] = #25000 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// data_in[ 3 ]
initial
begin
	data_in[3] = 1'b0;
end 
// data_in[ 2 ]
always
begin
	data_in[2] = 1'b0;
	data_in[2] = #500000 1'b1;
	#500000;
end 
// data_in[ 1 ]
always
begin
	data_in[1] = 1'b0;
	data_in[1] = #250000 1'b1;
	#250000;
end 
// data_in[ 0 ]
always
begin
	data_in[0] = 1'b0;
	data_in[0] = #125000 1'b1;
	#125000;
end 

// write_enable
initial
begin
	write_enable = 1'b1;
	# 125000;
	repeat(3)
	begin
		write_enable = 1'b0;
		write_enable = #125000 1'b1;
		# 125000;
	end
	write_enable = 1'b0;
end 
endmodule

