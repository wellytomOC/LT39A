
usb_device.elf:     file format elf32-littlenios2
usb_device.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f7e0 memsz 0x0000f7e0 flags r-x
    LOAD off    0x00010800 vaddr 0x0000f800 paddr 0x00011528 align 2**12
         filesz 0x00001d28 memsz 0x00001d28 flags rw-
    LOAD off    0x00013250 vaddr 0x00013250 paddr 0x00013250 align 2**12
         filesz 0x00000000 memsz 0x00000304 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000eaec  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b60  0000eca0  0000eca0  0000fca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d28  0000f800  00011528  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000304  00013250  00013250  00013250  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00012528  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  00012550  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001696  00000000  00000000  000132e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026060  00000000  00000000  0001497e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000839f  00000000  00000000  0003a9de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015a98  00000000  00000000  00042d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d60  00000000  00000000  00058818  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000236f  00000000  00000000  0005a578  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c494  00000000  00000000  0005c8e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00068d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00068dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ccba  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006ccbd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ccc2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ccc3  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006ccc4  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006cccf  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006ccda  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0006cce5  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002d  00000000  00000000  0006ccf1  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b47  00000000  00000000  0006cd1e  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005f5e9  00000000  00000000  00071865  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000eca0 l    d  .rodata	00000000 .rodata
0000f800 l    d  .rwdata	00000000 .rwdata
00013250 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 usb_device.c
00000000 l    df *ABS*	00000000 usb_device_control.c
00000f7c l     F .text	00000168 ep2_isr
00000000 l    df *ABS*	00000000 usb_hal.c
000017b0 l     F .text	0000007c hpi_read_words
0000189c l     F .text	00000048 writeable_region
00001734 l     F .text	0000007c hpi_write_words
00000000 l    df *ABS*	00000000 main.c
0000f800 l     O .rwdata	000001a2 pcd_asm
00000000 l    df *ABS*	00000000 lib2-divmod.c
00001990 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00002454 l     F .text	00000058 __sprint_r
0000f296 l     O .rodata	00000010 blanks.3452
0000f286 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000044b8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005eb4 l     F .text	00000058 std
00005fc0 l     F .text	00000008 __fp_lock
00005fc8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000fdac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000114f4 l     O .rwdata	00000004 charset
0000f2cc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f414 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000099a4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b1f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b258 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b358 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b478 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b558 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b6b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b8e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011510 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000bd50 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00010360 l     O .rwdata	00001060 jtag_uart_0
000113c0 l     O .rwdata	00000120 lcd_16207_0
0000be54 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c094 l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c2bc l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
0001151c l     O .rwdata	00000004 colstart
0000c938 l     F .text	000000b8 lcd_write_command
0000c9f0 l     F .text	000000d4 lcd_write_data
0000cac4 l     F .text	000000c4 lcd_clear_screen
0000cb88 l     F .text	000001ec lcd_repaint_screen
0000cd74 l     F .text	000000c8 lcd_scroll_up
0000ce3c l     F .text	000002d0 lcd_handle_escape
0000d618 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d878 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000dce8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e10c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000e248 l     F .text	000000dc alt_file_locked
0000e4ac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0000f67d l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000ea1c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000ebd0 l     F .text	00000040 alt_sim_halt
00000314 g     F .text	0000003c LCD_Line1
00007530 g     F .text	00000094 _mprec_log10
0000761c g     F .text	00000088 __any_on
00008cb8 g     F .text	00000070 _isatty_r
0000f3ec g     O .rodata	00000028 __mprec_tinytens
0000b714 g     F .text	0000006c alt_main
000022bc g     F .text	000000a0 _puts_r
000132c4 g     O .bss	00000100 alt_irq
00008d28 g     F .text	00000078 _lseek_r
00000418 g     F .text	0000004c dc_init_struct
00011528 g       *ABS*	00000000 __flash_rwdata_start
0000a4c4 g     F .text	00000088 __eqdf2
00013554 g       *ABS*	00000000 __alt_heap_start
000015e0 g     F .text	0000003c hpi_write_reg
00002244 g     F .text	00000044 printf
00008784 g     F .text	00000068 __sseek
00005f1c g     F .text	000000a4 __sinit
00006bf4 g     F .text	00000084 _setlocale_r
0000161c g     F .text	00000030 hpi_read_status
0000601c g     F .text	00000068 __sfmoreglue
0000b7a0 g     F .text	00000020 __malloc_unlock
00001290 g     F .text	00000130 hpi_read_memory
00006fac g     F .text	000000e0 memmove
0000600c g     F .text	00000010 _cleanup
000076a4 g     F .text	000000bc _Balloc
0000038c g     F .text	0000008c LCD_Test
00013250 g     O .bss	00000008 old_button_sw_status
0000a5d4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000b88 g     F .text	000003f4 sie2_msg_handler
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008c44 g     F .text	00000074 _fstat_r
00013264 g     O .bss	00000004 errno
00000464 g     F .text	0000008c dc_clear_bug
00013278 g     O .bss	00000004 alt_argv
000194e0 g       *ABS*	00000000 _gp
0000bc00 g     F .text	00000030 usleep
0000159c g     F .text	00000044 hpi_read_reg
000101e0 g     O .rwdata	00000180 alt_fd_list
0000e52c g     F .text	00000094 alt_find_dev
00006f0c g     F .text	000000a0 memcpy
000009d4 g     F .text	00000140 usb_enable_receive_data
00006000 g     F .text	0000000c _cleanup_r
0000a76c g     F .text	000000f8 __floatsidf
0000e1d0 g     F .text	00000078 alt_io_redirect
0000a6e4 g     F .text	00000088 __ltdf2
0000eca0 g       *ABS*	00000000 __DTOR_END__
0000235c g     F .text	00000014 puts
00007480 g     F .text	000000b0 __ratio
0000c4d4 g     F .text	00000224 altera_avalon_jtag_uart_read
00001af0 g     F .text	00000014 malloc
00002288 g     F .text	00000034 _printf_r
00001acc g     F .text	00000008 __udivsi3
0000b3b8 g     F .text	000000c0 isatty
0000f2fc g     O .rodata	000000c8 __mprec_tens
00006bd0 g     F .text	00000008 __locale_charset
0000e798 g     F .text	00000090 alt_icache_flush
00013258 g     O .bss	00000004 __malloc_top_pad
000114f0 g     O .rwdata	00000004 __mb_cur_max
00006bd8 g     F .text	0000000c _localeconv_r
00007d9c g     F .text	0000003c __i2b
000065b4 g     F .text	0000049c __sfvwrite_r
00002370 g     F .text	00000070 _sbrk_r
000016f0 g     F .text	00000044 hpi_read_word
00008da0 g     F .text	00000078 _read_r
000101ac g     O .rwdata	0000000c __lc_ctype
00011508 g     O .rwdata	00000004 alt_max_fd
0000aefc g     F .text	00000138 __unpack_d
00008b20 g     F .text	00000110 _fclose_r
00005e80 g     F .text	00000034 fflush
0001325c g     O .bss	00000004 __malloc_max_sbrked_mem
00009e34 g     F .text	00000074 __adddf3
000010e4 g     F .text	0000018c check_button_sw_status
00007360 g     F .text	00000120 __b2d
000093f4 g     F .text	000005b0 __umoddi3
0000b5c4 g     F .text	000000f0 lseek
000114ec g     O .rwdata	00000004 _global_impure_ptr
00008118 g     F .text	000005f4 _realloc_r
00013554 g       *ABS*	00000000 __bss_end
0000e014 g     F .text	000000f8 alt_iic_isr_register
0000baf4 g     F .text	0000010c alt_tick
00008e18 g     F .text	000005dc __udivdi3
0000f3c4 g     O .rodata	00000028 __mprec_bigtens
00007ff8 g     F .text	00000120 __s2b
0000a93c g     F .text	00000194 __floatunsidf
00007280 g     F .text	00000060 __mcmp
00011524 g     O .rwdata	00000004 __ctype_ptr
00005fe8 g     F .text	00000018 __fp_lock_all
0000dfcc g     F .text	00000048 alt_ic_irq_enabled
0000167c g     F .text	00000030 hpi_read_mbx
0000ba5c g     F .text	00000098 alt_alarm_stop
00013288 g     O .bss	00000004 alt_irq_active
000132b4 g     O .bss	00000010 device_status
000000ec g     F .exceptions	000000c8 alt_irq_handler
000101b8 g     O .rwdata	00000028 alt_dev_null
0000dc18 g     F .text	0000001c alt_dcache_flush_all
0000714c g     F .text	00000070 __hi0bits
0000a864 g     F .text	000000d8 __fixdfsi
00011528 g       *ABS*	00000000 __ram_rwdata_end
00011500 g     O .rwdata	00000008 alt_dev_list
0000bc30 g     F .text	00000120 write
0000f800 g       *ABS*	00000000 __ram_rodata_end
0000b284 g     F .text	000000d4 fstat
00007ed8 g     F .text	00000120 __pow5mult
00013268 g     O .bss	00000004 __nlocale_changed
00001ad4 g     F .text	00000008 __umodsi3
00013554 g       *ABS*	00000000 end
0000d10c g     F .text	0000050c altera_avalon_lcd_16207_write
0000164c g     F .text	00000030 hpi_write_mbx
0000bfd4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0000ec9c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000d8e8 g     F .text	00000090 alt_avalon_timer_sc_init
0000ab68 g     F .text	00000080 __clzsi2
0000c6f8 g     F .text	00000240 altera_avalon_jtag_uart_write
00005f0c g     F .text	00000004 __sfp_lock_acquire
00006e28 g     F .text	000000e4 memchr
000024ac g     F .text	00001eac ___vfprintf_internal_r
000062a0 g     F .text	00000314 _free_r
0000ea20 g     F .text	000001b0 __call_exitprocs
0001326c g     O .bss	00000004 __mlocale_changed
000114e4 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00013280 g     O .bss	00000004 _alt_tick_rate
00007a68 g     F .text	0000014c __lshift
00013284 g     O .bss	00000004 _alt_nticks
00001270 g     F .text	00000020 hpi_init
0000b7c0 g     F .text	00000120 read
00000784 g     F .text	00000128 hpi_command
0000bde4 g     F .text	00000070 alt_sys_init
0000e8e8 g     F .text	00000134 __register_exitproc
00007bb4 g     F .text	000001e8 __multiply
0000c36c g     F .text	00000074 altera_avalon_jtag_uart_close
0000f800 g       *ABS*	00000000 __ram_rwdata_start
0000eca0 g       *ABS*	00000000 __ram_rodata_start
0001328c g     O .bss	00000028 __malloc_current_mallinfo
00007760 g     F .text	0000017c __d2b
00000b14 g     F .text	00000074 dcProcessEvent
0000be8c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000e6e0 g     F .text	000000b8 alt_get_fd
0000dacc g     F .text	0000014c alt_busy_sleep
0000b034 g     F .text	000000c8 __fpcmp_parts_d
00008ab0 g     F .text	00000070 _close_r
0000e874 g     F .text	00000074 memcmp
0000bf3c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00013554 g       *ABS*	00000000 __alt_stack_base
0000bf84 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000437c g     F .text	0000013c __swsetup_r
0000a26c g     F .text	00000258 __divdf3
00006084 g     F .text	000000f0 __sfp
000075c4 g     F .text	00000058 __copybits
0000f9a4 g     O .rwdata	00000408 __malloc_av_
00005f18 g     F .text	00000004 __sinit_lock_release
00009ea8 g     F .text	000003c4 __muldf3
00008868 g     F .text	00000060 __sread
0000e5c0 g     F .text	00000120 alt_find_file
0000dc34 g     F .text	000000b4 alt_dev_llist_insert
0000b780 g     F .text	00000020 __malloc_lock
0000b9a0 g     F .text	000000bc sbrk
00000644 g     F .text	00000140 dc_download_code
00005c84 g     F .text	000001fc _fflush_r
000089fc g     F .text	000000b4 _calloc_r
00013250 g       *ABS*	00000000 __bss_start
000001f0 g     F .text	0000009c LCD_Init
0000708c g     F .text	00000098 memset
000018e4 g     F .text	000000ac main
0001327c g     O .bss	00000004 alt_envp
00013260 g     O .bss	00000004 __malloc_max_total_mem
0000bee4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000d6e4 g     F .text	0000013c altera_avalon_lcd_16207_init
00000350 g     F .text	0000003c LCD_Line2
0000877c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00008c30 g     F .text	00000014 fclose
000133c4 g     O .bss	00000190 _atexit0
000046d0 g     F .text	000015b4 _dtoa_r
00001b04 g     F .text	00000740 _malloc_r
0001150c g     O .rwdata	00000004 alt_errno
00006b18 g     F .text	000000b8 _fwalk
00001a0c g     F .text	00000060 __divsi3
0000f420 g     O .rodata	00000014 __thenan_df
00006174 g     F .text	0000012c _malloc_trim_r
0000eca0 g       *ABS*	00000000 __CTOR_END__
000088c8 g     F .text	000000bc strcmp
0000eca0 g       *ABS*	00000000 __flash_rodata_start
0000eca0 g       *ABS*	00000000 __DTOR_LIST__
0000a54c g     F .text	00000088 __nedf2
0000bdb0 g     F .text	00000034 alt_irq_init
0000028c g     F .text	00000088 LCD_Show_Text
0000b940 g     F .text	00000060 alt_release_fd
0000f434 g     O .rodata	00000100 __clz_tab
00013270 g     O .bss	00000004 _PathLocale
0000e828 g     F .text	00000014 atexit
000013c0 g     F .text	000001dc hpi_write_memory
00008984 g     F .text	00000078 _write_r
00006c78 g     F .text	0000001c setlocale
000114e8 g     O .rwdata	00000004 _impure_ptr
00013274 g     O .bss	00000004 alt_argc
0000ddac g     F .text	00000064 _do_dtors
00000000 g       *ABS*	00000000 __alt_mem_sdram_0
00000020 g       .exceptions	00000000 alt_irq_entry
000072e0 g     F .text	00000080 __ulp
0000870c g     F .text	00000040 __isinfd
00005fd0 g     F .text	00000018 __fp_unlock_all
0000d820 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
000114f8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006be4 g     F .text	00000010 localeconv
000008ac g     F .text	00000128 usb_send_data
0000de40 g     F .text	00000050 alt_ic_isr_register
00011528 g       *ABS*	00000000 _edata
00013554 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000c3e0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000df2c g     F .text	000000a0 alt_ic_irq_disable
000087ec g     F .text	0000007c __swrite
000004f0 g     F .text	00000154 dc_download
000114e0 g     O .rwdata	00000004 __malloc_trim_threshold
0000e50c g     F .text	00000020 altera_nios2_qsys_irq_init
0000e83c g     F .text	00000038 exit
0000182c g     F .text	00000070 get_ushort
00006a50 g     F .text	000000c8 _fwalk_reent
000078dc g     F .text	0000018c __mdiff
00001a6c g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005f10 g     F .text	00000004 __sfp_lock_release
0000f57c g     O .rodata	00000101 _ctype_
0000ec10 g     F .text	00000020 _exit
0000874c g     F .text	00000030 __isnand
0000d978 g     F .text	00000154 alt_alarm_start
0000aad0 g     F .text	00000098 __muldi3
00006c94 g     F .text	00000194 __smakebuf_r
000023e0 g     F .text	00000074 strlen
0000e324 g     F .text	00000188 open
0000a65c g     F .text	00000088 __gedf2
0000de10 g     F .text	00000030 alt_icache_flush_all
00011520 g     O .rwdata	00000004 alt_priority_mask
0000de90 g     F .text	0000009c alt_ic_irq_enable
00004358 g     F .text	00000024 __vfprintf_internal
00009db4 g     F .text	00000080 __subdf3
000071bc g     F .text	000000c4 __lo0bits
00011514 g     O .rwdata	00000008 alt_alarm_list
0000dd48 g     F .text	00000064 _do_ctors
0000b0fc g     F .text	000000fc close
0000b4d8 g     F .text	00000080 alt_load
0000abe8 g     F .text	00000314 __pack_d
00001adc g     F .text	00000014 free
00005f14 g     F .text	00000004 __sinit_lock_acquire
00007dd8 g     F .text	00000100 __multadd
000016ac g     F .text	00000044 hpi_write_word
00007124 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18ccb104 	addi	r3,r3,12996
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18ccb104 	addi	r3,r3,12996
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6a53814 	ori	gp,gp,38112
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	108c9414 	ori	r2,r2,12880

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18cd5514 	ori	r3,r3,13652

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000b4d80 	call	b4d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000b7140 	call	b714 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <LCD_Init>:
#include <io.h>
#include "system.h"
#include "LCD.h"
//-------------------------------------------------------------------------
void LCD_Init()
{
     1f0:	defffe04 	addi	sp,sp,-8
     1f4:	dfc00115 	stw	ra,4(sp)
     1f8:	df000015 	stw	fp,0(sp)
     1fc:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0x38); 
     200:	00c20034 	movhi	r3,2048
     204:	18c02404 	addi	r3,r3,144
     208:	00800e04 	movi	r2,56
     20c:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     210:	0101f404 	movi	r4,2000
     214:	000bc000 	call	bc00 <usleep>
  lcd_write_cmd(LCD_BASE,0x0C);
     218:	00c20034 	movhi	r3,2048
     21c:	18c02404 	addi	r3,r3,144
     220:	00800304 	movi	r2,12
     224:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     228:	0101f404 	movi	r4,2000
     22c:	000bc000 	call	bc00 <usleep>
  lcd_write_cmd(LCD_BASE,0x01);
     230:	00c20034 	movhi	r3,2048
     234:	18c02404 	addi	r3,r3,144
     238:	00800044 	movi	r2,1
     23c:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     240:	0101f404 	movi	r4,2000
     244:	000bc000 	call	bc00 <usleep>
  lcd_write_cmd(LCD_BASE,0x06);
     248:	00c20034 	movhi	r3,2048
     24c:	18c02404 	addi	r3,r3,144
     250:	00800184 	movi	r2,6
     254:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     258:	0101f404 	movi	r4,2000
     25c:	000bc000 	call	bc00 <usleep>
  lcd_write_cmd(LCD_BASE,0x80);
     260:	00c20034 	movhi	r3,2048
     264:	18c02404 	addi	r3,r3,144
     268:	00802004 	movi	r2,128
     26c:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     270:	0101f404 	movi	r4,2000
     274:	000bc000 	call	bc00 <usleep>
}
     278:	e037883a 	mov	sp,fp
     27c:	dfc00117 	ldw	ra,4(sp)
     280:	df000017 	ldw	fp,0(sp)
     284:	dec00204 	addi	sp,sp,8
     288:	f800283a 	ret

0000028c <LCD_Show_Text>:
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
     28c:	defffb04 	addi	sp,sp,-20
     290:	dfc00415 	stw	ra,16(sp)
     294:	df000315 	stw	fp,12(sp)
     298:	dc000215 	stw	r16,8(sp)
     29c:	df000204 	addi	fp,sp,8
     2a0:	e13fff15 	stw	r4,-4(fp)
  int i;
  for(i=0;i<strlen(Text);i++)
     2a4:	e03ffe15 	stw	zero,-8(fp)
     2a8:	00001006 	br	2ec <LCD_Show_Text+0x60>
  {
    lcd_write_data(LCD_BASE,Text[i]);
     2ac:	e0bffe17 	ldw	r2,-8(fp)
     2b0:	1007883a 	mov	r3,r2
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	1885883a 	add	r2,r3,r2
     2bc:	10800003 	ldbu	r2,0(r2)
     2c0:	10c03fcc 	andi	r3,r2,255
     2c4:	18c0201c 	xori	r3,r3,128
     2c8:	18ffe004 	addi	r3,r3,-128
     2cc:	00820034 	movhi	r2,2048
     2d0:	10802604 	addi	r2,r2,152
     2d4:	10c00035 	stwio	r3,0(r2)
    usleep(2000);
     2d8:	0101f404 	movi	r4,2000
     2dc:	000bc000 	call	bc00 <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
     2e0:	e0bffe17 	ldw	r2,-8(fp)
     2e4:	10800044 	addi	r2,r2,1
     2e8:	e0bffe15 	stw	r2,-8(fp)
     2ec:	e43ffe17 	ldw	r16,-8(fp)
     2f0:	e13fff17 	ldw	r4,-4(fp)
     2f4:	00023e00 	call	23e0 <strlen>
     2f8:	80bfec36 	bltu	r16,r2,2ac <LCD_Show_Text+0x20>
  {
    lcd_write_data(LCD_BASE,Text[i]);
    usleep(2000);
  }
}
     2fc:	e037883a 	mov	sp,fp
     300:	dfc00217 	ldw	ra,8(sp)
     304:	df000117 	ldw	fp,4(sp)
     308:	dc000017 	ldw	r16,0(sp)
     30c:	dec00304 	addi	sp,sp,12
     310:	f800283a 	ret

00000314 <LCD_Line1>:
//-------------------------------------------------------------------------
void LCD_Line1()
{
     314:	defffe04 	addi	sp,sp,-8
     318:	dfc00115 	stw	ra,4(sp)
     31c:	df000015 	stw	fp,0(sp)
     320:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0x80);
     324:	00c20034 	movhi	r3,2048
     328:	18c02404 	addi	r3,r3,144
     32c:	00802004 	movi	r2,128
     330:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     334:	0101f404 	movi	r4,2000
     338:	000bc000 	call	bc00 <usleep>
}
     33c:	e037883a 	mov	sp,fp
     340:	dfc00117 	ldw	ra,4(sp)
     344:	df000017 	ldw	fp,0(sp)
     348:	dec00204 	addi	sp,sp,8
     34c:	f800283a 	ret

00000350 <LCD_Line2>:
void LCD_Line2()
{
     350:	defffe04 	addi	sp,sp,-8
     354:	dfc00115 	stw	ra,4(sp)
     358:	df000015 	stw	fp,0(sp)
     35c:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0xC0);
     360:	00c20034 	movhi	r3,2048
     364:	18c02404 	addi	r3,r3,144
     368:	00803004 	movi	r2,192
     36c:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     370:	0101f404 	movi	r4,2000
     374:	000bc000 	call	bc00 <usleep>
}
     378:	e037883a 	mov	sp,fp
     37c:	dfc00117 	ldw	ra,4(sp)
     380:	df000017 	ldw	fp,0(sp)
     384:	dec00204 	addi	sp,sp,8
     388:	f800283a 	ret

0000038c <LCD_Test>:
//-------------------------------------------------------------------------
void LCD_Test()
{
     38c:	defff604 	addi	sp,sp,-40
     390:	dfc00915 	stw	ra,36(sp)
     394:	df000815 	stw	fp,32(sp)
     398:	df000804 	addi	fp,sp,32
  char Text1[16] = " Altera DE2-115 ";
     39c:	00c00074 	movhi	r3,1
     3a0:	18fb2804 	addi	r3,r3,-4960
     3a4:	18800017 	ldw	r2,0(r3)
     3a8:	e0bff815 	stw	r2,-32(fp)
     3ac:	18800117 	ldw	r2,4(r3)
     3b0:	e0bff915 	stw	r2,-28(fp)
     3b4:	18800217 	ldw	r2,8(r3)
     3b8:	e0bffa15 	stw	r2,-24(fp)
     3bc:	18800317 	ldw	r2,12(r3)
     3c0:	e0bffb15 	stw	r2,-20(fp)
  char Text2[16] = "USB Device Test ";
     3c4:	00c00074 	movhi	r3,1
     3c8:	18fb2d04 	addi	r3,r3,-4940
     3cc:	18800017 	ldw	r2,0(r3)
     3d0:	e0bffc15 	stw	r2,-16(fp)
     3d4:	18800117 	ldw	r2,4(r3)
     3d8:	e0bffd15 	stw	r2,-12(fp)
     3dc:	18800217 	ldw	r2,8(r3)
     3e0:	e0bffe15 	stw	r2,-8(fp)
     3e4:	18800317 	ldw	r2,12(r3)
     3e8:	e0bfff15 	stw	r2,-4(fp)
  //  Initial LCD
  LCD_Init();
     3ec:	00001f00 	call	1f0 <LCD_Init>
  //  Show Text to LCD
  LCD_Show_Text(Text1);
     3f0:	e13ff804 	addi	r4,fp,-32
     3f4:	000028c0 	call	28c <LCD_Show_Text>
  //  Change Line2
  LCD_Line2();
     3f8:	00003500 	call	350 <LCD_Line2>
  //  Show Text to LCD
  LCD_Show_Text(Text2);
     3fc:	e13ffc04 	addi	r4,fp,-16
     400:	000028c0 	call	28c <LCD_Show_Text>
}
     404:	e037883a 	mov	sp,fp
     408:	dfc00117 	ldw	ra,4(sp)
     40c:	df000017 	ldw	fp,0(sp)
     410:	dec00204 	addi	sp,sp,8
     414:	f800283a 	ret

00000418 <dc_init_struct>:

DEVICE_STATUS device_status;


void dc_init_struct(void)
{
     418:	deffff04 	addi	sp,sp,-4
     41c:	df000015 	stw	fp,0(sp)
     420:	d839883a 	mov	fp,sp
    device_status.hpi_status = 0; 
     424:	00800074 	movhi	r2,1
     428:	108cad04 	addi	r2,r2,12980
     42c:	1000000d 	sth	zero,0(r2)
    device_status.bEP1InTransfer = FALSE;
     430:	00800074 	movhi	r2,1
     434:	108cad04 	addi	r2,r2,12980
     438:	10000115 	stw	zero,4(r2)
    device_status.bEP2InTransfer = FALSE;
     43c:	00800074 	movhi	r2,1
     440:	108cad04 	addi	r2,r2,12980
     444:	10000215 	stw	zero,8(r2)
    device_status.EP1_Transfer_Timeout = 0;
     448:	00800074 	movhi	r2,1
     44c:	108cad04 	addi	r2,r2,12980
     450:	10000315 	stw	zero,12(r2)
}
     454:	e037883a 	mov	sp,fp
     458:	df000017 	ldw	fp,0(sp)
     45c:	dec00104 	addi	sp,sp,4
     460:	f800283a 	ret

00000464 <dc_clear_bug>:

void dc_clear_bug(void)
{
     464:	defffd04 	addi	sp,sp,-12
     468:	dfc00215 	stw	ra,8(sp)
     46c:	df000115 	stw	fp,4(sp)
     470:	df000104 	addi	fp,sp,4
            DEBUG_OUT("Clear up the interrupt\r\n");
     474:	01000074 	movhi	r4,1
     478:	213b3204 	addi	r4,r4,-4920
     47c:	00022440 	call	2244 <printf>
     480:	01000074 	movhi	r4,1
     484:	213b3404 	addi	r4,r4,-4912
     488:	000235c0 	call	235c <puts>
            alt_u16 intStat;
            hpi_read_mbx();
     48c:	000167c0 	call	167c <hpi_read_mbx>
            hpi_read_status();
     490:	000161c0 	call	161c <hpi_read_status>

            // Had to add the write due to a bug in BIOS where they overwrite
            // the mailbox after initialization with garbage.  The read clears
            // any pending interrupts.
             hpi_read_reg (HPI_SIE1_MSG_ADR, &intStat);
     494:	01005104 	movi	r4,324
     498:	e17fff04 	addi	r5,fp,-4
     49c:	000159c0 	call	159c <hpi_read_reg>
             hpi_write_reg (HPI_SIE1_MSG_ADR, 0);
     4a0:	01005104 	movi	r4,324
     4a4:	000b883a 	mov	r5,zero
     4a8:	00015e00 	call	15e0 <hpi_write_reg>
            hpi_read_reg (HPI_SIE2_MSG_ADR, &intStat);
     4ac:	01005204 	movi	r4,328
     4b0:	e17fff04 	addi	r5,fp,-4
     4b4:	000159c0 	call	159c <hpi_read_reg>
            hpi_write_reg (HPI_SIE2_MSG_ADR, 0);
     4b8:	01005204 	movi	r4,328
     4bc:	000b883a 	mov	r5,zero
     4c0:	00015e00 	call	15e0 <hpi_write_reg>

            hpi_write_reg (HOST1_STAT_REG, 0xFFFF);
     4c4:	01302414 	movui	r4,49296
     4c8:	017fffd4 	movui	r5,65535
     4cc:	00015e00 	call	15e0 <hpi_write_reg>
            hpi_write_reg (HOST2_STAT_REG, 0xFFFF);   
     4d0:	01302c14 	movui	r4,49328
     4d4:	017fffd4 	movui	r5,65535
     4d8:	00015e00 	call	15e0 <hpi_write_reg>
}
     4dc:	e037883a 	mov	sp,fp
     4e0:	dfc00117 	ldw	ra,4(sp)
     4e4:	df000017 	ldw	fp,0(sp)
     4e8:	dec00204 	addi	sp,sp,8
     4ec:	f800283a 	ret

000004f0 <dc_download>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int dc_download(char * download_data,int max_try)
{
     4f0:	defff904 	addi	sp,sp,-28
     4f4:	dfc00615 	stw	ra,24(sp)
     4f8:	df000515 	stw	fp,20(sp)
     4fc:	df000504 	addi	fp,sp,20
     500:	e13ffe15 	stw	r4,-8(fp)
     504:	e17fff15 	stw	r5,-4(fp)
    DEBUG_OUT("+ dc_download ---- \n");
     508:	01000074 	movhi	r4,1
     50c:	213b3204 	addi	r4,r4,-4920
     510:	00022440 	call	2244 <printf>
     514:	01000074 	movhi	r4,1
     518:	213b3a04 	addi	r4,r4,-4888
     51c:	000235c0 	call	235c <puts>
    int try_i=0;
     520:	e03ffd15 	stw	zero,-12(fp)
    int response = ERROR;
     524:	00bfffc4 	movi	r2,-1
     528:	e0bffc15 	stw	r2,-16(fp)
    unsigned short address;
    unsigned short download_length;   

    while((try_i<max_try)&&(response == ERROR)){
     52c:	00003306 	br	5fc <dc_download+0x10c>

       /* Download asm code array to ASIC RAM  */
       if (download_data != NULL) {
     530:	e0bffe17 	ldw	r2,-8(fp)
     534:	1005003a 	cmpeq	r2,r2,zero
     538:	1000231e 	bne	r2,zero,5c8 <dc_download+0xd8>
           dc_clear_bug();
     53c:	00004640 	call	464 <dc_clear_bug>

          /* Org address */
          address = get_ushort(download_data, 0xe);
     540:	e13ffe17 	ldw	r4,-8(fp)
     544:	01400384 	movi	r5,14
     548:	000182c0 	call	182c <get_ushort>
     54c:	e0bffb8d 	sth	r2,-18(fp)

          download_length = get_ushort(download_data, 0xb) - 2;
     550:	e13ffe17 	ldw	r4,-8(fp)
     554:	014002c4 	movi	r5,11
     558:	000182c0 	call	182c <get_ushort>
     55c:	10bfff84 	addi	r2,r2,-2
     560:	e0bffb0d 	sth	r2,-20(fp)

          DEBUG_OUT("dc_download: address=0x%x, download_length=0x%x\r\n", address, download_length);
     564:	01000074 	movhi	r4,1
     568:	213b3204 	addi	r4,r4,-4920
     56c:	00022440 	call	2244 <printf>
     570:	e17ffb8b 	ldhu	r5,-18(fp)
     574:	e1bffb0b 	ldhu	r6,-20(fp)
     578:	01000074 	movhi	r4,1
     57c:	213b3f04 	addi	r4,r4,-4868
     580:	00022440 	call	2244 <printf>

          if ((response = dc_download_code(address, download_length,
     584:	e13ffb8b 	ldhu	r4,-18(fp)
     588:	e17ffb0b 	ldhu	r5,-20(fp)
     58c:	e0bffe17 	ldw	r2,-8(fp)
     590:	11800404 	addi	r6,r2,16
     594:	00006440 	call	644 <dc_download_code>
     598:	e0bffc15 	stw	r2,-16(fp)
     59c:	e0bffc17 	ldw	r2,-16(fp)
     5a0:	10bfffd8 	cmpnei	r2,r2,-1
     5a4:	10001b1e 	bne	r2,zero,614 <dc_download+0x124>
                              &download_data[16] )) == ERROR) 
           {
             DEBUG_ERR("dc_download: download error,  try_count=%d\r\n",try_i);
     5a8:	01000074 	movhi	r4,1
     5ac:	213b4c04 	addi	r4,r4,-4816
     5b0:	00022440 	call	2244 <printf>
     5b4:	01000074 	movhi	r4,1
     5b8:	213b4f04 	addi	r4,r4,-4804
     5bc:	e17ffd17 	ldw	r5,-12(fp)
     5c0:	00022440 	call	2244 <printf>
     5c4:	00000806 	br	5e8 <dc_download+0xf8>
           }else{
               goto _Finished_Download;
           }
    
         } else {
            DEBUG_OUT("dc_download:Null Code--Nothing had being download to the ASIC Ram!!");
     5c8:	01000074 	movhi	r4,1
     5cc:	213b3204 	addi	r4,r4,-4920
     5d0:	00022440 	call	2244 <printf>
     5d4:	01000074 	movhi	r4,1
     5d8:	213b5b04 	addi	r4,r4,-4756
     5dc:	00022440 	call	2244 <printf>
            response = ERROR;
     5e0:	00bfffc4 	movi	r2,-1
     5e4:	e0bffc15 	stw	r2,-16(fp)
      }
       try_i++;
     5e8:	e0bffd17 	ldw	r2,-12(fp)
     5ec:	10800044 	addi	r2,r2,1
     5f0:	e0bffd15 	stw	r2,-12(fp)
       usleep(10000);
     5f4:	0109c404 	movi	r4,10000
     5f8:	000bc000 	call	bc00 <usleep>
    int try_i=0;
    int response = ERROR;
    unsigned short address;
    unsigned short download_length;   

    while((try_i<max_try)&&(response == ERROR)){
     5fc:	e0fffd17 	ldw	r3,-12(fp)
     600:	e0bfff17 	ldw	r2,-4(fp)
     604:	1880030e 	bge	r3,r2,614 <dc_download+0x124>
     608:	e0bffc17 	ldw	r2,-16(fp)
     60c:	10bfffe0 	cmpeqi	r2,r2,-1
     610:	103fc71e 	bne	r2,zero,530 <dc_download+0x40>
      }
       try_i++;
       usleep(10000);
    }
_Finished_Download:
    DEBUG_OUT("- dc_download ---- \n");
     614:	01000074 	movhi	r4,1
     618:	213b3204 	addi	r4,r4,-4920
     61c:	00022440 	call	2244 <printf>
     620:	01000074 	movhi	r4,1
     624:	213b6c04 	addi	r4,r4,-4688
     628:	000235c0 	call	235c <puts>
return response;
     62c:	e0bffc17 	ldw	r2,-16(fp)


}
     630:	e037883a 	mov	sp,fp
     634:	dfc00117 	ldw	ra,4(sp)
     638:	df000017 	ldw	fp,0(sp)
     63c:	dec00204 	addi	sp,sp,8
     640:	f800283a 	ret

00000644 <dc_download_code>:
 */

int dc_download_code(unsigned short chip_addr,
                      int byte_length,
                      char * data)
{
     644:	defff704 	addi	sp,sp,-36
     648:	dfc00815 	stw	ra,32(sp)
     64c:	df000715 	stw	fp,28(sp)
     650:	df000704 	addi	fp,sp,28
     654:	e17ffe15 	stw	r5,-8(fp)
     658:	e1bfff15 	stw	r6,-4(fp)
     65c:	e13ffd0d 	sth	r4,-12(fp)
    int response = ERROR;
     660:	00bfffc4 	movi	r2,-1
     664:	e0bffc15 	stw	r2,-16(fp)

    if (byte_length > 0) {
     668:	e0bffe17 	ldw	r2,-8(fp)
     66c:	10800050 	cmplti	r2,r2,1
     670:	10003e1e 	bne	r2,zero,76c <dc_download_code+0x128>

        response = hpi_write_memory(chip_addr, data,byte_length);
     674:	e13ffd0b 	ldhu	r4,-12(fp)
     678:	e17fff17 	ldw	r5,-4(fp)
     67c:	e1bffe17 	ldw	r6,-8(fp)
     680:	00013c00 	call	13c0 <hpi_write_memory>
     684:	e0bffc15 	stw	r2,-16(fp)
        char *cmpdata;
        cmpdata = malloc(byte_length);
     688:	e13ffe17 	ldw	r4,-8(fp)
     68c:	0001af00 	call	1af0 <malloc>
     690:	e0bffb15 	stw	r2,-20(fp)
        hpi_read_memory(chip_addr,cmpdata,byte_length);
     694:	e13ffd0b 	ldhu	r4,-12(fp)
     698:	e17ffb17 	ldw	r5,-20(fp)
     69c:	e1bffe17 	ldw	r6,-8(fp)
     6a0:	00012900 	call	1290 <hpi_read_memory>
        int  i;
        bool data_checker = TRUE;
     6a4:	00800044 	movi	r2,1
     6a8:	e0bff915 	stw	r2,-28(fp)
        for(i=0;i<byte_length; i++)
     6ac:	e03ffa15 	stw	zero,-24(fp)
     6b0:	00001706 	br	710 <dc_download_code+0xcc>
        {
         if(*(data+i) != *(cmpdata+i)) {
     6b4:	e0bffa17 	ldw	r2,-24(fp)
     6b8:	1007883a 	mov	r3,r2
     6bc:	e0bfff17 	ldw	r2,-4(fp)
     6c0:	1885883a 	add	r2,r3,r2
     6c4:	11000003 	ldbu	r4,0(r2)
     6c8:	e0bffa17 	ldw	r2,-24(fp)
     6cc:	1007883a 	mov	r3,r2
     6d0:	e0bffb17 	ldw	r2,-20(fp)
     6d4:	1885883a 	add	r2,r3,r2
     6d8:	10800003 	ldbu	r2,0(r2)
     6dc:	20c03fcc 	andi	r3,r4,255
     6e0:	18c0201c 	xori	r3,r3,128
     6e4:	18ffe004 	addi	r3,r3,-128
     6e8:	10803fcc 	andi	r2,r2,255
     6ec:	1080201c 	xori	r2,r2,128
     6f0:	10bfe004 	addi	r2,r2,-128
     6f4:	18800326 	beq	r3,r2,704 <dc_download_code+0xc0>
            //DEBUG_OUT("err[%d]: wrdata:0x%02X,rddata :0x%02X\n",i,(char)*(data+i),(char)*(cmpdata+i));
           // DEBUG_OUT("err[%d],",i);
            data_checker =  FALSE ;
     6f8:	e03ff915 	stw	zero,-28(fp)
            response     =  ERROR;
     6fc:	00bfffc4 	movi	r2,-1
     700:	e0bffc15 	stw	r2,-16(fp)
        char *cmpdata;
        cmpdata = malloc(byte_length);
        hpi_read_memory(chip_addr,cmpdata,byte_length);
        int  i;
        bool data_checker = TRUE;
        for(i=0;i<byte_length; i++)
     704:	e0bffa17 	ldw	r2,-24(fp)
     708:	10800044 	addi	r2,r2,1
     70c:	e0bffa15 	stw	r2,-24(fp)
     710:	e0fffa17 	ldw	r3,-24(fp)
     714:	e0bffe17 	ldw	r2,-8(fp)
     718:	18bfe616 	blt	r3,r2,6b4 <dc_download_code+0x70>
            data_checker =  FALSE ;
            response     =  ERROR;
            }
        }

       free(cmpdata);
     71c:	e13ffb17 	ldw	r4,-20(fp)
     720:	0001adc0 	call	1adc <free>

       if( data_checker == FALSE )
     724:	e0bff917 	ldw	r2,-28(fp)
     728:	1004c03a 	cmpne	r2,r2,zero
     72c:	1000061e 	bne	r2,zero,748 <dc_download_code+0x104>
       {
        DEBUG_ERR("Data Checker ERROR! \n");
     730:	01000074 	movhi	r4,1
     734:	213b4c04 	addi	r4,r4,-4816
     738:	00022440 	call	2244 <printf>
     73c:	01000074 	movhi	r4,1
     740:	213b7104 	addi	r4,r4,-4668
     744:	000235c0 	call	235c <puts>
       }

       if ( response == SUCCESS) {
     748:	e0bffc17 	ldw	r2,-16(fp)
     74c:	1004c03a 	cmpne	r2,r2,zero
     750:	1000061e 	bne	r2,zero,76c <dc_download_code+0x128>
           
             //COMM_JUMP2CODE flag,it will be cleared when mailbox Ack
              hpi_write_reg(COMM_CODE_ADDR, chip_addr);
     754:	e17ffd0b 	ldhu	r5,-12(fp)
     758:	01006f04 	movi	r4,444
     75c:	00015e00 	call	15e0 <hpi_write_reg>

              response = hpi_command(COMM_JUMP2CODE);
     760:	01338014 	movui	r4,52736
     764:	00007840 	call	784 <hpi_command>
     768:	e0bffc15 	stw	r2,-16(fp)
          }
    }
    return response;
     76c:	e0bffc17 	ldw	r2,-16(fp)
}
     770:	e037883a 	mov	sp,fp
     774:	dfc00117 	ldw	ra,4(sp)
     778:	df000017 	ldw	fp,0(sp)
     77c:	dec00204 	addi	sp,sp,8
     780:	f800283a 	ret

00000784 <hpi_command>:

int hpi_command( unsigned short cmd)
{ 
     784:	defffa04 	addi	sp,sp,-24
     788:	dfc00515 	stw	ra,20(sp)
     78c:	df000415 	stw	fp,16(sp)
     790:	df000404 	addi	fp,sp,16
     794:	e13ffe0d 	sth	r4,-8(fp)
	alt_u32 Timeout;
    alt_u16 IntStat;
    
    IntStat= hpi_read_status();  // clear interrupt status register
     798:	000161c0 	call	161c <hpi_read_status>
     79c:	e0bffc0d 	sth	r2,-16(fp)
    
    device_status.hpi_status |= IntStat; //record into hpi_status
     7a0:	00800074 	movhi	r2,1
     7a4:	108cad04 	addi	r2,r2,12980
     7a8:	10c0000b 	ldhu	r3,0(r2)
     7ac:	e0bffc0b 	ldhu	r2,-16(fp)
     7b0:	1884b03a 	or	r2,r3,r2
     7b4:	1007883a 	mov	r3,r2
     7b8:	00800074 	movhi	r2,1
     7bc:	108cad04 	addi	r2,r2,12980
     7c0:	10c0000d 	sth	r3,0(r2)
    
    hpi_write_mbx(cmd);
     7c4:	e13ffe0b 	ldhu	r4,-8(fp)
     7c8:	000164c0 	call	164c <hpi_write_mbx>
       
       IntStat= hpi_read_status();      
     7cc:	000161c0 	call	161c <hpi_read_status>
     7d0:	e0bffc0d 	sth	r2,-16(fp)
          device_status.hpi_status |= IntStat;   //record into hpi_status
     7d4:	00800074 	movhi	r2,1
     7d8:	108cad04 	addi	r2,r2,12980
     7dc:	10c0000b 	ldhu	r3,0(r2)
     7e0:	e0bffc0b 	ldhu	r2,-16(fp)
     7e4:	1884b03a 	or	r2,r3,r2
     7e8:	1007883a 	mov	r3,r2
     7ec:	00800074 	movhi	r2,1
     7f0:	108cad04 	addi	r2,r2,12980
     7f4:	10c0000d 	sth	r3,0(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     7f8:	00800074 	movhi	r2,1
     7fc:	108ca104 	addi	r2,r2,12932
     800:	10800017 	ldw	r2,0(r2)
     804:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     808:	00800074 	movhi	r2,1
     80c:	108ca004 	addi	r2,r2,12928
     810:	10800017 	ldw	r2,0(r2)

      Timeout = alt_nticks() + alt_ticks_per_second();
     814:	1885883a 	add	r2,r3,r2
     818:	e0bffd15 	stw	r2,-12(fp)
      while(((IntStat& MBX_OUT_FLG) == 0)&&(alt_nticks() < Timeout))
     81c:	00000b06 	br	84c <hpi_command+0xc8>
      {
          IntStat= hpi_read_status();      
     820:	000161c0 	call	161c <hpi_read_status>
     824:	e0bffc0d 	sth	r2,-16(fp)
          device_status.hpi_status |= IntStat;   //record into hpi_status
     828:	00800074 	movhi	r2,1
     82c:	108cad04 	addi	r2,r2,12980
     830:	10c0000b 	ldhu	r3,0(r2)
     834:	e0bffc0b 	ldhu	r2,-16(fp)
     838:	1884b03a 	or	r2,r3,r2
     83c:	1007883a 	mov	r3,r2
     840:	00800074 	movhi	r2,1
     844:	108cad04 	addi	r2,r2,12980
     848:	10c0000d 	sth	r3,0(r2)
       
       IntStat= hpi_read_status();      
          device_status.hpi_status |= IntStat;   //record into hpi_status

      Timeout = alt_nticks() + alt_ticks_per_second();
      while(((IntStat& MBX_OUT_FLG) == 0)&&(alt_nticks() < Timeout))
     84c:	e0bffc0b 	ldhu	r2,-16(fp)
     850:	1080004c 	andi	r2,r2,1
     854:	1004c03a 	cmpne	r2,r2,zero
     858:	1000061e 	bne	r2,zero,874 <hpi_command+0xf0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     85c:	00800074 	movhi	r2,1
     860:	108ca104 	addi	r2,r2,12932
     864:	10800017 	ldw	r2,0(r2)
     868:	1007883a 	mov	r3,r2
     86c:	e0bffd17 	ldw	r2,-12(fp)
     870:	18bfeb36 	bltu	r3,r2,820 <hpi_command+0x9c>
      {
          IntStat= hpi_read_status();      
          device_status.hpi_status |= IntStat;   //record into hpi_status
       }

        return (( hpi_read_mbx() == COMM_ACK) ? SUCCESS : ERROR );
     874:	000167c0 	call	167c <hpi_read_mbx>
     878:	10bfffcc 	andi	r2,r2,65535
     87c:	1083fb58 	cmpnei	r2,r2,4077
     880:	1000021e 	bne	r2,zero,88c <hpi_command+0x108>
     884:	e03fff15 	stw	zero,-4(fp)
     888:	00000206 	br	894 <hpi_command+0x110>
     88c:	00bfffc4 	movi	r2,-1
     890:	e0bfff15 	stw	r2,-4(fp)
     894:	e0bfff17 	ldw	r2,-4(fp)
}
     898:	e037883a 	mov	sp,fp
     89c:	dfc00117 	ldw	ra,4(sp)
     8a0:	df000017 	ldw	fp,0(sp)
     8a4:	dec00204 	addi	sp,sp,8
     8a8:	f800283a 	ret

000008ac <usb_send_data>:
                  unsigned short send_buffer_location,
                  unsigned char * data,  // 
                  int byte_length
                  )

{
     8ac:	defff704 	addi	sp,sp,-36
     8b0:	dfc00815 	stw	ra,32(sp)
     8b4:	df000715 	stw	fp,28(sp)
     8b8:	df000704 	addi	fp,sp,28
     8bc:	e1bffe15 	stw	r6,-8(fp)
     8c0:	e1ffff15 	stw	r7,-4(fp)
     8c4:	e13ffc0d 	sth	r4,-16(fp)
     8c8:	e17ffd0d 	sth	r5,-12(fp)
    int response = ERROR;
     8cc:	00bfffc4 	movi	r2,-1
     8d0:	e0bff915 	stw	r2,-28(fp)
    if(endpoint == 1) {
     8d4:	e0bffc0b 	ldhu	r2,-16(fp)
     8d8:	10800058 	cmpnei	r2,r2,1
     8dc:	1000371e 	bne	r2,zero,9bc <usb_send_data+0x110>
  
       if(device_status.bEP1InTransfer == FALSE) {     
     8e0:	00800074 	movhi	r2,1
     8e4:	108cad04 	addi	r2,r2,12980
     8e8:	10800117 	ldw	r2,4(r2)
     8ec:	1004c03a 	cmpne	r2,r2,zero
     8f0:	1000321e 	bne	r2,zero,9bc <usb_send_data+0x110>
       //you can set bEP1InTransfer TRUE when you want to make sure this transaction to finish
       //then you also need to do something when  you need to send data while endpoint is in transfer (list to send ??)
       
              TRANSFER_FRAME frame;
    
              frame.wNextLink = 0;
     8f4:	e03ffa0d 	sth	zero,-24(fp)
              frame.wAddress = send_buffer_location;
     8f8:	e0bffd0b 	ldhu	r2,-12(fp)
     8fc:	e0bffa8d 	sth	r2,-22(fp)
              frame.wLength  = byte_length; 
     900:	e0bfff17 	ldw	r2,-4(fp)
     904:	e0bffb0d 	sth	r2,-20(fp)
              frame.wCallBack = 0;
     908:	e03ffb8d 	sth	zero,-18(fp)
    
              /* write the data to the RAM buffer */
              hpi_write_memory(send_buffer_location,(char *)data,byte_length);
     90c:	e13ffd0b 	ldhu	r4,-12(fp)
     910:	e17ffe17 	ldw	r5,-8(fp)
     914:	e1bfff17 	ldw	r6,-4(fp)
     918:	00013c00 	call	13c0 <hpi_write_memory>
    
              /* Write control structure to the RAM buffer */
              hpi_write_memory(EP1_TRANSFER_STRUCT_ADDRESS,(char*)&frame,sizeof(TRANSFER_FRAME));
     91c:	e17ffa04 	addi	r5,fp,-24
     920:	01040004 	movi	r4,4096
     924:	01800204 	movi	r6,8
     928:	00013c00 	call	13c0 <hpi_write_memory>
           
             //execute SUSB2_SEND_INT
                hpi_write_reg(COMM_INT_NUM,SUSB2_SEND_INT);
     92c:	01007084 	movi	r4,450
     930:	01401804 	movi	r5,96
     934:	00015e00 	call	15e0 <hpi_write_reg>
    
                /* Set Register values */
                hpi_write_reg(COMM_R0, 0);
     938:	01007104 	movi	r4,452
     93c:	000b883a 	mov	r5,zero
     940:	00015e00 	call	15e0 <hpi_write_reg>
                hpi_write_reg(COMM_R1, endpoint&0x000f);
     944:	e0bffc0b 	ldhu	r2,-16(fp)
     948:	114003cc 	andi	r5,r2,15
     94c:	01007184 	movi	r4,454
     950:	00015e00 	call	15e0 <hpi_write_reg>
                hpi_write_reg(COMM_R8, EP1_TRANSFER_STRUCT_ADDRESS);
     954:	01007504 	movi	r4,468
     958:	01440004 	movi	r5,4096
     95c:	00015e00 	call	15e0 <hpi_write_reg>
          
                response = hpi_command(COMM_EXEC_INT);
     960:	01338054 	movui	r4,52737
     964:	00007840 	call	784 <hpi_command>
     968:	e0bff915 	stw	r2,-28(fp)
            
              if(response == SUCCESS){ DEBUG_OUT("send success!\n");
     96c:	e0bff917 	ldw	r2,-28(fp)
     970:	1004c03a 	cmpne	r2,r2,zero
     974:	10000b1e 	bne	r2,zero,9a4 <usb_send_data+0xf8>
     978:	01000074 	movhi	r4,1
     97c:	213b3204 	addi	r4,r4,-4920
     980:	00022440 	call	2244 <printf>
     984:	01000074 	movhi	r4,1
     988:	213b7704 	addi	r4,r4,-4644
     98c:	000235c0 	call	235c <puts>
              device_status.bEP1InTransfer = TRUE;
     990:	00c00074 	movhi	r3,1
     994:	18ccad04 	addi	r3,r3,12980
     998:	00800044 	movi	r2,1
     99c:	18800115 	stw	r2,4(r3)
     9a0:	00000606 	br	9bc <usb_send_data+0x110>
              }
              else   { DEBUG_OUT("send failed!\n");}
     9a4:	01000074 	movhi	r4,1
     9a8:	213b3204 	addi	r4,r4,-4920
     9ac:	00022440 	call	2244 <printf>
     9b0:	01000074 	movhi	r4,1
     9b4:	213b7b04 	addi	r4,r4,-4628
     9b8:	000235c0 	call	235c <puts>
    }
    else{
     // Do something here for other endpoint 
    // DEBUG_OUT("usb_send_data: endpoint %d. Nothing had beeing done!\n",endpoint);
    }
   return response ;
     9bc:	e0bff917 	ldw	r2,-28(fp)
}
     9c0:	e037883a 	mov	sp,fp
     9c4:	dfc00117 	ldw	ra,4(sp)
     9c8:	df000017 	ldw	fp,0(sp)
     9cc:	dec00204 	addi	sp,sp,8
     9d0:	f800283a 	ret

000009d4 <usb_enable_receive_data>:
                  unsigned short endpoint,
                  unsigned short receive_buffer_location,
                  int byte_length
                  )

{
     9d4:	defff804 	addi	sp,sp,-32
     9d8:	dfc00715 	stw	ra,28(sp)
     9dc:	df000615 	stw	fp,24(sp)
     9e0:	df000604 	addi	fp,sp,24
     9e4:	e1bfff15 	stw	r6,-4(fp)
     9e8:	e13ffd0d 	sth	r4,-12(fp)
     9ec:	e17ffe0d 	sth	r5,-8(fp)
    int response = ERROR;
     9f0:	00bfffc4 	movi	r2,-1
     9f4:	e0bffa15 	stw	r2,-24(fp)
        if(endpoint == 2) {
     9f8:	e0bffd0b 	ldhu	r2,-12(fp)
     9fc:	10800098 	cmpnei	r2,r2,2
     a00:	1000371e 	bne	r2,zero,ae0 <usb_enable_receive_data+0x10c>
  
       if(device_status.bEP2InTransfer == FALSE) {   
     a04:	00800074 	movhi	r2,1
     a08:	108cad04 	addi	r2,r2,12980
     a0c:	10800217 	ldw	r2,8(r2)
     a10:	1004c03a 	cmpne	r2,r2,zero
     a14:	10002b1e 	bne	r2,zero,ac4 <usb_enable_receive_data+0xf0>
        
//            device_status.bEP2InTransfer = TRUE;
      
            TRANSFER_FRAME frame;
            
            frame.wNextLink = 0;
     a18:	e03ffb0d 	sth	zero,-20(fp)
            frame.wAddress = receive_buffer_location;
     a1c:	e0bffe0b 	ldhu	r2,-8(fp)
     a20:	e0bffb8d 	sth	r2,-18(fp)
            frame.wLength  = byte_length;
     a24:	e0bfff17 	ldw	r2,-4(fp)
     a28:	e0bffc0d 	sth	r2,-16(fp)
            frame.wCallBack = 0;
     a2c:	e03ffc8d 	sth	zero,-14(fp)
            
           
            /* Write control structure to the RAM buffer */
            hpi_write_memory(EP2_TRANSFER_STRUCT_ADDRESS,(char*)&frame,sizeof(TRANSFER_FRAME));
     a30:	e17ffb04 	addi	r5,fp,-20
     a34:	01080004 	movi	r4,8192
     a38:	01800204 	movi	r6,8
     a3c:	00013c00 	call	13c0 <hpi_write_memory>
                   
                 //execute SUSB2_SEND_INT
                hpi_write_reg(COMM_INT_NUM,SUSB2_RECEIVE_INT);
     a40:	01007084 	movi	r4,450
     a44:	01401844 	movi	r5,97
     a48:	00015e00 	call	15e0 <hpi_write_reg>
    
                /* Set Register values */
                hpi_write_reg(COMM_R0, 0);
     a4c:	01007104 	movi	r4,452
     a50:	000b883a 	mov	r5,zero
     a54:	00015e00 	call	15e0 <hpi_write_reg>
                hpi_write_reg(COMM_R1, endpoint&0x000f);
     a58:	e0bffd0b 	ldhu	r2,-12(fp)
     a5c:	114003cc 	andi	r5,r2,15
     a60:	01007184 	movi	r4,454
     a64:	00015e00 	call	15e0 <hpi_write_reg>
                hpi_write_reg(COMM_R8, EP2_TRANSFER_STRUCT_ADDRESS);
     a68:	01007504 	movi	r4,468
     a6c:	01480004 	movi	r5,8192
     a70:	00015e00 	call	15e0 <hpi_write_reg>
          
                response = hpi_command(COMM_EXEC_INT);
     a74:	01338054 	movui	r4,52737
     a78:	00007840 	call	784 <hpi_command>
     a7c:	e0bffa15 	stw	r2,-24(fp)
                if(response == SUCCESS) {DEBUG_OUT("receive enable success!\n");}
     a80:	e0bffa17 	ldw	r2,-24(fp)
     a84:	1004c03a 	cmpne	r2,r2,zero
     a88:	1000071e 	bne	r2,zero,aa8 <usb_enable_receive_data+0xd4>
     a8c:	01000074 	movhi	r4,1
     a90:	213b3204 	addi	r4,r4,-4920
     a94:	00022440 	call	2244 <printf>
     a98:	01000074 	movhi	r4,1
     a9c:	213b7f04 	addi	r4,r4,-4612
     aa0:	000235c0 	call	235c <puts>
     aa4:	00001506 	br	afc <usb_enable_receive_data+0x128>
                else  { DEBUG_OUT("Receive enable failed!\n");}
     aa8:	01000074 	movhi	r4,1
     aac:	213b3204 	addi	r4,r4,-4920
     ab0:	00022440 	call	2244 <printf>
     ab4:	01000074 	movhi	r4,1
     ab8:	213b8504 	addi	r4,r4,-4588
     abc:	000235c0 	call	235c <puts>
     ac0:	00000e06 	br	afc <usb_enable_receive_data+0x128>
       }else{
         DEBUG_OUT("usb_receive_data: ep2 is enabled!\n");
     ac4:	01000074 	movhi	r4,1
     ac8:	213b3204 	addi	r4,r4,-4920
     acc:	00022440 	call	2244 <printf>
     ad0:	01000074 	movhi	r4,1
     ad4:	213b8b04 	addi	r4,r4,-4564
     ad8:	000235c0 	call	235c <puts>
     adc:	00000706 	br	afc <usb_enable_receive_data+0x128>
         }
    }
    else{
     // Do something here for other endpoint 
     DEBUG_OUT("usb_receive_data: endpoint %d. Nothing had being done!\n",endpoint);
     ae0:	01000074 	movhi	r4,1
     ae4:	213b3204 	addi	r4,r4,-4920
     ae8:	00022440 	call	2244 <printf>
     aec:	e17ffd0b 	ldhu	r5,-12(fp)
     af0:	01000074 	movhi	r4,1
     af4:	213b9404 	addi	r4,r4,-4528
     af8:	00022440 	call	2244 <printf>
    }  
       

   return response ;
     afc:	e0bffa17 	ldw	r2,-24(fp)
}
     b00:	e037883a 	mov	sp,fp
     b04:	dfc00117 	ldw	ra,4(sp)
     b08:	df000017 	ldw	fp,0(sp)
     b0c:	dec00204 	addi	sp,sp,8
     b10:	f800283a 	ret

00000b14 <dcProcessEvent>:
 *  DESCRIPTION:
 *    This function read the SIE2 MSG and hanlder it
 *
 *  RETURNS:  void
 */
void dcProcessEvent(void){
     b14:	defffd04 	addi	sp,sp,-12
     b18:	dfc00215 	stw	ra,8(sp)
     b1c:	df000115 	stw	fp,4(sp)
     b20:	df000104 	addi	fp,sp,4
       */
       
        // a loop checker is enough in this demo
                    alt_u16 message;
                    // See which endpoint is interrupting
                    hpi_read_reg(HPI_SIE2_MSG_ADR,(alt_u16 *)&message);
     b24:	01005204 	movi	r4,328
     b28:	e17fff04 	addi	r5,fp,-4
     b2c:	000159c0 	call	159c <hpi_read_reg>
                    
                    if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);  //clear the sie mailbox
     b30:	e0bfff0b 	ldhu	r2,-4(fp)
     b34:	10bfffcc 	andi	r2,r2,65535
     b38:	1005003a 	cmpeq	r2,r2,zero
     b3c:	1000031e 	bne	r2,zero,b4c <dcProcessEvent+0x38>
     b40:	01005204 	movi	r4,328
     b44:	000b883a 	mov	r5,zero
     b48:	00015e00 	call	15e0 <hpi_write_reg>
                    
                    //handle which necessary
                    message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
     b4c:	e0bfff0b 	ldhu	r2,-4(fp)
     b50:	108b418c 	andi	r2,r2,11526
     b54:	e0bfff0d 	sth	r2,-4(fp)
                  
                    if(message) 
     b58:	e0bfff0b 	ldhu	r2,-4(fp)
     b5c:	10bfffcc 	andi	r2,r2,65535
     b60:	1005003a 	cmpeq	r2,r2,zero
     b64:	1000031e 	bne	r2,zero,b74 <dcProcessEvent+0x60>
                    {
                        sie2_msg_handler( message); //loop while msg = 0
     b68:	e0bfff0b 	ldhu	r2,-4(fp)
     b6c:	113fffcc 	andi	r4,r2,65535
     b70:	0000b880 	call	b88 <sie2_msg_handler>
                    }

}
     b74:	e037883a 	mov	sp,fp
     b78:	dfc00117 	ldw	ra,4(sp)
     b7c:	df000017 	ldw	fp,0(sp)
     b80:	dec00204 	addi	sp,sp,8
     b84:	f800283a 	ret

00000b88 <sie2_msg_handler>:
 *    This function  handle the SIE2 message
 *
 *  RETURNS:  void
 */
void sie2_msg_handler(unsigned short message)
{
     b88:	defffb04 	addi	sp,sp,-20
     b8c:	dfc00415 	stw	ra,16(sp)
     b90:	df000315 	stw	fp,12(sp)
     b94:	dc000215 	stw	r16,8(sp)
     b98:	df000204 	addi	fp,sp,8
     b9c:	e13fff0d 	sth	r4,-4(fp)
  alt_u32 Timeout;
	  while(message) {
     ba0:	0000ec06 	br	f54 <sie2_msg_handler+0x3cc>
       
            if(message & SUSB_RST_MSG)
     ba4:	e0bfff0b 	ldhu	r2,-4(fp)
     ba8:	10bfffcc 	andi	r2,r2,65535
     bac:	1080400c 	andi	r2,r2,256
     bb0:	1005003a 	cmpeq	r2,r2,zero
     bb4:	1000321e 	bne	r2,zero,c80 <sie2_msg_handler+0xf8>
             {
              DEBUG_OUT("[sie2 msg]:SUSB_RST_MSG\n");
     bb8:	01000074 	movhi	r4,1
     bbc:	213ba204 	addi	r4,r4,-4472
     bc0:	00022440 	call	2244 <printf>
     bc4:	01000074 	movhi	r4,1
     bc8:	213ba404 	addi	r4,r4,-4464
     bcc:	000235c0 	call	235c <puts>
     bd0:	00800074 	movhi	r2,1
     bd4:	108ca104 	addi	r2,r2,12932
     bd8:	10800017 	ldw	r2,0(r2)
     bdc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     be0:	00800074 	movhi	r2,1
     be4:	108ca004 	addi	r2,r2,12928
     be8:	10800017 	ldw	r2,0(r2)
     bec:	1009883a 	mov	r4,r2


       	         Timeout = alt_nticks() + alt_ticks_per_second()/3;
     bf0:	014000c4 	movi	r5,3
     bf4:	0001acc0 	call	1acc <__udivsi3>
     bf8:	8085883a 	add	r2,r16,r2
     bfc:	e0bffe15 	stw	r2,-8(fp)
                 while((hpi_command(COMM_RESET)!= SUCCESS)&&  alt_nticks()<Timeout){
     c00:	00000206 	br	c0c <sie2_msg_handler+0x84>
           	        usleep(1000)  ;
     c04:	0100fa04 	movi	r4,1000
     c08:	000bc000 	call	bc00 <usleep>
             {
              DEBUG_OUT("[sie2 msg]:SUSB_RST_MSG\n");


       	         Timeout = alt_nticks() + alt_ticks_per_second()/3;
                 while((hpi_command(COMM_RESET)!= SUCCESS)&&  alt_nticks()<Timeout){
     c0c:	013e9414 	movui	r4,64080
     c10:	00007840 	call	784 <hpi_command>
     c14:	1005003a 	cmpeq	r2,r2,zero
     c18:	1000061e 	bne	r2,zero,c34 <sie2_msg_handler+0xac>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     c1c:	00800074 	movhi	r2,1
     c20:	108ca104 	addi	r2,r2,12932
     c24:	10800017 	ldw	r2,0(r2)
     c28:	1007883a 	mov	r3,r2
     c2c:	e0bffe17 	ldw	r2,-8(fp)
     c30:	18bff436 	bltu	r3,r2,c04 <sie2_msg_handler+0x7c>
     c34:	00800074 	movhi	r2,1
     c38:	108ca104 	addi	r2,r2,12932
     c3c:	10800017 	ldw	r2,0(r2)
     c40:	1007883a 	mov	r3,r2
           	        usleep(1000)  ;
                 }
                 if(alt_nticks()>Timeout){
     c44:	e0bffe17 	ldw	r2,-8(fp)
     c48:	10c0072e 	bgeu	r2,r3,c68 <sie2_msg_handler+0xe0>
           	          DEBUG_OUT("device COMM_RESET failed\n");
     c4c:	01000074 	movhi	r4,1
     c50:	213ba204 	addi	r4,r4,-4472
     c54:	00022440 	call	2244 <printf>
     c58:	01000074 	movhi	r4,1
     c5c:	213baa04 	addi	r4,r4,-4440
     c60:	000235c0 	call	235c <puts>
     c64:	00000606 	br	c80 <sie2_msg_handler+0xf8>
                 }else{
           	          DEBUG_OUT("device COMM_RESET success !!\n");
     c68:	01000074 	movhi	r4,1
     c6c:	213ba204 	addi	r4,r4,-4472
     c70:	00022440 	call	2244 <printf>
     c74:	01000074 	movhi	r4,1
     c78:	213bb104 	addi	r4,r4,-4412
     c7c:	000235c0 	call	235c <puts>
                 }
             }
             if(message & SUSB_SOF_MSG)
     c80:	e0bfff0b 	ldhu	r2,-4(fp)
     c84:	10bfffcc 	andi	r2,r2,65535
     c88:	1080800c 	andi	r2,r2,512
     c8c:	1005003a 	cmpeq	r2,r2,zero
     c90:	1000061e 	bne	r2,zero,cac <sie2_msg_handler+0x124>
             {
              DEBUG_OUT("[sie2 msg]:SUSB_SOF_MSG\n");
     c94:	01000074 	movhi	r4,1
     c98:	213ba204 	addi	r4,r4,-4472
     c9c:	00022440 	call	2244 <printf>
     ca0:	01000074 	movhi	r4,1
     ca4:	213bb904 	addi	r4,r4,-4380
     ca8:	000235c0 	call	235c <puts>
              // do something
             }
             
            if(message & SUSB_CFG_MSG)
     cac:	e0bfff0b 	ldhu	r2,-4(fp)
     cb0:	10bfffcc 	andi	r2,r2,65535
     cb4:	1081000c 	andi	r2,r2,1024
     cb8:	1005003a 	cmpeq	r2,r2,zero
     cbc:	1000291e 	bne	r2,zero,d64 <sie2_msg_handler+0x1dc>
               {
               DEBUG_OUT("[sie2 msg]:SUSB_CFG_MSG\n");
     cc0:	01000074 	movhi	r4,1
     cc4:	213ba204 	addi	r4,r4,-4472
     cc8:	00022440 	call	2244 <printf>
     ccc:	01000074 	movhi	r4,1
     cd0:	213bbf04 	addi	r4,r4,-4356
     cd4:	000235c0 	call	235c <puts>
               
               dc_init_struct();
     cd8:	00004180 	call	418 <dc_init_struct>
             
               //Lcd show default words
               LCD_Test();
     cdc:	000038c0 	call	38c <LCD_Test>
               
               //SEG7_8 show default values
               IOWR(SEG7_DISPLAY_BASE,0,0); 
     ce0:	00820034 	movhi	r2,2048
     ce4:	10802804 	addi	r2,r2,160
     ce8:	10000035 	stwio	zero,0(r2)
               
               //LED  all turn off
               IOWR(LED_GREEN_BASE,0,0);
     cec:	00820034 	movhi	r2,2048
     cf0:	10801c04 	addi	r2,r2,112
     cf4:	10000035 	stwio	zero,0(r2)
               IOWR(LED_RED_BASE, 0 ,0);
     cf8:	00820034 	movhi	r2,2048
     cfc:	10802004 	addi	r2,r2,128
     d00:	10000035 	stwio	zero,0(r2)
               
               old_button_sw_status.button = IORD(BUTTON_PIO_BASE,0)&BUTTON_FLAG;
     d04:	00820034 	movhi	r2,2048
     d08:	10801804 	addi	r2,r2,96
     d0c:	10800037 	ldwio	r2,0(r2)
     d10:	108003cc 	andi	r2,r2,15
     d14:	d0a75c05 	stb	r2,-25232(gp)
               old_button_sw_status.sw  =  IORD(SWITCH_PIO_BASE,0)&SW_FLAG;
     d18:	00820034 	movhi	r2,2048
     d1c:	10801404 	addi	r2,r2,80
     d20:	10800037 	ldwio	r2,0(r2)
     d24:	1007883a 	mov	r3,r2
     d28:	00800134 	movhi	r2,4
     d2c:	10bfffc4 	addi	r2,r2,-1
     d30:	1886703a 	and	r3,r3,r2
     d34:	00800074 	movhi	r2,1
     d38:	108c9504 	addi	r2,r2,12884
     d3c:	10c00015 	stw	r3,0(r2)
                              
               usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
     d40:	01000084 	movi	r4,2
     d44:	01484004 	movi	r5,8448
     d48:	01801004 	movi	r6,64
     d4c:	00009d40 	call	9d4 <usb_enable_receive_data>

               usb_send_data(1,EP1_SEND_BUF_ADDRESS,(char *)&old_button_sw_status,sizeof(OUT_PACKET)); // send switch and button status to pc
     d50:	d1a75c04 	addi	r6,gp,-25232
     d54:	01000044 	movi	r4,1
     d58:	01444004 	movi	r5,4352
     d5c:	01c00204 	movi	r7,8
     d60:	00008ac0 	call	8ac <usb_send_data>
              }

         if(message & SUSB_SUS_MSG)
     d64:	e0bfff0b 	ldhu	r2,-4(fp)
     d68:	10bfffcc 	andi	r2,r2,65535
     d6c:	1082000c 	andi	r2,r2,2048
     d70:	1005003a 	cmpeq	r2,r2,zero
     d74:	1000061e 	bne	r2,zero,d90 <sie2_msg_handler+0x208>
           {
            DEBUG_OUT("[sie2 msg]:SUSB_SUS_MSG\n");
     d78:	01000074 	movhi	r4,1
     d7c:	213ba204 	addi	r4,r4,-4472
     d80:	00022440 	call	2244 <printf>
     d84:	01000074 	movhi	r4,1
     d88:	213bc504 	addi	r4,r4,-4332
     d8c:	000235c0 	call	235c <puts>
            // do something
           }
       
       
           if(message & SUSB_EP0_MSG)
     d90:	e0bfff0b 	ldhu	r2,-4(fp)
     d94:	10bfffcc 	andi	r2,r2,65535
     d98:	1080004c 	andi	r2,r2,1
     d9c:	10803fcc 	andi	r2,r2,255
     da0:	1005003a 	cmpeq	r2,r2,zero
     da4:	1000061e 	bne	r2,zero,dc0 <sie2_msg_handler+0x238>
            {
              DEBUG_OUT("[sie2 msg]:ep0 msg\n");
     da8:	01000074 	movhi	r4,1
     dac:	213ba204 	addi	r4,r4,-4472
     db0:	00022440 	call	2244 <printf>
     db4:	01000074 	movhi	r4,1
     db8:	213bcb04 	addi	r4,r4,-4308
     dbc:	000235c0 	call	235c <puts>
              /* ignore ep0 */
            }
           if(message & SUSB_EP1_MSG)
     dc0:	e0bfff0b 	ldhu	r2,-4(fp)
     dc4:	10bfffcc 	andi	r2,r2,65535
     dc8:	1080008c 	andi	r2,r2,2
     dcc:	1005003a 	cmpeq	r2,r2,zero
     dd0:	1000091e 	bne	r2,zero,df8 <sie2_msg_handler+0x270>
            {
              DEBUG_OUT("[sie2 msg]: ep1 msg: data had been received by host\n");
     dd4:	01000074 	movhi	r4,1
     dd8:	213ba204 	addi	r4,r4,-4472
     ddc:	00022440 	call	2244 <printf>
     de0:	01000074 	movhi	r4,1
     de4:	213bd004 	addi	r4,r4,-4288
     de8:	000235c0 	call	235c <puts>
              device_status.bEP1InTransfer = FALSE ;
     dec:	00800074 	movhi	r2,1
     df0:	108cad04 	addi	r2,r2,12980
     df4:	10000115 	stw	zero,4(r2)
            }
           if(message & SUSB_EP2_MSG)
     df8:	e0bfff0b 	ldhu	r2,-4(fp)
     dfc:	10bfffcc 	andi	r2,r2,65535
     e00:	1080010c 	andi	r2,r2,4
     e04:	1005003a 	cmpeq	r2,r2,zero
     e08:	10000e1e 	bne	r2,zero,e44 <sie2_msg_handler+0x2bc>
            {
              DEBUG_OUT("[sie2 msg]:ep2 msg: receiving host data \n");
     e0c:	01000074 	movhi	r4,1
     e10:	213ba204 	addi	r4,r4,-4472
     e14:	00022440 	call	2244 <printf>
     e18:	01000074 	movhi	r4,1
     e1c:	213bdd04 	addi	r4,r4,-4236
     e20:	000235c0 	call	235c <puts>
              device_status.bEP2InTransfer = FALSE ;
     e24:	00800074 	movhi	r2,1
     e28:	108cad04 	addi	r2,r2,12980
     e2c:	10000215 	stw	zero,8(r2)
              ep2_isr();
     e30:	0000f7c0 	call	f7c <ep2_isr>
              usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
     e34:	01000084 	movi	r4,2
     e38:	01484004 	movi	r5,8448
     e3c:	01801004 	movi	r6,64
     e40:	00009d40 	call	9d4 <usb_enable_receive_data>
            }
              if(message & SUSB_EP3_MSG)
     e44:	e0bfff0b 	ldhu	r2,-4(fp)
     e48:	10bfffcc 	andi	r2,r2,65535
     e4c:	1080020c 	andi	r2,r2,8
     e50:	1005003a 	cmpeq	r2,r2,zero
     e54:	1000061e 	bne	r2,zero,e70 <sie2_msg_handler+0x2e8>
            {
              DEBUG_OUT("[sie2 msg]:ep3 msg\n");
     e58:	01000074 	movhi	r4,1
     e5c:	213ba204 	addi	r4,r4,-4472
     e60:	00022440 	call	2244 <printf>
     e64:	01000074 	movhi	r4,1
     e68:	213be804 	addi	r4,r4,-4192
     e6c:	000235c0 	call	235c <puts>
              // do something
            }
               if(message & SUSB_EP4_MSG)
     e70:	e0bfff0b 	ldhu	r2,-4(fp)
     e74:	10bfffcc 	andi	r2,r2,65535
     e78:	1080040c 	andi	r2,r2,16
     e7c:	1005003a 	cmpeq	r2,r2,zero
     e80:	1000061e 	bne	r2,zero,e9c <sie2_msg_handler+0x314>
            {
              DEBUG_OUT("[sie2 msg]:ep4 msg\n");
     e84:	01000074 	movhi	r4,1
     e88:	213ba204 	addi	r4,r4,-4472
     e8c:	00022440 	call	2244 <printf>
     e90:	01000074 	movhi	r4,1
     e94:	213bed04 	addi	r4,r4,-4172
     e98:	000235c0 	call	235c <puts>
              // do something
            }
           if(message & SUSB_EP5_MSG)
     e9c:	e0bfff0b 	ldhu	r2,-4(fp)
     ea0:	10bfffcc 	andi	r2,r2,65535
     ea4:	1080080c 	andi	r2,r2,32
     ea8:	1005003a 	cmpeq	r2,r2,zero
     eac:	1000061e 	bne	r2,zero,ec8 <sie2_msg_handler+0x340>
            {
              DEBUG_OUT("[sie2 msg]:ep5 msg\n");
     eb0:	01000074 	movhi	r4,1
     eb4:	213ba204 	addi	r4,r4,-4472
     eb8:	00022440 	call	2244 <printf>
     ebc:	01000074 	movhi	r4,1
     ec0:	213bf204 	addi	r4,r4,-4152
     ec4:	000235c0 	call	235c <puts>
              // do something
            }
              if(message & SUSB_EP6_MSG)
     ec8:	e0bfff0b 	ldhu	r2,-4(fp)
     ecc:	10bfffcc 	andi	r2,r2,65535
     ed0:	1080100c 	andi	r2,r2,64
     ed4:	1005003a 	cmpeq	r2,r2,zero
     ed8:	1000061e 	bne	r2,zero,ef4 <sie2_msg_handler+0x36c>
            {
              DEBUG_OUT("[sie2 msg]:ep6 msg\n");
     edc:	01000074 	movhi	r4,1
     ee0:	213ba204 	addi	r4,r4,-4472
     ee4:	00022440 	call	2244 <printf>
     ee8:	01000074 	movhi	r4,1
     eec:	213bf704 	addi	r4,r4,-4132
     ef0:	000235c0 	call	235c <puts>
              // do something
            }
            if(message & SUSB_EP7_MSG)
     ef4:	e0bfff0b 	ldhu	r2,-4(fp)
     ef8:	10bfffcc 	andi	r2,r2,65535
     efc:	1080200c 	andi	r2,r2,128
     f00:	1005003a 	cmpeq	r2,r2,zero
     f04:	1000061e 	bne	r2,zero,f20 <sie2_msg_handler+0x398>
            {
              DEBUG_OUT("[sie2 msg]:ep7 msg\n");
     f08:	01000074 	movhi	r4,1
     f0c:	213ba204 	addi	r4,r4,-4472
     f10:	00022440 	call	2244 <printf>
     f14:	01000074 	movhi	r4,1
     f18:	213bfc04 	addi	r4,r4,-4112
     f1c:	000235c0 	call	235c <puts>
              // do something
            }

              hpi_read_reg(HPI_SIE2_MSG_ADR,(alt_u16 *)&message);
     f20:	e17fff04 	addi	r5,fp,-4
     f24:	01005204 	movi	r4,328
     f28:	000159c0 	call	159c <hpi_read_reg>
              
              if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);
     f2c:	e0bfff0b 	ldhu	r2,-4(fp)
     f30:	10bfffcc 	andi	r2,r2,65535
     f34:	1005003a 	cmpeq	r2,r2,zero
     f38:	1000031e 	bne	r2,zero,f48 <sie2_msg_handler+0x3c0>
     f3c:	01005204 	movi	r4,328
     f40:	000b883a 	mov	r5,zero
     f44:	00015e00 	call	15e0 <hpi_write_reg>
              
              message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
     f48:	e0bfff0b 	ldhu	r2,-4(fp)
     f4c:	108b418c 	andi	r2,r2,11526
     f50:	e0bfff0d 	sth	r2,-4(fp)
 *  RETURNS:  void
 */
void sie2_msg_handler(unsigned short message)
{
  alt_u32 Timeout;
	  while(message) {
     f54:	e0bfff0b 	ldhu	r2,-4(fp)
     f58:	10bfffcc 	andi	r2,r2,65535
     f5c:	1004c03a 	cmpne	r2,r2,zero
     f60:	103f101e 	bne	r2,zero,ba4 <sie2_msg_handler+0x1c>
              
              if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);
              
              message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
       }
}
     f64:	e037883a 	mov	sp,fp
     f68:	dfc00217 	ldw	ra,8(sp)
     f6c:	df000117 	ldw	fp,4(sp)
     f70:	dc000017 	ldw	r16,0(sp)
     f74:	dec00304 	addi	sp,sp,12
     f78:	f800283a 	ret

00000f7c <ep2_isr>:
 *    This function  handle the endpoint 2 packet
 *
 *  RETURNS:  void
 */
 void ep2_isr(void)
 {
     f7c:	defff104 	addi	sp,sp,-60
     f80:	dfc00e15 	stw	ra,56(sp)
     f84:	df000d15 	stw	fp,52(sp)
     f88:	df000d04 	addi	fp,sp,52
     * -----------------------------------------
     *****************************************************************/

   alt_u16 Rx_type; 
   
   Rx_type = hpi_read_word(EP2_RECEIVE_BUF_ADDRESS); // read the first word, we defined as type
     f8c:	01084004 	movi	r4,8448
     f90:	00016f00 	call	16f0 <hpi_read_word>
     f94:	e0bff30d 	sth	r2,-52(fp)
   
    switch( Rx_type )    {
     f98:	e0bff30b 	ldhu	r2,-52(fp)
     f9c:	e0bfff15 	stw	r2,-4(fp)
     fa0:	e0ffff17 	ldw	r3,-4(fp)
     fa4:	188000a0 	cmpeqi	r2,r3,2
     fa8:	1000201e 	bne	r2,zero,102c <ep2_isr+0xb0>
     fac:	e0ffff17 	ldw	r3,-4(fp)
     fb0:	188000e0 	cmpeqi	r2,r3,3
     fb4:	10002f1e 	bne	r2,zero,1074 <ep2_isr+0xf8>
     fb8:	e0ffff17 	ldw	r3,-4(fp)
     fbc:	18800060 	cmpeqi	r2,r3,1
     fc0:	1000011e 	bne	r2,zero,fc8 <ep2_isr+0x4c>
     fc4:	00003b06 	br	10b4 <ep2_isr+0x138>
        
        case LED_DISPLAY:
         {     DEBUG_OUT(" Recevie led packet!\n");
     fc8:	01000074 	movhi	r4,1
     fcc:	213ba204 	addi	r4,r4,-4472
     fd0:	00022440 	call	2244 <printf>
     fd4:	01000074 	movhi	r4,1
     fd8:	213c0104 	addi	r4,r4,-4092
     fdc:	000235c0 	call	235c <puts>
             LED_PACKET led_packet;
          
          hpi_read_memory(EP2_RECEIVE_BUF_ADDRESS+2,(char *)&led_packet,sizeof(LED_PACKET));
     fe0:	e17ff404 	addi	r5,fp,-48
     fe4:	01084084 	movi	r4,8450
     fe8:	01800204 	movi	r6,8
     fec:	00012900 	call	1290 <hpi_read_memory>
          
          // change the led status
          IOWR(LED_GREEN_BASE,0,led_packet.ledg&LEDG_FLAG);
     ff0:	e0bff40b 	ldhu	r2,-48(fp)
     ff4:	10bfffcc 	andi	r2,r2,65535
     ff8:	10c07fcc 	andi	r3,r2,511
     ffc:	00820034 	movhi	r2,2048
    1000:	10801c04 	addi	r2,r2,112
    1004:	10c00035 	stwio	r3,0(r2)
          
          IOWR(LED_RED_BASE, 0 , led_packet.ledr&LEDR_FLAG);
    1008:	e0bff517 	ldw	r2,-44(fp)
    100c:	1007883a 	mov	r3,r2
    1010:	00800134 	movhi	r2,4
    1014:	10bfffc4 	addi	r2,r2,-1
    1018:	1886703a 	and	r3,r3,r2
    101c:	00820034 	movhi	r2,2048
    1020:	10802004 	addi	r2,r2,128
    1024:	10c00035 	stwio	r3,0(r2)
         
         break;}
    1028:	00002906 	br	10d0 <ep2_isr+0x154>
         
          case LCD_DISPLAY:
         { 
            DEBUG_OUT(" Recevie lcd packet!\n");
    102c:	01000074 	movhi	r4,1
    1030:	213ba204 	addi	r4,r4,-4472
    1034:	00022440 	call	2244 <printf>
    1038:	01000074 	movhi	r4,1
    103c:	213c0704 	addi	r4,r4,-4068
    1040:	000235c0 	call	235c <puts>
            LCD_PACKET lcd_packet;
          
          hpi_read_memory(EP2_RECEIVE_BUF_ADDRESS+2,(char *)&lcd_packet,sizeof(LCD_PACKET));
    1044:	e17ff704 	addi	r5,fp,-36
    1048:	01084084 	movi	r4,8450
    104c:	01800804 	movi	r6,32
    1050:	00012900 	call	1290 <hpi_read_memory>
          
          // change the lcd status
               LCD_Line1();
    1054:	00003140 	call	314 <LCD_Line1>
              //  Show Text to LCD
              LCD_Show_Text(lcd_packet.Text1);
    1058:	e13ff704 	addi	r4,fp,-36
    105c:	000028c0 	call	28c <LCD_Show_Text>
              //  Change Line2
              LCD_Line2();
    1060:	00003500 	call	350 <LCD_Line2>
              //  Show Text to LCD
              LCD_Show_Text(lcd_packet.Text2);
    1064:	e0bff704 	addi	r2,fp,-36
    1068:	11000404 	addi	r4,r2,16
    106c:	000028c0 	call	28c <LCD_Show_Text>
          break;}
    1070:	00001706 	br	10d0 <ep2_isr+0x154>
          
          case SEG7_8_DISPLAY:
              {
                 DEBUG_OUT(" Recevie seg7_8 packet!\n");
    1074:	01000074 	movhi	r4,1
    1078:	213ba204 	addi	r4,r4,-4472
    107c:	00022440 	call	2244 <printf>
    1080:	01000074 	movhi	r4,1
    1084:	213c0d04 	addi	r4,r4,-4044
    1088:	000235c0 	call	235c <puts>
                 SEG7_8_PACKET seg7_8_packet;
                 
                 hpi_read_memory(EP2_RECEIVE_BUF_ADDRESS+2,(char *)&seg7_8_packet,sizeof(SEG7_8_PACKET));
    108c:	e17ff604 	addi	r5,fp,-40
    1090:	01084084 	movi	r4,8450
    1094:	01800104 	movi	r6,4
    1098:	00012900 	call	1290 <hpi_read_memory>
                
                 // seg7_8 display
                 IOWR(SEG7_DISPLAY_BASE,0,seg7_8_packet.seg7_8_value&0xFFFFFFFF); 
    109c:	e0bff617 	ldw	r2,-40(fp)
    10a0:	1007883a 	mov	r3,r2
    10a4:	00820034 	movhi	r2,2048
    10a8:	10802804 	addi	r2,r2,160
    10ac:	10c00035 	stwio	r3,0(r2)
          
                break;
    10b0:	00000706 	br	10d0 <ep2_isr+0x154>
              }
          
         default :
         {  DEBUG_OUT("Unknow Rx transfer type[0x%02X] !\n",Rx_type);
    10b4:	01000074 	movhi	r4,1
    10b8:	213ba204 	addi	r4,r4,-4472
    10bc:	00022440 	call	2244 <printf>
    10c0:	e17ff30b 	ldhu	r5,-52(fp)
    10c4:	01000074 	movhi	r4,1
    10c8:	213c1304 	addi	r4,r4,-4020
    10cc:	00022440 	call	2244 <printf>
          break;
          }
      }
 
 }
    10d0:	e037883a 	mov	sp,fp
    10d4:	dfc00117 	ldw	ra,4(sp)
    10d8:	df000017 	ldw	fp,0(sp)
    10dc:	dec00204 	addi	sp,sp,8
    10e0:	f800283a 	ret

000010e4 <check_button_sw_status>:


 
void check_button_sw_status(void)
{
    10e4:	defffc04 	addi	sp,sp,-16
    10e8:	dfc00315 	stw	ra,12(sp)
    10ec:	df000215 	stw	fp,8(sp)
    10f0:	df000204 	addi	fp,sp,8
    OUT_PACKET button_sw_status;

   button_sw_status.button = IORD(BUTTON_PIO_BASE,0)&BUTTON_FLAG;
    10f4:	00820034 	movhi	r2,2048
    10f8:	10801804 	addi	r2,r2,96
    10fc:	10800037 	ldwio	r2,0(r2)
    1100:	108003cc 	andi	r2,r2,15
    1104:	e0bffe05 	stb	r2,-8(fp)
   button_sw_status.sw  =  IORD(SWITCH_PIO_BASE,0)&SW_FLAG;
    1108:	00820034 	movhi	r2,2048
    110c:	10801404 	addi	r2,r2,80
    1110:	10800037 	ldwio	r2,0(r2)
    1114:	1007883a 	mov	r3,r2
    1118:	00800134 	movhi	r2,4
    111c:	10bfffc4 	addi	r2,r2,-1
    1120:	1884703a 	and	r2,r3,r2
    1124:	e0bfff15 	stw	r2,-4(fp)
   
   if( (old_button_sw_status.button != button_sw_status.button)
    1128:	d0a75c03 	ldbu	r2,-25232(gp)
    112c:	e0fffe03 	ldbu	r3,-8(fp)
    1130:	11003fcc 	andi	r4,r2,255
    1134:	18803fcc 	andi	r2,r3,255
    1138:	2080051e 	bne	r4,r2,1150 <check_button_sw_status+0x6c>
    113c:	00800074 	movhi	r2,1
    1140:	108c9504 	addi	r2,r2,12884
    1144:	10c00017 	ldw	r3,0(r2)
    1148:	e0bfff17 	ldw	r2,-4(fp)
    114c:	18804326 	beq	r3,r2,125c <check_button_sw_status+0x178>
		   || (old_button_sw_status.sw != button_sw_status.sw)
		   )
   {
    if(device_status.bEP1InTransfer == FALSE  || (alt_nticks()> device_status.EP1_Transfer_Timeout)){
    1150:	00800074 	movhi	r2,1
    1154:	108cad04 	addi	r2,r2,12980
    1158:	10800117 	ldw	r2,4(r2)
    115c:	1005003a 	cmpeq	r2,r2,zero
    1160:	1000081e 	bne	r2,zero,1184 <check_button_sw_status+0xa0>
    1164:	00800074 	movhi	r2,1
    1168:	108ca104 	addi	r2,r2,12932
    116c:	10800017 	ldw	r2,0(r2)
    1170:	1007883a 	mov	r3,r2
    1174:	00800074 	movhi	r2,1
    1178:	108cad04 	addi	r2,r2,12980
    117c:	10800317 	ldw	r2,12(r2)
    1180:	10c0362e 	bgeu	r2,r3,125c <check_button_sw_status+0x178>
    1184:	00800074 	movhi	r2,1
    1188:	108ca104 	addi	r2,r2,12932
    118c:	10800017 	ldw	r2,0(r2)
    1190:	1007883a 	mov	r3,r2

    	if(alt_nticks() > device_status.EP1_Transfer_Timeout){
    1194:	00800074 	movhi	r2,1
    1198:	108cad04 	addi	r2,r2,12980
    119c:	10800317 	ldw	r2,12(r2)
    11a0:	10c0062e 	bgeu	r2,r3,11bc <check_button_sw_status+0xd8>
	        DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
    11a4:	01000074 	movhi	r4,1
    11a8:	213ba204 	addi	r4,r4,-4472
    11ac:	00022440 	call	2244 <printf>
    11b0:	01000074 	movhi	r4,1
    11b4:	213c1c04 	addi	r4,r4,-3984
    11b8:	000235c0 	call	235c <puts>
	    }

    	old_button_sw_status.button = button_sw_status.button;
    11bc:	e0bffe03 	ldbu	r2,-8(fp)
    11c0:	d0a75c05 	stb	r2,-25232(gp)
        old_button_sw_status.sw = button_sw_status.sw ;
    11c4:	e0ffff17 	ldw	r3,-4(fp)
    11c8:	00800074 	movhi	r2,1
    11cc:	108c9504 	addi	r2,r2,12884
    11d0:	10c00015 	stw	r3,0(r2)
        usb_send_data(1,EP1_SEND_BUF_ADDRESS,(char *)&button_sw_status,sizeof(OUT_PACKET)); // send switch and button status to pc
    11d4:	e1bffe04 	addi	r6,fp,-8
    11d8:	01000044 	movi	r4,1
    11dc:	01444004 	movi	r5,4352
    11e0:	01c00204 	movi	r7,8
    11e4:	00008ac0 	call	8ac <usb_send_data>
    11e8:	00800074 	movhi	r2,1
    11ec:	108ca104 	addi	r2,r2,12932
    11f0:	10800017 	ldw	r2,0(r2)
    11f4:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    11f8:	00800074 	movhi	r2,1
    11fc:	108ca004 	addi	r2,r2,12928
    1200:	10800017 	ldw	r2,0(r2)

        device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*2; // 2s TimeOut if host do not responds
    1204:	1085883a 	add	r2,r2,r2
    1208:	1887883a 	add	r3,r3,r2
    120c:	00800074 	movhi	r2,1
    1210:	108cad04 	addi	r2,r2,12980
    1214:	10c00315 	stw	r3,12(r2)

        DEBUG_OUT(" Switch or Button Status changed !!\n           [SW] 0x%05X,   [Button] 0x%02X\n",(unsigned int)(old_button_sw_status.sw&SW_FLAG),old_button_sw_status.button&BUTTON_FLAG);
    1218:	01000074 	movhi	r4,1
    121c:	213ba204 	addi	r4,r4,-4472
    1220:	00022440 	call	2244 <printf>
    1224:	00800074 	movhi	r2,1
    1228:	108c9504 	addi	r2,r2,12884
    122c:	10c00017 	ldw	r3,0(r2)
    1230:	00800134 	movhi	r2,4
    1234:	10bfffc4 	addi	r2,r2,-1
    1238:	188a703a 	and	r5,r3,r2
    123c:	d0a75c03 	ldbu	r2,-25232(gp)
    1240:	10803fcc 	andi	r2,r2,255
    1244:	118003cc 	andi	r6,r2,15
    1248:	01000074 	movhi	r4,1
    124c:	213c2404 	addi	r4,r4,-3952
    1250:	00022440 	call	2244 <printf>
        usleep(50000);
    1254:	0130d414 	movui	r4,50000
    1258:	000bc000 	call	bc00 <usleep>
    }
  
 }
                           
}
    125c:	e037883a 	mov	sp,fp
    1260:	dfc00117 	ldw	ra,4(sp)
    1264:	df000017 	ldw	fp,0(sp)
    1268:	dec00204 	addi	sp,sp,8
    126c:	f800283a 	ret

00001270 <hpi_init>:

/** public functions **/


int hpi_init(void)
{
    1270:	deffff04 	addi	sp,sp,-4
    1274:	df000015 	stw	fp,0(sp)
    1278:	d839883a 	mov	fp,sp

    return SUCCESS;
    127c:	0005883a 	mov	r2,zero
}
    1280:	e037883a 	mov	sp,fp
    1284:	df000017 	ldw	fp,0(sp)
    1288:	dec00104 	addi	sp,sp,4
    128c:	f800283a 	ret

00001290 <hpi_read_memory>:
 */
int hpi_read_memory(unsigned short chip_addr,
                    char * data,
                    int byte_length
                    )
{
    1290:	defff904 	addi	sp,sp,-28
    1294:	dfc00615 	stw	ra,24(sp)
    1298:	df000515 	stw	fp,20(sp)
    129c:	df000504 	addi	fp,sp,20
    12a0:	e17ffe15 	stw	r5,-8(fp)
    12a4:	e1bfff15 	stw	r6,-4(fp)
    12a8:	e13ffd0d 	sth	r4,-12(fp)
    int num_words = 0;
    12ac:	e03ffc15 	stw	zero,-16(fp)
    unsigned short short_int;

    /* Check for unaligned address */
    if ((chip_addr & 0x1) == 0x1) {
    12b0:	e0bffd0b 	ldhu	r2,-12(fp)
    12b4:	1080004c 	andi	r2,r2,1
    12b8:	10803fcc 	andi	r2,r2,255
    12bc:	1005003a 	cmpeq	r2,r2,zero
    12c0:	1000131e 	bne	r2,zero,1310 <hpi_read_memory+0x80>

        /* Read Word */
        short_int = hpi_read_word(chip_addr - 1);
    12c4:	e0bffd0b 	ldhu	r2,-12(fp)
    12c8:	10bfffc4 	addi	r2,r2,-1
    12cc:	113fffcc 	andi	r4,r2,65535
    12d0:	00016f00 	call	16f0 <hpi_read_word>
    12d4:	e0bffb0d 	sth	r2,-20(fp)

        /* Save upper byte */
        *data++ = (char) ((unsigned short) short_int >> 0x8);
    12d8:	e0bffb0b 	ldhu	r2,-20(fp)
    12dc:	1004d23a 	srli	r2,r2,8
    12e0:	1007883a 	mov	r3,r2
    12e4:	e0bffe17 	ldw	r2,-8(fp)
    12e8:	10c00005 	stb	r3,0(r2)
    12ec:	e0bffe17 	ldw	r2,-8(fp)
    12f0:	10800044 	addi	r2,r2,1
    12f4:	e0bffe15 	stw	r2,-8(fp)

        /* Update address */
        chip_addr = chip_addr + 1;
    12f8:	e0bffd0b 	ldhu	r2,-12(fp)
    12fc:	10800044 	addi	r2,r2,1
    1300:	e0bffd0d 	sth	r2,-12(fp)

        /* Update length */
        byte_length--;
    1304:	e0bfff17 	ldw	r2,-4(fp)
    1308:	10bfffc4 	addi	r2,r2,-1
    130c:	e0bfff15 	stw	r2,-4(fp)
    }

    /* Determine number of words to read */
    num_words = byte_length >> 1;
    1310:	e0bfff17 	ldw	r2,-4(fp)
    1314:	1005d07a 	srai	r2,r2,1
    1318:	e0bffc15 	stw	r2,-16(fp)

    /* Check for words to read */
    if (num_words > 0) {
    131c:	e0bffc17 	ldw	r2,-16(fp)
    1320:	10800050 	cmplti	r2,r2,1
    1324:	1000101e 	bne	r2,zero,1368 <hpi_read_memory+0xd8>

        hpi_read_words(chip_addr, (unsigned short *) data, num_words);
    1328:	e13ffd0b 	ldhu	r4,-12(fp)
    132c:	e17ffe17 	ldw	r5,-8(fp)
    1330:	e1bffc17 	ldw	r6,-16(fp)
    1334:	00017b00 	call	17b0 <hpi_read_words>

        byte_length -= (2 * num_words);
    1338:	e0bffc17 	ldw	r2,-16(fp)
    133c:	1085883a 	add	r2,r2,r2
    1340:	1007883a 	mov	r3,r2
    1344:	e0bfff17 	ldw	r2,-4(fp)
    1348:	10c5c83a 	sub	r2,r2,r3
    134c:	e0bfff15 	stw	r2,-4(fp)

        chip_addr += (2 * num_words);
    1350:	e0bffc17 	ldw	r2,-16(fp)
    1354:	1085883a 	add	r2,r2,r2
    1358:	1007883a 	mov	r3,r2
    135c:	e0bffd0b 	ldhu	r2,-12(fp)
    1360:	10c5883a 	add	r2,r2,r3
    1364:	e0bffd0d 	sth	r2,-12(fp)
    }

    /* Check for a remaining byte to read*/
    if (byte_length > 0) {
    1368:	e0bfff17 	ldw	r2,-4(fp)
    136c:	10800050 	cmplti	r2,r2,1
    1370:	10000d1e 	bne	r2,zero,13a8 <hpi_read_memory+0x118>

        /* Read Word */
        short_int = hpi_read_word(chip_addr);
    1374:	e13ffd0b 	ldhu	r4,-12(fp)
    1378:	00016f00 	call	16f0 <hpi_read_word>
    137c:	e0bffb0d 	sth	r2,-20(fp)

        /* Save lower byte */
        *(data + 2*num_words) = (char) ((unsigned short) short_int >> 0x0);
    1380:	e0bffc17 	ldw	r2,-16(fp)
    1384:	1085883a 	add	r2,r2,r2
    1388:	1007883a 	mov	r3,r2
    138c:	e0bffe17 	ldw	r2,-8(fp)
    1390:	1887883a 	add	r3,r3,r2
    1394:	e0bffb0b 	ldhu	r2,-20(fp)
    1398:	18800005 	stb	r2,0(r3)

        /* Update length */
        byte_length--;
    139c:	e0bfff17 	ldw	r2,-4(fp)
    13a0:	10bfffc4 	addi	r2,r2,-1
    13a4:	e0bfff15 	stw	r2,-4(fp)
    /* Consistancy check */
    if (byte_length != 0) {
        DEBUG_ERR("hpi_read_memory: Internal error\r\n");
    }

    return(SUCCESS);
    13a8:	0005883a 	mov	r2,zero
}
    13ac:	e037883a 	mov	sp,fp
    13b0:	dfc00117 	ldw	ra,4(sp)
    13b4:	df000017 	ldw	fp,0(sp)
    13b8:	dec00204 	addi	sp,sp,8
    13bc:	f800283a 	ret

000013c0 <hpi_write_memory>:
 */
int hpi_write_memory(unsigned short chip_addr, 
                     char * data,
                     int byte_length
                    )
{
    13c0:	defff804 	addi	sp,sp,-32
    13c4:	dfc00715 	stw	ra,28(sp)
    13c8:	df000615 	stw	fp,24(sp)
    13cc:	df000604 	addi	fp,sp,24
    13d0:	e17ffe15 	stw	r5,-8(fp)
    13d4:	e1bfff15 	stw	r6,-4(fp)
    13d8:	e13ffd0d 	sth	r4,-12(fp)
    int response = ERROR;
    13dc:	00bfffc4 	movi	r2,-1
    13e0:	e0bffc15 	stw	r2,-16(fp)
    int num_words = 0;
    13e4:	e03ffb15 	stw	zero,-20(fp)
      DEBUG_OUT("hpi_write_memory.- chip_addr = 0x%x, byte_length = 0x%x\r\n", chip_addr, byte_length);


    /* Check if the memory region is writable or not */

    if (writeable_region(chip_addr, byte_length) == SUCCESS) {
    13e8:	e13ffd0b 	ldhu	r4,-12(fp)
    13ec:	e17fff17 	ldw	r5,-4(fp)
    13f0:	000189c0 	call	189c <writeable_region>
    13f4:	1004c03a 	cmpne	r2,r2,zero
    13f8:	1000621e 	bne	r2,zero,1584 <hpi_write_memory+0x1c4>

        /* Check for unaligned address */
        if ((chip_addr & 0x1) == 0x1) {
    13fc:	e0bffd0b 	ldhu	r2,-12(fp)
    1400:	1080004c 	andi	r2,r2,1
    1404:	10803fcc 	andi	r2,r2,255
    1408:	1005003a 	cmpeq	r2,r2,zero
    140c:	1000211e 	bne	r2,zero,1494 <hpi_write_memory+0xd4>

            /* Read Word */
            short_int = hpi_read_word(chip_addr - 1);
    1410:	e0bffd0b 	ldhu	r2,-12(fp)
    1414:	10bfffc4 	addi	r2,r2,-1
    1418:	113fffcc 	andi	r4,r2,65535
    141c:	00016f00 	call	16f0 <hpi_read_word>
    1420:	e0bffa8d 	sth	r2,-22(fp)

            /* Modify upper byte */
            tmp_short_int = (unsigned short) (0x00FF & *data++);
    1424:	e0bffe17 	ldw	r2,-8(fp)
    1428:	10800003 	ldbu	r2,0(r2)
    142c:	10803fcc 	andi	r2,r2,255
    1430:	1080201c 	xori	r2,r2,128
    1434:	10bfe004 	addi	r2,r2,-128
    1438:	10803fcc 	andi	r2,r2,255
    143c:	e0bffa0d 	sth	r2,-24(fp)
    1440:	e0bffe17 	ldw	r2,-8(fp)
    1444:	10800044 	addi	r2,r2,1
    1448:	e0bffe15 	stw	r2,-8(fp)
            short_int = ((0x00FF & short_int) | (tmp_short_int << 8));
    144c:	e0bffa8b 	ldhu	r2,-22(fp)
    1450:	10803fcc 	andi	r2,r2,255
    1454:	1007883a 	mov	r3,r2
    1458:	e0bffa0b 	ldhu	r2,-24(fp)
    145c:	1004923a 	slli	r2,r2,8
    1460:	1884b03a 	or	r2,r3,r2
    1464:	e0bffa8d 	sth	r2,-22(fp)

            /* Write Word */
            hpi_write_word((chip_addr - 1), short_int);
    1468:	e0bffd0b 	ldhu	r2,-12(fp)
    146c:	10bfffc4 	addi	r2,r2,-1
    1470:	113fffcc 	andi	r4,r2,65535
    1474:	e17ffa8b 	ldhu	r5,-22(fp)
    1478:	00016ac0 	call	16ac <hpi_write_word>

            /* Update address */
            chip_addr = chip_addr + 1;
    147c:	e0bffd0b 	ldhu	r2,-12(fp)
    1480:	10800044 	addi	r2,r2,1
    1484:	e0bffd0d 	sth	r2,-12(fp)

            /* Update length */
            byte_length--;
    1488:	e0bfff17 	ldw	r2,-4(fp)
    148c:	10bfffc4 	addi	r2,r2,-1
    1490:	e0bfff15 	stw	r2,-4(fp)
        }

        /* Determine number of words to write */
        num_words = (int) byte_length/2;
    1494:	e0ffff17 	ldw	r3,-4(fp)
    1498:	1804d7fa 	srli	r2,r3,31
    149c:	10c5883a 	add	r2,r2,r3
    14a0:	1005d07a 	srai	r2,r2,1
    14a4:	e0bffb15 	stw	r2,-20(fp)

        /* Check for words to write */
        if (num_words > 0) {
    14a8:	e0bffb17 	ldw	r2,-20(fp)
    14ac:	10800050 	cmplti	r2,r2,1
    14b0:	1000161e 	bne	r2,zero,150c <hpi_write_memory+0x14c>
            hpi_write_words(chip_addr, (unsigned short *) data, num_words);
    14b4:	e13ffd0b 	ldhu	r4,-12(fp)
    14b8:	e17ffe17 	ldw	r5,-8(fp)
    14bc:	e1bffb17 	ldw	r6,-20(fp)
    14c0:	00017340 	call	1734 <hpi_write_words>

            byte_length -= (2 * num_words);
    14c4:	e0bffb17 	ldw	r2,-20(fp)
    14c8:	1085883a 	add	r2,r2,r2
    14cc:	1007883a 	mov	r3,r2
    14d0:	e0bfff17 	ldw	r2,-4(fp)
    14d4:	10c5c83a 	sub	r2,r2,r3
    14d8:	e0bfff15 	stw	r2,-4(fp)

            chip_addr += (2 * num_words);
    14dc:	e0bffb17 	ldw	r2,-20(fp)
    14e0:	1085883a 	add	r2,r2,r2
    14e4:	1007883a 	mov	r3,r2
    14e8:	e0bffd0b 	ldhu	r2,-12(fp)
    14ec:	10c5883a 	add	r2,r2,r3
    14f0:	e0bffd0d 	sth	r2,-12(fp)

            data += (2 * num_words);
    14f4:	e0bffb17 	ldw	r2,-20(fp)
    14f8:	1085883a 	add	r2,r2,r2
    14fc:	1007883a 	mov	r3,r2
    1500:	e0bffe17 	ldw	r2,-8(fp)
    1504:	10c5883a 	add	r2,r2,r3
    1508:	e0bffe15 	stw	r2,-8(fp)
        }

        /* Check for a remaining byte to read*/
        if (byte_length > 0) {
    150c:	e0bfff17 	ldw	r2,-4(fp)
    1510:	10800050 	cmplti	r2,r2,1
    1514:	10001a1e 	bne	r2,zero,1580 <hpi_write_memory+0x1c0>

            /* Read Word */
            short_int = hpi_read_word(chip_addr); 
    1518:	e13ffd0b 	ldhu	r4,-12(fp)
    151c:	00016f00 	call	16f0 <hpi_read_word>
    1520:	e0bffa8d 	sth	r2,-22(fp)

            /* Modify lower byte */
            tmp_short_int = (unsigned short) (0x00FF & *data++);
    1524:	e0bffe17 	ldw	r2,-8(fp)
    1528:	10800003 	ldbu	r2,0(r2)
    152c:	10803fcc 	andi	r2,r2,255
    1530:	1080201c 	xori	r2,r2,128
    1534:	10bfe004 	addi	r2,r2,-128
    1538:	10803fcc 	andi	r2,r2,255
    153c:	e0bffa0d 	sth	r2,-24(fp)
    1540:	e0bffe17 	ldw	r2,-8(fp)
    1544:	10800044 	addi	r2,r2,1
    1548:	e0bffe15 	stw	r2,-8(fp)
            short_int = ((0xFF00 & short_int) | tmp_short_int);
    154c:	e0fffa8b 	ldhu	r3,-22(fp)
    1550:	00bfc004 	movi	r2,-256
    1554:	1884703a 	and	r2,r3,r2
    1558:	1007883a 	mov	r3,r2
    155c:	e0bffa0b 	ldhu	r2,-24(fp)
    1560:	1884b03a 	or	r2,r3,r2
    1564:	e0bffa8d 	sth	r2,-22(fp)

            /* Write Word */
            hpi_write_word(chip_addr, short_int);
    1568:	e13ffd0b 	ldhu	r4,-12(fp)
    156c:	e17ffa8b 	ldhu	r5,-22(fp)
    1570:	00016ac0 	call	16ac <hpi_write_word>

            /* Update length */
            byte_length--;
    1574:	e0bfff17 	ldw	r2,-4(fp)
    1578:	10bfffc4 	addi	r2,r2,-1
    157c:	e0bfff15 	stw	r2,-4(fp)
        /* Consistancy check */
        if (byte_length != 0) {
            DEBUG_ERR("hpi_write_memory: Internal error\r\n");
        }

        response = SUCCESS;
    1580:	e03ffc15 	stw	zero,-16(fp)
    }
    else
        DEBUG_ERR("hpi_write_memory: this memory region is not writable\r\n");

    return(response);
    1584:	e0bffc17 	ldw	r2,-16(fp)
}
    1588:	e037883a 	mov	sp,fp
    158c:	dfc00117 	ldw	ra,4(sp)
    1590:	df000017 	ldw	fp,0(sp)
    1594:	dec00204 	addi	sp,sp,8
    1598:	f800283a 	ret

0000159c <hpi_read_reg>:
 *    ERROR           - Failure
 */
int hpi_read_reg(unsigned short reg_addr,
                 unsigned short *reg_value
                )
{
    159c:	defffc04 	addi	sp,sp,-16
    15a0:	dfc00315 	stw	ra,12(sp)
    15a4:	df000215 	stw	fp,8(sp)
    15a8:	df000204 	addi	fp,sp,8
    15ac:	e17fff15 	stw	r5,-4(fp)
    15b0:	e13ffe0d 	sth	r4,-8(fp)

    /* Hardware Specific Code to Write to Lyberty via HPI Port */
    *reg_value = hpi_read_word(reg_addr);
    15b4:	e13ffe0b 	ldhu	r4,-8(fp)
    15b8:	00016f00 	call	16f0 <hpi_read_word>
    15bc:	1007883a 	mov	r3,r2
    15c0:	e0bfff17 	ldw	r2,-4(fp)
    15c4:	10c0000d 	sth	r3,0(r2)

    return (SUCCESS);
    15c8:	0005883a 	mov	r2,zero
}
    15cc:	e037883a 	mov	sp,fp
    15d0:	dfc00117 	ldw	ra,4(sp)
    15d4:	df000017 	ldw	fp,0(sp)
    15d8:	dec00204 	addi	sp,sp,8
    15dc:	f800283a 	ret

000015e0 <hpi_write_reg>:
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int hpi_write_reg(unsigned short reg_addr,
                  unsigned short reg_value)
{
    15e0:	defffc04 	addi	sp,sp,-16
    15e4:	dfc00315 	stw	ra,12(sp)
    15e8:	df000215 	stw	fp,8(sp)
    15ec:	df000204 	addi	fp,sp,8
    15f0:	e13ffe0d 	sth	r4,-8(fp)
    15f4:	e17fff0d 	sth	r5,-4(fp)

    hpi_write_word(reg_addr, reg_value);
    15f8:	e13ffe0b 	ldhu	r4,-8(fp)
    15fc:	e17fff0b 	ldhu	r5,-4(fp)
    1600:	00016ac0 	call	16ac <hpi_write_word>

    return (SUCCESS);
    1604:	0005883a 	mov	r2,zero
}
    1608:	e037883a 	mov	sp,fp
    160c:	dfc00117 	ldw	ra,4(sp)
    1610:	df000017 	ldw	fp,0(sp)
    1614:	dec00204 	addi	sp,sp,8
    1618:	f800283a 	ret

0000161c <hpi_read_status>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
unsigned short hpi_read_status(void)
{
    161c:	defffe04 	addi	sp,sp,-8
    1620:	df000115 	stw	fp,4(sp)
    1624:	df000104 	addi	fp,sp,4
    unsigned short value;
    
    value = IORD(HPI_NIOSII_BASE_ADDR,HPI_STATUS);
    1628:	00820034 	movhi	r2,2048
    162c:	10801304 	addi	r2,r2,76
    1630:	10800037 	ldwio	r2,0(r2)
    1634:	e0bfff0d 	sth	r2,-4(fp)

    DEBUG_OUT("read_status: value = 0x%04x\r\n", value);

    return value;
    1638:	e0bfff0b 	ldhu	r2,-4(fp)
}
    163c:	e037883a 	mov	sp,fp
    1640:	df000017 	ldw	fp,0(sp)
    1644:	dec00104 	addi	sp,sp,4
    1648:	f800283a 	ret

0000164c <hpi_write_mbx>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
void hpi_write_mbx(unsigned short value)
{
    164c:	defffe04 	addi	sp,sp,-8
    1650:	df000115 	stw	fp,4(sp)
    1654:	df000104 	addi	fp,sp,4
    1658:	e13fff0d 	sth	r4,-4(fp)
    DEBUG_OUT("write_mbx: 0x%04x\r\n", value);

    IOWR(HPI_NIOSII_BASE_ADDR,HPI_MAILBOX,value);
    165c:	e0ffff0b 	ldhu	r3,-4(fp)
    1660:	00820034 	movhi	r2,2048
    1664:	10801104 	addi	r2,r2,68
    1668:	10c00035 	stwio	r3,0(r2)
}
    166c:	e037883a 	mov	sp,fp
    1670:	df000017 	ldw	fp,0(sp)
    1674:	dec00104 	addi	sp,sp,4
    1678:	f800283a 	ret

0000167c <hpi_read_mbx>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
unsigned short hpi_read_mbx(void)
{
    167c:	defffe04 	addi	sp,sp,-8
    1680:	df000115 	stw	fp,4(sp)
    1684:	df000104 	addi	fp,sp,4
    unsigned short value;
 
    value =  IORD(HPI_NIOSII_BASE_ADDR,HPI_MAILBOX);
    1688:	00820034 	movhi	r2,2048
    168c:	10801104 	addi	r2,r2,68
    1690:	10800037 	ldwio	r2,0(r2)
    1694:	e0bfff0d 	sth	r2,-4(fp)

    DEBUG_OUT("read_mbx: 0x%04x\r\n", value);

    return value;
    1698:	e0bfff0b 	ldhu	r2,-4(fp)
}
    169c:	e037883a 	mov	sp,fp
    16a0:	df000017 	ldw	fp,0(sp)
    16a4:	dec00104 	addi	sp,sp,4
    16a8:	f800283a 	ret

000016ac <hpi_write_word>:
 *    ERROR           - Failure
 */
void hpi_write_word(unsigned short chip_addr,
                        unsigned short value
                        )
{
    16ac:	defffd04 	addi	sp,sp,-12
    16b0:	df000215 	stw	fp,8(sp)
    16b4:	df000204 	addi	fp,sp,8
    16b8:	e13ffe0d 	sth	r4,-8(fp)
    16bc:	e17fff0d 	sth	r5,-4(fp)
    DEBUG_OUT("write_word: addr=0x%04x, value=0x%04x\r\n", chip_addr, value);
    IOWR(HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);
    16c0:	e0fffe0b 	ldhu	r3,-8(fp)
    16c4:	00820034 	movhi	r2,2048
    16c8:	10801204 	addi	r2,r2,72
    16cc:	10c00035 	stwio	r3,0(r2)
    IOWR(HPI_NIOSII_BASE_ADDR, HPI_DATA, value);
    16d0:	e0ffff0b 	ldhu	r3,-4(fp)
    16d4:	00820034 	movhi	r2,2048
    16d8:	10801004 	addi	r2,r2,64
    16dc:	10c00035 	stwio	r3,0(r2)
}
    16e0:	e037883a 	mov	sp,fp
    16e4:	df000017 	ldw	fp,0(sp)
    16e8:	dec00104 	addi	sp,sp,4
    16ec:	f800283a 	ret

000016f0 <hpi_read_word>:
 *
 *  RETURNS: 
 *    Value of the chip_addr
 */
unsigned short hpi_read_word(unsigned short chip_addr)
{
    16f0:	defffd04 	addi	sp,sp,-12
    16f4:	df000215 	stw	fp,8(sp)
    16f8:	df000204 	addi	fp,sp,8
    16fc:	e13fff0d 	sth	r4,-4(fp)
    unsigned short value;
    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);
    1700:	e0ffff0b 	ldhu	r3,-4(fp)
    1704:	00820034 	movhi	r2,2048
    1708:	10801204 	addi	r2,r2,72
    170c:	10c00035 	stwio	r3,0(r2)
    value = IORD( HPI_NIOSII_BASE_ADDR,HPI_DATA) ;
    1710:	00820034 	movhi	r2,2048
    1714:	10801004 	addi	r2,r2,64
    1718:	10800037 	ldwio	r2,0(r2)
    171c:	e0bffe0d 	sth	r2,-8(fp)
    DEBUG_OUT("read_word: addr=0x%04x, value=0x%04x\r\n", chip_addr, value);
    return value;
    1720:	e0bffe0b 	ldhu	r2,-8(fp)
}
    1724:	e037883a 	mov	sp,fp
    1728:	df000017 	ldw	fp,0(sp)
    172c:	dec00104 	addi	sp,sp,4
    1730:	f800283a 	ret

00001734 <hpi_write_words>:
 */
void hpi_write_words(unsigned short chip_addr,
                         unsigned short *data,
                         int num_words
                        )
{
    1734:	defffb04 	addi	sp,sp,-20
    1738:	df000415 	stw	fp,16(sp)
    173c:	df000404 	addi	fp,sp,16
    1740:	e17ffe15 	stw	r5,-8(fp)
    1744:	e1bfff15 	stw	r6,-4(fp)
    1748:	e13ffd0d 	sth	r4,-12(fp)
    int i;

    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);
    174c:	e0fffd0b 	ldhu	r3,-12(fp)
    1750:	00820034 	movhi	r2,2048
    1754:	10801204 	addi	r2,r2,72
    1758:	10c00035 	stwio	r3,0(r2)

    DEBUG_OUT("write_words addr:0x%04x, num_words:%d", chip_addr, num_words);

    for (i=0; i<num_words; i++) 
    175c:	e03ffc15 	stw	zero,-16(fp)
    1760:	00000c06 	br	1794 <hpi_write_words+0x60>
    {
        DEBUG_OUT(" 0x%04x", *data);
        IOWR (HPI_NIOSII_BASE_ADDR, HPI_DATA    ,*data++);
    1764:	e0bffe17 	ldw	r2,-8(fp)
    1768:	1080000b 	ldhu	r2,0(r2)
    176c:	10ffffcc 	andi	r3,r2,65535
    1770:	e0bffe17 	ldw	r2,-8(fp)
    1774:	10800084 	addi	r2,r2,2
    1778:	e0bffe15 	stw	r2,-8(fp)
    177c:	00820034 	movhi	r2,2048
    1780:	10801004 	addi	r2,r2,64
    1784:	10c00035 	stwio	r3,0(r2)

    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);

    DEBUG_OUT("write_words addr:0x%04x, num_words:%d", chip_addr, num_words);

    for (i=0; i<num_words; i++) 
    1788:	e0bffc17 	ldw	r2,-16(fp)
    178c:	10800044 	addi	r2,r2,1
    1790:	e0bffc15 	stw	r2,-16(fp)
    1794:	e0fffc17 	ldw	r3,-16(fp)
    1798:	e0bfff17 	ldw	r2,-4(fp)
    179c:	18bff116 	blt	r3,r2,1764 <hpi_write_words+0x30>
    {
        DEBUG_OUT(" 0x%04x", *data);
        IOWR (HPI_NIOSII_BASE_ADDR, HPI_DATA    ,*data++);
    }
}
    17a0:	e037883a 	mov	sp,fp
    17a4:	df000017 	ldw	fp,0(sp)
    17a8:	dec00104 	addi	sp,sp,4
    17ac:	f800283a 	ret

000017b0 <hpi_read_words>:
 */
void hpi_read_words(unsigned short chip_addr,
                        unsigned short *data,
                        int num_words
                        )
{
    17b0:	defffb04 	addi	sp,sp,-20
    17b4:	df000415 	stw	fp,16(sp)
    17b8:	df000404 	addi	fp,sp,16
    17bc:	e17ffe15 	stw	r5,-8(fp)
    17c0:	e1bfff15 	stw	r6,-4(fp)
    17c4:	e13ffd0d 	sth	r4,-12(fp)
    int i;

    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);
    17c8:	e0fffd0b 	ldhu	r3,-12(fp)
    17cc:	00820034 	movhi	r2,2048
    17d0:	10801204 	addi	r2,r2,72
    17d4:	10c00035 	stwio	r3,0(r2)

    DEBUG_OUT("read_words addr:0x%04x, num_words:%d", chip_addr, num_words);

    for (i=0; i<num_words; i++) 
    17d8:	e03ffc15 	stw	zero,-16(fp)
    17dc:	00000c06 	br	1810 <hpi_read_words+0x60>
    {
        *data++ = IORD (HPI_NIOSII_BASE_ADDR,HPI_DATA  );
    17e0:	00820034 	movhi	r2,2048
    17e4:	10801004 	addi	r2,r2,64
    17e8:	10800037 	ldwio	r2,0(r2)
    17ec:	1007883a 	mov	r3,r2
    17f0:	e0bffe17 	ldw	r2,-8(fp)
    17f4:	10c0000d 	sth	r3,0(r2)
    17f8:	e0bffe17 	ldw	r2,-8(fp)
    17fc:	10800084 	addi	r2,r2,2
    1800:	e0bffe15 	stw	r2,-8(fp)

    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);

    DEBUG_OUT("read_words addr:0x%04x, num_words:%d", chip_addr, num_words);

    for (i=0; i<num_words; i++) 
    1804:	e0bffc17 	ldw	r2,-16(fp)
    1808:	10800044 	addi	r2,r2,1
    180c:	e0bffc15 	stw	r2,-16(fp)
    1810:	e0fffc17 	ldw	r3,-16(fp)
    1814:	e0bfff17 	ldw	r2,-4(fp)
    1818:	18bff116 	blt	r3,r2,17e0 <hpi_read_words+0x30>
    {
        *data++ = IORD (HPI_NIOSII_BASE_ADDR,HPI_DATA  );
        DEBUG_OUT("    0x%04x", *(data-1));
    }
}
    181c:	e037883a 	mov	sp,fp
    1820:	df000017 	ldw	fp,0(sp)
    1824:	dec00104 	addi	sp,sp,4
    1828:	f800283a 	ret

0000182c <get_ushort>:
 *  RETURNS: 
 *    An unsigned short.
 */

unsigned short get_ushort(char * data, int start_address)
{
    182c:	defffc04 	addi	sp,sp,-16
    1830:	df000315 	stw	fp,12(sp)
    1834:	df000304 	addi	fp,sp,12
    1838:	e13ffe15 	stw	r4,-8(fp)
    183c:	e17fff15 	stw	r5,-4(fp)
    unsigned short value = 0;
    1840:	e03ffd0d 	sth	zero,-12(fp)

    value = (((unsigned short)(*(unsigned char*)(data + start_address + 1)) << 8) |
    1844:	e0bfff17 	ldw	r2,-4(fp)
    1848:	1007883a 	mov	r3,r2
    184c:	e0bffe17 	ldw	r2,-8(fp)
    1850:	1885883a 	add	r2,r3,r2
    1854:	10800044 	addi	r2,r2,1
    1858:	10800003 	ldbu	r2,0(r2)
    185c:	10803fcc 	andi	r2,r2,255
    1860:	1004923a 	slli	r2,r2,8
    1864:	1009883a 	mov	r4,r2
    1868:	e0bfff17 	ldw	r2,-4(fp)
    186c:	1007883a 	mov	r3,r2
    1870:	e0bffe17 	ldw	r2,-8(fp)
    1874:	1885883a 	add	r2,r3,r2
    1878:	10800003 	ldbu	r2,0(r2)
    187c:	10803fcc 	andi	r2,r2,255
    1880:	2084b03a 	or	r2,r4,r2
    1884:	e0bffd0d 	sth	r2,-12(fp)
              (unsigned short)(*(unsigned char*)(data + start_address)));

    return value;
    1888:	e0bffd0b 	ldhu	r2,-12(fp)
}
    188c:	e037883a 	mov	sp,fp
    1890:	df000017 	ldw	fp,0(sp)
    1894:	dec00104 	addi	sp,sp,4
    1898:	f800283a 	ret

0000189c <writeable_region>:
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int writeable_region(unsigned short chip_addr,
                         int byte_length)
{
    189c:	defffc04 	addi	sp,sp,-16
    18a0:	df000315 	stw	fp,12(sp)
    18a4:	df000304 	addi	fp,sp,12
    18a8:	e17fff15 	stw	r5,-4(fp)
    18ac:	e13ffe0d 	sth	r4,-8(fp)
    int response = ERROR;
    18b0:	00bfffc4 	movi	r2,-1
    18b4:	e0bffd15 	stw	r2,-12(fp)

    /* Check that address is in a valid writable range */
    if (((int)chip_addr + byte_length) <= 0xFFFF)
    18b8:	e0fffe0b 	ldhu	r3,-8(fp)
    18bc:	e0bfff17 	ldw	r2,-4(fp)
    18c0:	1887883a 	add	r3,r3,r2
    18c4:	00bfffd4 	movui	r2,65535
    18c8:	10c00116 	blt	r2,r3,18d0 <writeable_region+0x34>
        response = SUCCESS;
    18cc:	e03ffd15 	stw	zero,-12(fp)

    return response;
    18d0:	e0bffd17 	ldw	r2,-12(fp)
}
    18d4:	e037883a 	mov	sp,fp
    18d8:	df000017 	ldw	fp,0(sp)
    18dc:	dec00104 	addi	sp,sp,4
    18e0:	f800283a 	ret

000018e4 <main>:
#endif   
   
extern DEVICE_STATUS device_status;

int main(void)
{ 
    18e4:	defffd04 	addi	sp,sp,-12
    18e8:	dfc00215 	stw	ra,8(sp)
    18ec:	df000115 	stw	fp,4(sp)
    18f0:	df000104 	addi	fp,sp,4
    DEBUG_OUT("========= DE2-115 CY7C67200 USB Device Demo [2011/07/05]=========\n");
    18f4:	01000074 	movhi	r4,1
    18f8:	213c3804 	addi	r4,r4,-3872
    18fc:	000235c0 	call	235c <puts>
    DEBUG_OUT("=                                                               =\n");
    1900:	01000074 	movhi	r4,1
    1904:	213c4904 	addi	r4,r4,-3804
    1908:	000235c0 	call	235c <puts>
    DEBUG_OUT("=  This program demo a simply transfer between PC and DE2-115.  =\n");
    190c:	01000074 	movhi	r4,1
    1910:	213c5a04 	addi	r4,r4,-3736
    1914:	000235c0 	call	235c <puts>
    DEBUG_OUT("=                                                               =\n");
    1918:	01000074 	movhi	r4,1
    191c:	213c4904 	addi	r4,r4,-3804
    1920:	000235c0 	call	235c <puts>
    DEBUG_OUT("=================================================================\n");
    1924:	01000074 	movhi	r4,1
    1928:	213c6b04 	addi	r4,r4,-3668
    192c:	000235c0 	call	235c <puts>
      * // please move the folder to a new location if you want to generate your code 
      * // otherwise there will be some error or bug when you use makep.bat 
      * 
      * you can see pcd_asm.asm to know the detail process 
      */ 
      if(dc_download((char*)pcd_asm,/*max_try*/10)==ERROR){ //fail to init
    1930:	01000074 	movhi	r4,1
    1934:	213e0004 	addi	r4,r4,-2048
    1938:	01400284 	movi	r5,10
    193c:	00004f00 	call	4f0 <dc_download>
    1940:	10bfffd8 	cmpnei	r2,r2,-1
    1944:	1000061e 	bne	r2,zero,1960 <main+0x7c>
        DEBUG_OUT("-DEVICE Init - Failed to download into 67200 Chip.\n") ;
    1948:	01000074 	movhi	r4,1
    194c:	213c7c04 	addi	r4,r4,-3600
    1950:	000235c0 	call	235c <puts>
        return FALSE;
    1954:	0005883a 	mov	r2,zero
    1958:	e0bfff15 	stw	r2,-4(fp)
    195c:	00000606 	br	1978 <main+0x94>
       }
      usleep(100000);
    1960:	010000b4 	movhi	r4,2
    1964:	2121a804 	addi	r4,r4,-31072
    1968:	000bc000 	call	bc00 <usleep>
        {
             /****************************************
              *  mainly check the SIE2 message
              *  and then process it according to the message
              *************************************/
              dcProcessEvent();
    196c:	0000b140 	call	b14 <dcProcessEvent>
            
             /****************************************
              *  when the status of switch or button have changed
              *  send a packet to pc to indicate the change
              *************************************/
             check_button_sw_status();
    1970:	00010e40 	call	10e4 <check_button_sw_status>
        }
    1974:	003ffd06 	br	196c <main+0x88>
          
 
   return 0;
}
    1978:	e0bfff17 	ldw	r2,-4(fp)
    197c:	e037883a 	mov	sp,fp
    1980:	dfc00117 	ldw	ra,4(sp)
    1984:	df000017 	ldw	fp,0(sp)
    1988:	dec00204 	addi	sp,sp,8
    198c:	f800283a 	ret

00001990 <udivmodsi4>:
    1990:	29001b2e 	bgeu	r5,r4,1a00 <udivmodsi4+0x70>
    1994:	28001a16 	blt	r5,zero,1a00 <udivmodsi4+0x70>
    1998:	00800044 	movi	r2,1
    199c:	0007883a 	mov	r3,zero
    19a0:	01c007c4 	movi	r7,31
    19a4:	00000306 	br	19b4 <udivmodsi4+0x24>
    19a8:	19c01326 	beq	r3,r7,19f8 <udivmodsi4+0x68>
    19ac:	18c00044 	addi	r3,r3,1
    19b0:	28000416 	blt	r5,zero,19c4 <udivmodsi4+0x34>
    19b4:	294b883a 	add	r5,r5,r5
    19b8:	1085883a 	add	r2,r2,r2
    19bc:	293ffa36 	bltu	r5,r4,19a8 <udivmodsi4+0x18>
    19c0:	10000d26 	beq	r2,zero,19f8 <udivmodsi4+0x68>
    19c4:	0007883a 	mov	r3,zero
    19c8:	21400236 	bltu	r4,r5,19d4 <udivmodsi4+0x44>
    19cc:	2149c83a 	sub	r4,r4,r5
    19d0:	1886b03a 	or	r3,r3,r2
    19d4:	1004d07a 	srli	r2,r2,1
    19d8:	280ad07a 	srli	r5,r5,1
    19dc:	103ffa1e 	bne	r2,zero,19c8 <udivmodsi4+0x38>
    19e0:	30000226 	beq	r6,zero,19ec <udivmodsi4+0x5c>
    19e4:	2005883a 	mov	r2,r4
    19e8:	f800283a 	ret
    19ec:	1809883a 	mov	r4,r3
    19f0:	2005883a 	mov	r2,r4
    19f4:	f800283a 	ret
    19f8:	0007883a 	mov	r3,zero
    19fc:	003ff806 	br	19e0 <udivmodsi4+0x50>
    1a00:	00800044 	movi	r2,1
    1a04:	0007883a 	mov	r3,zero
    1a08:	003fef06 	br	19c8 <udivmodsi4+0x38>

00001a0c <__divsi3>:
    1a0c:	defffe04 	addi	sp,sp,-8
    1a10:	dc000015 	stw	r16,0(sp)
    1a14:	dfc00115 	stw	ra,4(sp)
    1a18:	0021883a 	mov	r16,zero
    1a1c:	20000c16 	blt	r4,zero,1a50 <__divsi3+0x44>
    1a20:	000d883a 	mov	r6,zero
    1a24:	28000e16 	blt	r5,zero,1a60 <__divsi3+0x54>
    1a28:	00019900 	call	1990 <udivmodsi4>
    1a2c:	1007883a 	mov	r3,r2
    1a30:	8005003a 	cmpeq	r2,r16,zero
    1a34:	1000011e 	bne	r2,zero,1a3c <__divsi3+0x30>
    1a38:	00c7c83a 	sub	r3,zero,r3
    1a3c:	1805883a 	mov	r2,r3
    1a40:	dfc00117 	ldw	ra,4(sp)
    1a44:	dc000017 	ldw	r16,0(sp)
    1a48:	dec00204 	addi	sp,sp,8
    1a4c:	f800283a 	ret
    1a50:	0109c83a 	sub	r4,zero,r4
    1a54:	04000044 	movi	r16,1
    1a58:	000d883a 	mov	r6,zero
    1a5c:	283ff20e 	bge	r5,zero,1a28 <__divsi3+0x1c>
    1a60:	014bc83a 	sub	r5,zero,r5
    1a64:	8021003a 	cmpeq	r16,r16,zero
    1a68:	003fef06 	br	1a28 <__divsi3+0x1c>

00001a6c <__modsi3>:
    1a6c:	deffff04 	addi	sp,sp,-4
    1a70:	dfc00015 	stw	ra,0(sp)
    1a74:	01800044 	movi	r6,1
    1a78:	2807883a 	mov	r3,r5
    1a7c:	20000416 	blt	r4,zero,1a90 <__modsi3+0x24>
    1a80:	28000c16 	blt	r5,zero,1ab4 <__modsi3+0x48>
    1a84:	dfc00017 	ldw	ra,0(sp)
    1a88:	dec00104 	addi	sp,sp,4
    1a8c:	00019901 	jmpi	1990 <udivmodsi4>
    1a90:	0109c83a 	sub	r4,zero,r4
    1a94:	28000b16 	blt	r5,zero,1ac4 <__modsi3+0x58>
    1a98:	180b883a 	mov	r5,r3
    1a9c:	01800044 	movi	r6,1
    1aa0:	00019900 	call	1990 <udivmodsi4>
    1aa4:	0085c83a 	sub	r2,zero,r2
    1aa8:	dfc00017 	ldw	ra,0(sp)
    1aac:	dec00104 	addi	sp,sp,4
    1ab0:	f800283a 	ret
    1ab4:	014bc83a 	sub	r5,zero,r5
    1ab8:	dfc00017 	ldw	ra,0(sp)
    1abc:	dec00104 	addi	sp,sp,4
    1ac0:	00019901 	jmpi	1990 <udivmodsi4>
    1ac4:	0147c83a 	sub	r3,zero,r5
    1ac8:	003ff306 	br	1a98 <__modsi3+0x2c>

00001acc <__udivsi3>:
    1acc:	000d883a 	mov	r6,zero
    1ad0:	00019901 	jmpi	1990 <udivmodsi4>

00001ad4 <__umodsi3>:
    1ad4:	01800044 	movi	r6,1
    1ad8:	00019901 	jmpi	1990 <udivmodsi4>

00001adc <free>:
    1adc:	00800074 	movhi	r2,1
    1ae0:	10853a04 	addi	r2,r2,5352
    1ae4:	200b883a 	mov	r5,r4
    1ae8:	11000017 	ldw	r4,0(r2)
    1aec:	00062a01 	jmpi	62a0 <_free_r>

00001af0 <malloc>:
    1af0:	00800074 	movhi	r2,1
    1af4:	10853a04 	addi	r2,r2,5352
    1af8:	200b883a 	mov	r5,r4
    1afc:	11000017 	ldw	r4,0(r2)
    1b00:	0001b041 	jmpi	1b04 <_malloc_r>

00001b04 <_malloc_r>:
    1b04:	defff604 	addi	sp,sp,-40
    1b08:	28c002c4 	addi	r3,r5,11
    1b0c:	00800584 	movi	r2,22
    1b10:	dc800215 	stw	r18,8(sp)
    1b14:	dfc00915 	stw	ra,36(sp)
    1b18:	df000815 	stw	fp,32(sp)
    1b1c:	ddc00715 	stw	r23,28(sp)
    1b20:	dd800615 	stw	r22,24(sp)
    1b24:	dd400515 	stw	r21,20(sp)
    1b28:	dd000415 	stw	r20,16(sp)
    1b2c:	dcc00315 	stw	r19,12(sp)
    1b30:	dc400115 	stw	r17,4(sp)
    1b34:	dc000015 	stw	r16,0(sp)
    1b38:	2025883a 	mov	r18,r4
    1b3c:	10c01236 	bltu	r2,r3,1b88 <_malloc_r+0x84>
    1b40:	04400404 	movi	r17,16
    1b44:	8940142e 	bgeu	r17,r5,1b98 <_malloc_r+0x94>
    1b48:	00800304 	movi	r2,12
    1b4c:	0007883a 	mov	r3,zero
    1b50:	90800015 	stw	r2,0(r18)
    1b54:	1805883a 	mov	r2,r3
    1b58:	dfc00917 	ldw	ra,36(sp)
    1b5c:	df000817 	ldw	fp,32(sp)
    1b60:	ddc00717 	ldw	r23,28(sp)
    1b64:	dd800617 	ldw	r22,24(sp)
    1b68:	dd400517 	ldw	r21,20(sp)
    1b6c:	dd000417 	ldw	r20,16(sp)
    1b70:	dcc00317 	ldw	r19,12(sp)
    1b74:	dc800217 	ldw	r18,8(sp)
    1b78:	dc400117 	ldw	r17,4(sp)
    1b7c:	dc000017 	ldw	r16,0(sp)
    1b80:	dec00a04 	addi	sp,sp,40
    1b84:	f800283a 	ret
    1b88:	00bffe04 	movi	r2,-8
    1b8c:	18a2703a 	and	r17,r3,r2
    1b90:	883fed16 	blt	r17,zero,1b48 <_malloc_r+0x44>
    1b94:	897fec36 	bltu	r17,r5,1b48 <_malloc_r+0x44>
    1b98:	9009883a 	mov	r4,r18
    1b9c:	000b7800 	call	b780 <__malloc_lock>
    1ba0:	00807dc4 	movi	r2,503
    1ba4:	14402b2e 	bgeu	r2,r17,1c54 <_malloc_r+0x150>
    1ba8:	8806d27a 	srli	r3,r17,9
    1bac:	18003f1e 	bne	r3,zero,1cac <_malloc_r+0x1a8>
    1bb0:	880cd0fa 	srli	r6,r17,3
    1bb4:	300490fa 	slli	r2,r6,3
    1bb8:	02c00074 	movhi	r11,1
    1bbc:	5afe6904 	addi	r11,r11,-1628
    1bc0:	12cb883a 	add	r5,r2,r11
    1bc4:	2c000317 	ldw	r16,12(r5)
    1bc8:	580f883a 	mov	r7,r11
    1bcc:	2c00041e 	bne	r5,r16,1be0 <_malloc_r+0xdc>
    1bd0:	00000a06 	br	1bfc <_malloc_r+0xf8>
    1bd4:	1800860e 	bge	r3,zero,1df0 <_malloc_r+0x2ec>
    1bd8:	84000317 	ldw	r16,12(r16)
    1bdc:	2c000726 	beq	r5,r16,1bfc <_malloc_r+0xf8>
    1be0:	80800117 	ldw	r2,4(r16)
    1be4:	00ffff04 	movi	r3,-4
    1be8:	10c8703a 	and	r4,r2,r3
    1bec:	2447c83a 	sub	r3,r4,r17
    1bf0:	008003c4 	movi	r2,15
    1bf4:	10fff70e 	bge	r2,r3,1bd4 <_malloc_r+0xd0>
    1bf8:	31bfffc4 	addi	r6,r6,-1
    1bfc:	32400044 	addi	r9,r6,1
    1c00:	02800074 	movhi	r10,1
    1c04:	52be6b04 	addi	r10,r10,-1620
    1c08:	54000217 	ldw	r16,8(r10)
    1c0c:	8280a026 	beq	r16,r10,1e90 <_malloc_r+0x38c>
    1c10:	80800117 	ldw	r2,4(r16)
    1c14:	00ffff04 	movi	r3,-4
    1c18:	10ca703a 	and	r5,r2,r3
    1c1c:	2c4dc83a 	sub	r6,r5,r17
    1c20:	008003c4 	movi	r2,15
    1c24:	11808316 	blt	r2,r6,1e34 <_malloc_r+0x330>
    1c28:	52800315 	stw	r10,12(r10)
    1c2c:	52800215 	stw	r10,8(r10)
    1c30:	30002916 	blt	r6,zero,1cd8 <_malloc_r+0x1d4>
    1c34:	8147883a 	add	r3,r16,r5
    1c38:	18800117 	ldw	r2,4(r3)
    1c3c:	9009883a 	mov	r4,r18
    1c40:	10800054 	ori	r2,r2,1
    1c44:	18800115 	stw	r2,4(r3)
    1c48:	000b7a00 	call	b7a0 <__malloc_unlock>
    1c4c:	80c00204 	addi	r3,r16,8
    1c50:	003fc006 	br	1b54 <_malloc_r+0x50>
    1c54:	02c00074 	movhi	r11,1
    1c58:	5afe6904 	addi	r11,r11,-1628
    1c5c:	8ac5883a 	add	r2,r17,r11
    1c60:	14000317 	ldw	r16,12(r2)
    1c64:	580f883a 	mov	r7,r11
    1c68:	8806d0fa 	srli	r3,r17,3
    1c6c:	14006c26 	beq	r2,r16,1e20 <_malloc_r+0x31c>
    1c70:	80c00117 	ldw	r3,4(r16)
    1c74:	00bfff04 	movi	r2,-4
    1c78:	81800317 	ldw	r6,12(r16)
    1c7c:	1886703a 	and	r3,r3,r2
    1c80:	80c7883a 	add	r3,r16,r3
    1c84:	18800117 	ldw	r2,4(r3)
    1c88:	81400217 	ldw	r5,8(r16)
    1c8c:	9009883a 	mov	r4,r18
    1c90:	10800054 	ori	r2,r2,1
    1c94:	18800115 	stw	r2,4(r3)
    1c98:	31400215 	stw	r5,8(r6)
    1c9c:	29800315 	stw	r6,12(r5)
    1ca0:	000b7a00 	call	b7a0 <__malloc_unlock>
    1ca4:	80c00204 	addi	r3,r16,8
    1ca8:	003faa06 	br	1b54 <_malloc_r+0x50>
    1cac:	00800104 	movi	r2,4
    1cb0:	10c0052e 	bgeu	r2,r3,1cc8 <_malloc_r+0x1c4>
    1cb4:	00800504 	movi	r2,20
    1cb8:	10c07836 	bltu	r2,r3,1e9c <_malloc_r+0x398>
    1cbc:	198016c4 	addi	r6,r3,91
    1cc0:	300490fa 	slli	r2,r6,3
    1cc4:	003fbc06 	br	1bb8 <_malloc_r+0xb4>
    1cc8:	8804d1ba 	srli	r2,r17,6
    1ccc:	11800e04 	addi	r6,r2,56
    1cd0:	300490fa 	slli	r2,r6,3
    1cd4:	003fb806 	br	1bb8 <_malloc_r+0xb4>
    1cd8:	00807fc4 	movi	r2,511
    1cdc:	1140bb36 	bltu	r2,r5,1fcc <_malloc_r+0x4c8>
    1ce0:	2806d0fa 	srli	r3,r5,3
    1ce4:	573ffe04 	addi	fp,r10,-8
    1ce8:	00800044 	movi	r2,1
    1cec:	180890fa 	slli	r4,r3,3
    1cf0:	1807d0ba 	srai	r3,r3,2
    1cf4:	e1c00117 	ldw	r7,4(fp)
    1cf8:	5909883a 	add	r4,r11,r4
    1cfc:	21400217 	ldw	r5,8(r4)
    1d00:	10c4983a 	sll	r2,r2,r3
    1d04:	81000315 	stw	r4,12(r16)
    1d08:	81400215 	stw	r5,8(r16)
    1d0c:	388eb03a 	or	r7,r7,r2
    1d10:	2c000315 	stw	r16,12(r5)
    1d14:	24000215 	stw	r16,8(r4)
    1d18:	e1c00115 	stw	r7,4(fp)
    1d1c:	4807883a 	mov	r3,r9
    1d20:	4800cd16 	blt	r9,zero,2058 <_malloc_r+0x554>
    1d24:	1807d0ba 	srai	r3,r3,2
    1d28:	00800044 	movi	r2,1
    1d2c:	10c8983a 	sll	r4,r2,r3
    1d30:	39004436 	bltu	r7,r4,1e44 <_malloc_r+0x340>
    1d34:	21c4703a 	and	r2,r4,r7
    1d38:	10000a1e 	bne	r2,zero,1d64 <_malloc_r+0x260>
    1d3c:	2109883a 	add	r4,r4,r4
    1d40:	00bfff04 	movi	r2,-4
    1d44:	4884703a 	and	r2,r9,r2
    1d48:	3906703a 	and	r3,r7,r4
    1d4c:	12400104 	addi	r9,r2,4
    1d50:	1800041e 	bne	r3,zero,1d64 <_malloc_r+0x260>
    1d54:	2109883a 	add	r4,r4,r4
    1d58:	3904703a 	and	r2,r7,r4
    1d5c:	4a400104 	addi	r9,r9,4
    1d60:	103ffc26 	beq	r2,zero,1d54 <_malloc_r+0x250>
    1d64:	480490fa 	slli	r2,r9,3
    1d68:	4819883a 	mov	r12,r9
    1d6c:	023fff04 	movi	r8,-4
    1d70:	589b883a 	add	r13,r11,r2
    1d74:	6807883a 	mov	r3,r13
    1d78:	014003c4 	movi	r5,15
    1d7c:	1c000317 	ldw	r16,12(r3)
    1d80:	1c00041e 	bne	r3,r16,1d94 <_malloc_r+0x290>
    1d84:	0000a706 	br	2024 <_malloc_r+0x520>
    1d88:	3000ab0e 	bge	r6,zero,2038 <_malloc_r+0x534>
    1d8c:	84000317 	ldw	r16,12(r16)
    1d90:	1c00a426 	beq	r3,r16,2024 <_malloc_r+0x520>
    1d94:	80800117 	ldw	r2,4(r16)
    1d98:	1204703a 	and	r2,r2,r8
    1d9c:	144dc83a 	sub	r6,r2,r17
    1da0:	29bff90e 	bge	r5,r6,1d88 <_malloc_r+0x284>
    1da4:	81000317 	ldw	r4,12(r16)
    1da8:	80c00217 	ldw	r3,8(r16)
    1dac:	89400054 	ori	r5,r17,1
    1db0:	8445883a 	add	r2,r16,r17
    1db4:	20c00215 	stw	r3,8(r4)
    1db8:	19000315 	stw	r4,12(r3)
    1dbc:	81400115 	stw	r5,4(r16)
    1dc0:	1187883a 	add	r3,r2,r6
    1dc4:	31000054 	ori	r4,r6,1
    1dc8:	50800315 	stw	r2,12(r10)
    1dcc:	50800215 	stw	r2,8(r10)
    1dd0:	19800015 	stw	r6,0(r3)
    1dd4:	11000115 	stw	r4,4(r2)
    1dd8:	12800215 	stw	r10,8(r2)
    1ddc:	12800315 	stw	r10,12(r2)
    1de0:	9009883a 	mov	r4,r18
    1de4:	000b7a00 	call	b7a0 <__malloc_unlock>
    1de8:	80c00204 	addi	r3,r16,8
    1dec:	003f5906 	br	1b54 <_malloc_r+0x50>
    1df0:	8109883a 	add	r4,r16,r4
    1df4:	20800117 	ldw	r2,4(r4)
    1df8:	80c00217 	ldw	r3,8(r16)
    1dfc:	81400317 	ldw	r5,12(r16)
    1e00:	10800054 	ori	r2,r2,1
    1e04:	20800115 	stw	r2,4(r4)
    1e08:	28c00215 	stw	r3,8(r5)
    1e0c:	19400315 	stw	r5,12(r3)
    1e10:	9009883a 	mov	r4,r18
    1e14:	000b7a00 	call	b7a0 <__malloc_unlock>
    1e18:	80c00204 	addi	r3,r16,8
    1e1c:	003f4d06 	br	1b54 <_malloc_r+0x50>
    1e20:	80800204 	addi	r2,r16,8
    1e24:	14000317 	ldw	r16,12(r2)
    1e28:	143f911e 	bne	r2,r16,1c70 <_malloc_r+0x16c>
    1e2c:	1a400084 	addi	r9,r3,2
    1e30:	003f7306 	br	1c00 <_malloc_r+0xfc>
    1e34:	88c00054 	ori	r3,r17,1
    1e38:	8445883a 	add	r2,r16,r17
    1e3c:	80c00115 	stw	r3,4(r16)
    1e40:	003fdf06 	br	1dc0 <_malloc_r+0x2bc>
    1e44:	e4000217 	ldw	r16,8(fp)
    1e48:	00bfff04 	movi	r2,-4
    1e4c:	80c00117 	ldw	r3,4(r16)
    1e50:	802d883a 	mov	r22,r16
    1e54:	18aa703a 	and	r21,r3,r2
    1e58:	ac401636 	bltu	r21,r17,1eb4 <_malloc_r+0x3b0>
    1e5c:	ac49c83a 	sub	r4,r21,r17
    1e60:	008003c4 	movi	r2,15
    1e64:	1100130e 	bge	r2,r4,1eb4 <_malloc_r+0x3b0>
    1e68:	88800054 	ori	r2,r17,1
    1e6c:	8447883a 	add	r3,r16,r17
    1e70:	80800115 	stw	r2,4(r16)
    1e74:	20800054 	ori	r2,r4,1
    1e78:	18800115 	stw	r2,4(r3)
    1e7c:	e0c00215 	stw	r3,8(fp)
    1e80:	9009883a 	mov	r4,r18
    1e84:	000b7a00 	call	b7a0 <__malloc_unlock>
    1e88:	80c00204 	addi	r3,r16,8
    1e8c:	003f3106 	br	1b54 <_malloc_r+0x50>
    1e90:	39c00117 	ldw	r7,4(r7)
    1e94:	573ffe04 	addi	fp,r10,-8
    1e98:	003fa006 	br	1d1c <_malloc_r+0x218>
    1e9c:	00801504 	movi	r2,84
    1ea0:	10c06736 	bltu	r2,r3,2040 <_malloc_r+0x53c>
    1ea4:	8804d33a 	srli	r2,r17,12
    1ea8:	11801b84 	addi	r6,r2,110
    1eac:	300490fa 	slli	r2,r6,3
    1eb0:	003f4106 	br	1bb8 <_malloc_r+0xb4>
    1eb4:	d0a75e17 	ldw	r2,-25224(gp)
    1eb8:	d0e00117 	ldw	r3,-32764(gp)
    1ebc:	053fffc4 	movi	r20,-1
    1ec0:	10800404 	addi	r2,r2,16
    1ec4:	88a7883a 	add	r19,r17,r2
    1ec8:	1d000326 	beq	r3,r20,1ed8 <_malloc_r+0x3d4>
    1ecc:	98c3ffc4 	addi	r3,r19,4095
    1ed0:	00bc0004 	movi	r2,-4096
    1ed4:	18a6703a 	and	r19,r3,r2
    1ed8:	9009883a 	mov	r4,r18
    1edc:	980b883a 	mov	r5,r19
    1ee0:	00023700 	call	2370 <_sbrk_r>
    1ee4:	1009883a 	mov	r4,r2
    1ee8:	15000426 	beq	r2,r20,1efc <_malloc_r+0x3f8>
    1eec:	854b883a 	add	r5,r16,r21
    1ef0:	1029883a 	mov	r20,r2
    1ef4:	11405a2e 	bgeu	r2,r5,2060 <_malloc_r+0x55c>
    1ef8:	87000c26 	beq	r16,fp,1f2c <_malloc_r+0x428>
    1efc:	e4000217 	ldw	r16,8(fp)
    1f00:	80c00117 	ldw	r3,4(r16)
    1f04:	00bfff04 	movi	r2,-4
    1f08:	1884703a 	and	r2,r3,r2
    1f0c:	14400336 	bltu	r2,r17,1f1c <_malloc_r+0x418>
    1f10:	1449c83a 	sub	r4,r2,r17
    1f14:	008003c4 	movi	r2,15
    1f18:	113fd316 	blt	r2,r4,1e68 <_malloc_r+0x364>
    1f1c:	9009883a 	mov	r4,r18
    1f20:	000b7a00 	call	b7a0 <__malloc_unlock>
    1f24:	0007883a 	mov	r3,zero
    1f28:	003f0a06 	br	1b54 <_malloc_r+0x50>
    1f2c:	05c00074 	movhi	r23,1
    1f30:	bdcca304 	addi	r23,r23,12940
    1f34:	b8800017 	ldw	r2,0(r23)
    1f38:	988d883a 	add	r6,r19,r2
    1f3c:	b9800015 	stw	r6,0(r23)
    1f40:	d0e00117 	ldw	r3,-32764(gp)
    1f44:	00bfffc4 	movi	r2,-1
    1f48:	18808e26 	beq	r3,r2,2184 <_malloc_r+0x680>
    1f4c:	2145c83a 	sub	r2,r4,r5
    1f50:	3085883a 	add	r2,r6,r2
    1f54:	b8800015 	stw	r2,0(r23)
    1f58:	20c001cc 	andi	r3,r4,7
    1f5c:	18005f1e 	bne	r3,zero,20dc <_malloc_r+0x5d8>
    1f60:	000b883a 	mov	r5,zero
    1f64:	a4c5883a 	add	r2,r20,r19
    1f68:	1083ffcc 	andi	r2,r2,4095
    1f6c:	00c40004 	movi	r3,4096
    1f70:	1887c83a 	sub	r3,r3,r2
    1f74:	28e7883a 	add	r19,r5,r3
    1f78:	9009883a 	mov	r4,r18
    1f7c:	980b883a 	mov	r5,r19
    1f80:	00023700 	call	2370 <_sbrk_r>
    1f84:	1007883a 	mov	r3,r2
    1f88:	00bfffc4 	movi	r2,-1
    1f8c:	18807a26 	beq	r3,r2,2178 <_malloc_r+0x674>
    1f90:	1d05c83a 	sub	r2,r3,r20
    1f94:	9885883a 	add	r2,r19,r2
    1f98:	10c00054 	ori	r3,r2,1
    1f9c:	b8800017 	ldw	r2,0(r23)
    1fa0:	a021883a 	mov	r16,r20
    1fa4:	a0c00115 	stw	r3,4(r20)
    1fa8:	9885883a 	add	r2,r19,r2
    1fac:	b8800015 	stw	r2,0(r23)
    1fb0:	e5000215 	stw	r20,8(fp)
    1fb4:	b7003626 	beq	r22,fp,2090 <_malloc_r+0x58c>
    1fb8:	018003c4 	movi	r6,15
    1fbc:	35404b36 	bltu	r6,r21,20ec <_malloc_r+0x5e8>
    1fc0:	00800044 	movi	r2,1
    1fc4:	a0800115 	stw	r2,4(r20)
    1fc8:	003fcd06 	br	1f00 <_malloc_r+0x3fc>
    1fcc:	2808d27a 	srli	r4,r5,9
    1fd0:	2000371e 	bne	r4,zero,20b0 <_malloc_r+0x5ac>
    1fd4:	2808d0fa 	srli	r4,r5,3
    1fd8:	200690fa 	slli	r3,r4,3
    1fdc:	1ad1883a 	add	r8,r3,r11
    1fe0:	41800217 	ldw	r6,8(r8)
    1fe4:	41805b26 	beq	r8,r6,2154 <_malloc_r+0x650>
    1fe8:	30800117 	ldw	r2,4(r6)
    1fec:	00ffff04 	movi	r3,-4
    1ff0:	10c4703a 	and	r2,r2,r3
    1ff4:	2880022e 	bgeu	r5,r2,2000 <_malloc_r+0x4fc>
    1ff8:	31800217 	ldw	r6,8(r6)
    1ffc:	41bffa1e 	bne	r8,r6,1fe8 <_malloc_r+0x4e4>
    2000:	32000317 	ldw	r8,12(r6)
    2004:	39c00117 	ldw	r7,4(r7)
    2008:	82000315 	stw	r8,12(r16)
    200c:	81800215 	stw	r6,8(r16)
    2010:	07000074 	movhi	fp,1
    2014:	e73e6904 	addi	fp,fp,-1628
    2018:	34000315 	stw	r16,12(r6)
    201c:	44000215 	stw	r16,8(r8)
    2020:	003f3e06 	br	1d1c <_malloc_r+0x218>
    2024:	63000044 	addi	r12,r12,1
    2028:	608000cc 	andi	r2,r12,3
    202c:	10005d26 	beq	r2,zero,21a4 <_malloc_r+0x6a0>
    2030:	18c00204 	addi	r3,r3,8
    2034:	003f5106 	br	1d7c <_malloc_r+0x278>
    2038:	8089883a 	add	r4,r16,r2
    203c:	003f6d06 	br	1df4 <_malloc_r+0x2f0>
    2040:	00805504 	movi	r2,340
    2044:	10c02036 	bltu	r2,r3,20c8 <_malloc_r+0x5c4>
    2048:	8804d3fa 	srli	r2,r17,15
    204c:	11801dc4 	addi	r6,r2,119
    2050:	300490fa 	slli	r2,r6,3
    2054:	003ed806 	br	1bb8 <_malloc_r+0xb4>
    2058:	48c000c4 	addi	r3,r9,3
    205c:	003f3106 	br	1d24 <_malloc_r+0x220>
    2060:	05c00074 	movhi	r23,1
    2064:	bdcca304 	addi	r23,r23,12940
    2068:	b8800017 	ldw	r2,0(r23)
    206c:	988d883a 	add	r6,r19,r2
    2070:	b9800015 	stw	r6,0(r23)
    2074:	293fb21e 	bne	r5,r4,1f40 <_malloc_r+0x43c>
    2078:	2083ffcc 	andi	r2,r4,4095
    207c:	103fb01e 	bne	r2,zero,1f40 <_malloc_r+0x43c>
    2080:	e4000217 	ldw	r16,8(fp)
    2084:	9d45883a 	add	r2,r19,r21
    2088:	10800054 	ori	r2,r2,1
    208c:	80800115 	stw	r2,4(r16)
    2090:	b8c00017 	ldw	r3,0(r23)
    2094:	d0a75f17 	ldw	r2,-25220(gp)
    2098:	10c0012e 	bgeu	r2,r3,20a0 <_malloc_r+0x59c>
    209c:	d0e75f15 	stw	r3,-25220(gp)
    20a0:	d0a76017 	ldw	r2,-25216(gp)
    20a4:	10ff962e 	bgeu	r2,r3,1f00 <_malloc_r+0x3fc>
    20a8:	d0e76015 	stw	r3,-25216(gp)
    20ac:	003f9406 	br	1f00 <_malloc_r+0x3fc>
    20b0:	00800104 	movi	r2,4
    20b4:	11001e36 	bltu	r2,r4,2130 <_malloc_r+0x62c>
    20b8:	2804d1ba 	srli	r2,r5,6
    20bc:	11000e04 	addi	r4,r2,56
    20c0:	200690fa 	slli	r3,r4,3
    20c4:	003fc506 	br	1fdc <_malloc_r+0x4d8>
    20c8:	00815504 	movi	r2,1364
    20cc:	10c01d2e 	bgeu	r2,r3,2144 <_malloc_r+0x640>
    20d0:	01801f84 	movi	r6,126
    20d4:	0080fc04 	movi	r2,1008
    20d8:	003eb706 	br	1bb8 <_malloc_r+0xb4>
    20dc:	00800204 	movi	r2,8
    20e0:	10cbc83a 	sub	r5,r2,r3
    20e4:	2169883a 	add	r20,r4,r5
    20e8:	003f9e06 	br	1f64 <_malloc_r+0x460>
    20ec:	00bffe04 	movi	r2,-8
    20f0:	a93ffd04 	addi	r4,r21,-12
    20f4:	2088703a 	and	r4,r4,r2
    20f8:	b10b883a 	add	r5,r22,r4
    20fc:	00c00144 	movi	r3,5
    2100:	28c00215 	stw	r3,8(r5)
    2104:	28c00115 	stw	r3,4(r5)
    2108:	b0800117 	ldw	r2,4(r22)
    210c:	1080004c 	andi	r2,r2,1
    2110:	2084b03a 	or	r2,r4,r2
    2114:	b0800115 	stw	r2,4(r22)
    2118:	313fdd2e 	bgeu	r6,r4,2090 <_malloc_r+0x58c>
    211c:	b1400204 	addi	r5,r22,8
    2120:	9009883a 	mov	r4,r18
    2124:	00062a00 	call	62a0 <_free_r>
    2128:	e4000217 	ldw	r16,8(fp)
    212c:	003fd806 	br	2090 <_malloc_r+0x58c>
    2130:	00800504 	movi	r2,20
    2134:	11001536 	bltu	r2,r4,218c <_malloc_r+0x688>
    2138:	210016c4 	addi	r4,r4,91
    213c:	200690fa 	slli	r3,r4,3
    2140:	003fa606 	br	1fdc <_malloc_r+0x4d8>
    2144:	8804d4ba 	srli	r2,r17,18
    2148:	11801f04 	addi	r6,r2,124
    214c:	300490fa 	slli	r2,r6,3
    2150:	003e9906 	br	1bb8 <_malloc_r+0xb4>
    2154:	2009d0ba 	srai	r4,r4,2
    2158:	01400074 	movhi	r5,1
    215c:	297e6904 	addi	r5,r5,-1628
    2160:	00c00044 	movi	r3,1
    2164:	28800117 	ldw	r2,4(r5)
    2168:	1906983a 	sll	r3,r3,r4
    216c:	10c4b03a 	or	r2,r2,r3
    2170:	28800115 	stw	r2,4(r5)
    2174:	003fa306 	br	2004 <_malloc_r+0x500>
    2178:	0027883a 	mov	r19,zero
    217c:	00c00044 	movi	r3,1
    2180:	003f8606 	br	1f9c <_malloc_r+0x498>
    2184:	d1200115 	stw	r4,-32764(gp)
    2188:	003f7306 	br	1f58 <_malloc_r+0x454>
    218c:	00801504 	movi	r2,84
    2190:	11001936 	bltu	r2,r4,21f8 <_malloc_r+0x6f4>
    2194:	2804d33a 	srli	r2,r5,12
    2198:	11001b84 	addi	r4,r2,110
    219c:	200690fa 	slli	r3,r4,3
    21a0:	003f8e06 	br	1fdc <_malloc_r+0x4d8>
    21a4:	480b883a 	mov	r5,r9
    21a8:	6807883a 	mov	r3,r13
    21ac:	288000cc 	andi	r2,r5,3
    21b0:	18fffe04 	addi	r3,r3,-8
    21b4:	297fffc4 	addi	r5,r5,-1
    21b8:	10001526 	beq	r2,zero,2210 <_malloc_r+0x70c>
    21bc:	18800217 	ldw	r2,8(r3)
    21c0:	10fffa26 	beq	r2,r3,21ac <_malloc_r+0x6a8>
    21c4:	2109883a 	add	r4,r4,r4
    21c8:	393f1e36 	bltu	r7,r4,1e44 <_malloc_r+0x340>
    21cc:	203f1d26 	beq	r4,zero,1e44 <_malloc_r+0x340>
    21d0:	21c4703a 	and	r2,r4,r7
    21d4:	10000226 	beq	r2,zero,21e0 <_malloc_r+0x6dc>
    21d8:	6013883a 	mov	r9,r12
    21dc:	003ee106 	br	1d64 <_malloc_r+0x260>
    21e0:	2109883a 	add	r4,r4,r4
    21e4:	3904703a 	and	r2,r7,r4
    21e8:	63000104 	addi	r12,r12,4
    21ec:	103ffc26 	beq	r2,zero,21e0 <_malloc_r+0x6dc>
    21f0:	6013883a 	mov	r9,r12
    21f4:	003edb06 	br	1d64 <_malloc_r+0x260>
    21f8:	00805504 	movi	r2,340
    21fc:	11000836 	bltu	r2,r4,2220 <_malloc_r+0x71c>
    2200:	2804d3fa 	srli	r2,r5,15
    2204:	11001dc4 	addi	r4,r2,119
    2208:	200690fa 	slli	r3,r4,3
    220c:	003f7306 	br	1fdc <_malloc_r+0x4d8>
    2210:	0104303a 	nor	r2,zero,r4
    2214:	388e703a 	and	r7,r7,r2
    2218:	e1c00115 	stw	r7,4(fp)
    221c:	003fe906 	br	21c4 <_malloc_r+0x6c0>
    2220:	00815504 	movi	r2,1364
    2224:	1100032e 	bgeu	r2,r4,2234 <_malloc_r+0x730>
    2228:	01001f84 	movi	r4,126
    222c:	00c0fc04 	movi	r3,1008
    2230:	003f6a06 	br	1fdc <_malloc_r+0x4d8>
    2234:	2804d4ba 	srli	r2,r5,18
    2238:	11001f04 	addi	r4,r2,124
    223c:	200690fa 	slli	r3,r4,3
    2240:	003f6606 	br	1fdc <_malloc_r+0x4d8>

00002244 <printf>:
    2244:	defffb04 	addi	sp,sp,-20
    2248:	dfc00115 	stw	ra,4(sp)
    224c:	d9400215 	stw	r5,8(sp)
    2250:	d9800315 	stw	r6,12(sp)
    2254:	d9c00415 	stw	r7,16(sp)
    2258:	00800074 	movhi	r2,1
    225c:	10853a04 	addi	r2,r2,5352
    2260:	10c00017 	ldw	r3,0(r2)
    2264:	200b883a 	mov	r5,r4
    2268:	d8800204 	addi	r2,sp,8
    226c:	19000217 	ldw	r4,8(r3)
    2270:	100d883a 	mov	r6,r2
    2274:	d8800015 	stw	r2,0(sp)
    2278:	00043580 	call	4358 <__vfprintf_internal>
    227c:	dfc00117 	ldw	ra,4(sp)
    2280:	dec00504 	addi	sp,sp,20
    2284:	f800283a 	ret

00002288 <_printf_r>:
    2288:	defffc04 	addi	sp,sp,-16
    228c:	dfc00115 	stw	ra,4(sp)
    2290:	d9800215 	stw	r6,8(sp)
    2294:	d9c00315 	stw	r7,12(sp)
    2298:	280d883a 	mov	r6,r5
    229c:	21400217 	ldw	r5,8(r4)
    22a0:	d8c00204 	addi	r3,sp,8
    22a4:	180f883a 	mov	r7,r3
    22a8:	d8c00015 	stw	r3,0(sp)
    22ac:	00024ac0 	call	24ac <___vfprintf_internal_r>
    22b0:	dfc00117 	ldw	ra,4(sp)
    22b4:	dec00404 	addi	sp,sp,16
    22b8:	f800283a 	ret

000022bc <_puts_r>:
    22bc:	defff604 	addi	sp,sp,-40
    22c0:	dc400715 	stw	r17,28(sp)
    22c4:	2023883a 	mov	r17,r4
    22c8:	2809883a 	mov	r4,r5
    22cc:	dfc00915 	stw	ra,36(sp)
    22d0:	dcc00815 	stw	r19,32(sp)
    22d4:	2827883a 	mov	r19,r5
    22d8:	00023e00 	call	23e0 <strlen>
    22dc:	89400217 	ldw	r5,8(r17)
    22e0:	00c00074 	movhi	r3,1
    22e4:	18fc8904 	addi	r3,r3,-3548
    22e8:	01c00044 	movi	r7,1
    22ec:	12000044 	addi	r8,r2,1
    22f0:	d8c00515 	stw	r3,20(sp)
    22f4:	d9c00615 	stw	r7,24(sp)
    22f8:	d8c00304 	addi	r3,sp,12
    22fc:	01c00084 	movi	r7,2
    2300:	8809883a 	mov	r4,r17
    2304:	d80d883a 	mov	r6,sp
    2308:	d8c00015 	stw	r3,0(sp)
    230c:	dcc00315 	stw	r19,12(sp)
    2310:	da000215 	stw	r8,8(sp)
    2314:	d9c00115 	stw	r7,4(sp)
    2318:	d8800415 	stw	r2,16(sp)
    231c:	00065b40 	call	65b4 <__sfvwrite_r>
    2320:	00ffffc4 	movi	r3,-1
    2324:	10000626 	beq	r2,zero,2340 <_puts_r+0x84>
    2328:	1805883a 	mov	r2,r3
    232c:	dfc00917 	ldw	ra,36(sp)
    2330:	dcc00817 	ldw	r19,32(sp)
    2334:	dc400717 	ldw	r17,28(sp)
    2338:	dec00a04 	addi	sp,sp,40
    233c:	f800283a 	ret
    2340:	00c00284 	movi	r3,10
    2344:	1805883a 	mov	r2,r3
    2348:	dfc00917 	ldw	ra,36(sp)
    234c:	dcc00817 	ldw	r19,32(sp)
    2350:	dc400717 	ldw	r17,28(sp)
    2354:	dec00a04 	addi	sp,sp,40
    2358:	f800283a 	ret

0000235c <puts>:
    235c:	00800074 	movhi	r2,1
    2360:	10853a04 	addi	r2,r2,5352
    2364:	200b883a 	mov	r5,r4
    2368:	11000017 	ldw	r4,0(r2)
    236c:	00022bc1 	jmpi	22bc <_puts_r>

00002370 <_sbrk_r>:
    2370:	defffd04 	addi	sp,sp,-12
    2374:	dc000015 	stw	r16,0(sp)
    2378:	04000074 	movhi	r16,1
    237c:	840c9904 	addi	r16,r16,12900
    2380:	dc400115 	stw	r17,4(sp)
    2384:	80000015 	stw	zero,0(r16)
    2388:	2023883a 	mov	r17,r4
    238c:	2809883a 	mov	r4,r5
    2390:	dfc00215 	stw	ra,8(sp)
    2394:	000b9a00 	call	b9a0 <sbrk>
    2398:	1007883a 	mov	r3,r2
    239c:	00bfffc4 	movi	r2,-1
    23a0:	18800626 	beq	r3,r2,23bc <_sbrk_r+0x4c>
    23a4:	1805883a 	mov	r2,r3
    23a8:	dfc00217 	ldw	ra,8(sp)
    23ac:	dc400117 	ldw	r17,4(sp)
    23b0:	dc000017 	ldw	r16,0(sp)
    23b4:	dec00304 	addi	sp,sp,12
    23b8:	f800283a 	ret
    23bc:	80800017 	ldw	r2,0(r16)
    23c0:	103ff826 	beq	r2,zero,23a4 <_sbrk_r+0x34>
    23c4:	88800015 	stw	r2,0(r17)
    23c8:	1805883a 	mov	r2,r3
    23cc:	dfc00217 	ldw	ra,8(sp)
    23d0:	dc400117 	ldw	r17,4(sp)
    23d4:	dc000017 	ldw	r16,0(sp)
    23d8:	dec00304 	addi	sp,sp,12
    23dc:	f800283a 	ret

000023e0 <strlen>:
    23e0:	208000cc 	andi	r2,r4,3
    23e4:	2011883a 	mov	r8,r4
    23e8:	1000161e 	bne	r2,zero,2444 <strlen+0x64>
    23ec:	20c00017 	ldw	r3,0(r4)
    23f0:	017fbff4 	movhi	r5,65279
    23f4:	297fbfc4 	addi	r5,r5,-257
    23f8:	01e02074 	movhi	r7,32897
    23fc:	39e02004 	addi	r7,r7,-32640
    2400:	1945883a 	add	r2,r3,r5
    2404:	11c4703a 	and	r2,r2,r7
    2408:	00c6303a 	nor	r3,zero,r3
    240c:	1886703a 	and	r3,r3,r2
    2410:	18000c1e 	bne	r3,zero,2444 <strlen+0x64>
    2414:	280d883a 	mov	r6,r5
    2418:	380b883a 	mov	r5,r7
    241c:	21000104 	addi	r4,r4,4
    2420:	20800017 	ldw	r2,0(r4)
    2424:	1187883a 	add	r3,r2,r6
    2428:	1946703a 	and	r3,r3,r5
    242c:	0084303a 	nor	r2,zero,r2
    2430:	10c4703a 	and	r2,r2,r3
    2434:	103ff926 	beq	r2,zero,241c <strlen+0x3c>
    2438:	20800007 	ldb	r2,0(r4)
    243c:	10000326 	beq	r2,zero,244c <strlen+0x6c>
    2440:	21000044 	addi	r4,r4,1
    2444:	20800007 	ldb	r2,0(r4)
    2448:	103ffd1e 	bne	r2,zero,2440 <strlen+0x60>
    244c:	2205c83a 	sub	r2,r4,r8
    2450:	f800283a 	ret

00002454 <__sprint_r>:
    2454:	30800217 	ldw	r2,8(r6)
    2458:	defffe04 	addi	sp,sp,-8
    245c:	dc000015 	stw	r16,0(sp)
    2460:	dfc00115 	stw	ra,4(sp)
    2464:	3021883a 	mov	r16,r6
    2468:	0007883a 	mov	r3,zero
    246c:	1000061e 	bne	r2,zero,2488 <__sprint_r+0x34>
    2470:	1805883a 	mov	r2,r3
    2474:	30000115 	stw	zero,4(r6)
    2478:	dfc00117 	ldw	ra,4(sp)
    247c:	dc000017 	ldw	r16,0(sp)
    2480:	dec00204 	addi	sp,sp,8
    2484:	f800283a 	ret
    2488:	00065b40 	call	65b4 <__sfvwrite_r>
    248c:	1007883a 	mov	r3,r2
    2490:	1805883a 	mov	r2,r3
    2494:	80000115 	stw	zero,4(r16)
    2498:	80000215 	stw	zero,8(r16)
    249c:	dfc00117 	ldw	ra,4(sp)
    24a0:	dc000017 	ldw	r16,0(sp)
    24a4:	dec00204 	addi	sp,sp,8
    24a8:	f800283a 	ret

000024ac <___vfprintf_internal_r>:
    24ac:	defea404 	addi	sp,sp,-1392
    24b0:	dd815815 	stw	r22,1376(sp)
    24b4:	dc015215 	stw	r16,1352(sp)
    24b8:	d9c15115 	stw	r7,1348(sp)
    24bc:	dfc15b15 	stw	ra,1388(sp)
    24c0:	df015a15 	stw	fp,1384(sp)
    24c4:	ddc15915 	stw	r23,1380(sp)
    24c8:	dd415715 	stw	r21,1372(sp)
    24cc:	dd015615 	stw	r20,1368(sp)
    24d0:	dcc15515 	stw	r19,1364(sp)
    24d4:	dc815415 	stw	r18,1360(sp)
    24d8:	dc415315 	stw	r17,1356(sp)
    24dc:	282d883a 	mov	r22,r5
    24e0:	3021883a 	mov	r16,r6
    24e4:	d9014f15 	stw	r4,1340(sp)
    24e8:	0006bd80 	call	6bd8 <_localeconv_r>
    24ec:	10800017 	ldw	r2,0(r2)
    24f0:	d9c15117 	ldw	r7,1348(sp)
    24f4:	d8814915 	stw	r2,1316(sp)
    24f8:	d8814f17 	ldw	r2,1340(sp)
    24fc:	10000226 	beq	r2,zero,2508 <___vfprintf_internal_r+0x5c>
    2500:	10800e17 	ldw	r2,56(r2)
    2504:	10020d26 	beq	r2,zero,2d3c <___vfprintf_internal_r+0x890>
    2508:	b080030b 	ldhu	r2,12(r22)
    250c:	1080020c 	andi	r2,r2,8
    2510:	10020e26 	beq	r2,zero,2d4c <___vfprintf_internal_r+0x8a0>
    2514:	b0800417 	ldw	r2,16(r22)
    2518:	10020c26 	beq	r2,zero,2d4c <___vfprintf_internal_r+0x8a0>
    251c:	b200030b 	ldhu	r8,12(r22)
    2520:	00800284 	movi	r2,10
    2524:	40c0068c 	andi	r3,r8,26
    2528:	18802f1e 	bne	r3,r2,25e8 <___vfprintf_internal_r+0x13c>
    252c:	b080038f 	ldh	r2,14(r22)
    2530:	10002d16 	blt	r2,zero,25e8 <___vfprintf_internal_r+0x13c>
    2534:	b240038b 	ldhu	r9,14(r22)
    2538:	b2800717 	ldw	r10,28(r22)
    253c:	b2c00917 	ldw	r11,36(r22)
    2540:	d9014f17 	ldw	r4,1340(sp)
    2544:	dc402904 	addi	r17,sp,164
    2548:	d8804004 	addi	r2,sp,256
    254c:	00c10004 	movi	r3,1024
    2550:	423fff4c 	andi	r8,r8,65533
    2554:	800d883a 	mov	r6,r16
    2558:	880b883a 	mov	r5,r17
    255c:	da002c0d 	sth	r8,176(sp)
    2560:	da402c8d 	sth	r9,178(sp)
    2564:	da803015 	stw	r10,192(sp)
    2568:	dac03215 	stw	r11,200(sp)
    256c:	d8802d15 	stw	r2,180(sp)
    2570:	d8c02e15 	stw	r3,184(sp)
    2574:	d8802915 	stw	r2,164(sp)
    2578:	d8c02b15 	stw	r3,172(sp)
    257c:	d8002f15 	stw	zero,188(sp)
    2580:	00024ac0 	call	24ac <___vfprintf_internal_r>
    2584:	d8814b15 	stw	r2,1324(sp)
    2588:	10000416 	blt	r2,zero,259c <___vfprintf_internal_r+0xf0>
    258c:	d9014f17 	ldw	r4,1340(sp)
    2590:	880b883a 	mov	r5,r17
    2594:	0005c840 	call	5c84 <_fflush_r>
    2598:	1002321e 	bne	r2,zero,2e64 <___vfprintf_internal_r+0x9b8>
    259c:	d8802c0b 	ldhu	r2,176(sp)
    25a0:	1080100c 	andi	r2,r2,64
    25a4:	10000326 	beq	r2,zero,25b4 <___vfprintf_internal_r+0x108>
    25a8:	b080030b 	ldhu	r2,12(r22)
    25ac:	10801014 	ori	r2,r2,64
    25b0:	b080030d 	sth	r2,12(r22)
    25b4:	d8814b17 	ldw	r2,1324(sp)
    25b8:	dfc15b17 	ldw	ra,1388(sp)
    25bc:	df015a17 	ldw	fp,1384(sp)
    25c0:	ddc15917 	ldw	r23,1380(sp)
    25c4:	dd815817 	ldw	r22,1376(sp)
    25c8:	dd415717 	ldw	r21,1372(sp)
    25cc:	dd015617 	ldw	r20,1368(sp)
    25d0:	dcc15517 	ldw	r19,1364(sp)
    25d4:	dc815417 	ldw	r18,1360(sp)
    25d8:	dc415317 	ldw	r17,1356(sp)
    25dc:	dc015217 	ldw	r16,1352(sp)
    25e0:	dec15c04 	addi	sp,sp,1392
    25e4:	f800283a 	ret
    25e8:	0005883a 	mov	r2,zero
    25ec:	0007883a 	mov	r3,zero
    25f0:	dd401904 	addi	r21,sp,100
    25f4:	d8814215 	stw	r2,1288(sp)
    25f8:	802f883a 	mov	r23,r16
    25fc:	d8c14315 	stw	r3,1292(sp)
    2600:	d8014b15 	stw	zero,1324(sp)
    2604:	d8014815 	stw	zero,1312(sp)
    2608:	d8014415 	stw	zero,1296(sp)
    260c:	d8014715 	stw	zero,1308(sp)
    2610:	dd400c15 	stw	r21,48(sp)
    2614:	d8000e15 	stw	zero,56(sp)
    2618:	d8000d15 	stw	zero,52(sp)
    261c:	b8800007 	ldb	r2,0(r23)
    2620:	10001926 	beq	r2,zero,2688 <___vfprintf_internal_r+0x1dc>
    2624:	00c00944 	movi	r3,37
    2628:	10c01726 	beq	r2,r3,2688 <___vfprintf_internal_r+0x1dc>
    262c:	b821883a 	mov	r16,r23
    2630:	00000106 	br	2638 <___vfprintf_internal_r+0x18c>
    2634:	10c00326 	beq	r2,r3,2644 <___vfprintf_internal_r+0x198>
    2638:	84000044 	addi	r16,r16,1
    263c:	80800007 	ldb	r2,0(r16)
    2640:	103ffc1e 	bne	r2,zero,2634 <___vfprintf_internal_r+0x188>
    2644:	85e7c83a 	sub	r19,r16,r23
    2648:	98000e26 	beq	r19,zero,2684 <___vfprintf_internal_r+0x1d8>
    264c:	dc800e17 	ldw	r18,56(sp)
    2650:	dc400d17 	ldw	r17,52(sp)
    2654:	008001c4 	movi	r2,7
    2658:	94e5883a 	add	r18,r18,r19
    265c:	8c400044 	addi	r17,r17,1
    2660:	adc00015 	stw	r23,0(r21)
    2664:	dc800e15 	stw	r18,56(sp)
    2668:	acc00115 	stw	r19,4(r21)
    266c:	dc400d15 	stw	r17,52(sp)
    2670:	14428b16 	blt	r2,r17,30a0 <___vfprintf_internal_r+0xbf4>
    2674:	ad400204 	addi	r21,r21,8
    2678:	d9014b17 	ldw	r4,1324(sp)
    267c:	24c9883a 	add	r4,r4,r19
    2680:	d9014b15 	stw	r4,1324(sp)
    2684:	802f883a 	mov	r23,r16
    2688:	b8800007 	ldb	r2,0(r23)
    268c:	10013c26 	beq	r2,zero,2b80 <___vfprintf_internal_r+0x6d4>
    2690:	bdc00044 	addi	r23,r23,1
    2694:	d8000405 	stb	zero,16(sp)
    2698:	b8c00007 	ldb	r3,0(r23)
    269c:	04ffffc4 	movi	r19,-1
    26a0:	d8014c15 	stw	zero,1328(sp)
    26a4:	d8014a15 	stw	zero,1320(sp)
    26a8:	d8c14d15 	stw	r3,1332(sp)
    26ac:	bdc00044 	addi	r23,r23,1
    26b0:	d9414d17 	ldw	r5,1332(sp)
    26b4:	00801604 	movi	r2,88
    26b8:	28fff804 	addi	r3,r5,-32
    26bc:	10c06036 	bltu	r2,r3,2840 <___vfprintf_internal_r+0x394>
    26c0:	18c5883a 	add	r2,r3,r3
    26c4:	1085883a 	add	r2,r2,r2
    26c8:	00c00034 	movhi	r3,0
    26cc:	18c9b704 	addi	r3,r3,9948
    26d0:	10c5883a 	add	r2,r2,r3
    26d4:	11000017 	ldw	r4,0(r2)
    26d8:	2000683a 	jmp	r4
    26dc:	00003650 	cmplti	zero,zero,217
    26e0:	00002840 	call	284 <LCD_Init+0x94>
    26e4:	00002840 	call	284 <LCD_Init+0x94>
    26e8:	0000363c 	xorhi	zero,zero,216
    26ec:	00002840 	call	284 <LCD_Init+0x94>
    26f0:	00002840 	call	284 <LCD_Init+0x94>
    26f4:	00002840 	call	284 <LCD_Init+0x94>
    26f8:	00002840 	call	284 <LCD_Init+0x94>
    26fc:	00002840 	call	284 <LCD_Init+0x94>
    2700:	00002840 	call	284 <LCD_Init+0x94>
    2704:	0000341c 	xori	zero,zero,208
    2708:	0000362c 	andhi	zero,zero,216
    270c:	00002840 	call	284 <LCD_Init+0x94>
    2710:	00003434 	movhi	zero,208
    2714:	000036c8 	cmpgei	zero,zero,219
    2718:	00002840 	call	284 <LCD_Init+0x94>
    271c:	000036b4 	movhi	zero,218
    2720:	0000367c 	xorhi	zero,zero,217
    2724:	0000367c 	xorhi	zero,zero,217
    2728:	0000367c 	xorhi	zero,zero,217
    272c:	0000367c 	xorhi	zero,zero,217
    2730:	0000367c 	xorhi	zero,zero,217
    2734:	0000367c 	xorhi	zero,zero,217
    2738:	0000367c 	xorhi	zero,zero,217
    273c:	0000367c 	xorhi	zero,zero,217
    2740:	0000367c 	xorhi	zero,zero,217
    2744:	00002840 	call	284 <LCD_Init+0x94>
    2748:	00002840 	call	284 <LCD_Init+0x94>
    274c:	00002840 	call	284 <LCD_Init+0x94>
    2750:	00002840 	call	284 <LCD_Init+0x94>
    2754:	00002840 	call	284 <LCD_Init+0x94>
    2758:	00002840 	call	284 <LCD_Init+0x94>
    275c:	00002840 	call	284 <LCD_Init+0x94>
    2760:	00002840 	call	284 <LCD_Init+0x94>
    2764:	00002840 	call	284 <LCD_Init+0x94>
    2768:	00002840 	call	284 <LCD_Init+0x94>
    276c:	00002e98 	cmpnei	zero,zero,186
    2770:	00003504 	movi	zero,212
    2774:	00002840 	call	284 <LCD_Init+0x94>
    2778:	00003504 	movi	zero,212
    277c:	00002840 	call	284 <LCD_Init+0x94>
    2780:	00002840 	call	284 <LCD_Init+0x94>
    2784:	00002840 	call	284 <LCD_Init+0x94>
    2788:	00002840 	call	284 <LCD_Init+0x94>
    278c:	00003668 	cmpgeui	zero,zero,217
    2790:	00002840 	call	284 <LCD_Init+0x94>
    2794:	00002840 	call	284 <LCD_Init+0x94>
    2798:	00002f4c 	andi	zero,zero,189
    279c:	00002840 	call	284 <LCD_Init+0x94>
    27a0:	00002840 	call	284 <LCD_Init+0x94>
    27a4:	00002840 	call	284 <LCD_Init+0x94>
    27a8:	00002840 	call	284 <LCD_Init+0x94>
    27ac:	00002840 	call	284 <LCD_Init+0x94>
    27b0:	00002f98 	cmpnei	zero,zero,190
    27b4:	00002840 	call	284 <LCD_Init+0x94>
    27b8:	00002840 	call	284 <LCD_Init+0x94>
    27bc:	000035b8 	rdprs	zero,zero,214
    27c0:	00002840 	call	284 <LCD_Init+0x94>
    27c4:	00002840 	call	284 <LCD_Init+0x94>
    27c8:	00002840 	call	284 <LCD_Init+0x94>
    27cc:	00002840 	call	284 <LCD_Init+0x94>
    27d0:	00002840 	call	284 <LCD_Init+0x94>
    27d4:	00002840 	call	284 <LCD_Init+0x94>
    27d8:	00002840 	call	284 <LCD_Init+0x94>
    27dc:	00002840 	call	284 <LCD_Init+0x94>
    27e0:	00002840 	call	284 <LCD_Init+0x94>
    27e4:	00002840 	call	284 <LCD_Init+0x94>
    27e8:	0000358c 	andi	zero,zero,214
    27ec:	00002ea4 	muli	zero,zero,186
    27f0:	00003504 	movi	zero,212
    27f4:	00003504 	movi	zero,212
    27f8:	00003504 	movi	zero,212
    27fc:	000034f0 	cmpltui	zero,zero,211
    2800:	00002ea4 	muli	zero,zero,186
    2804:	00002840 	call	284 <LCD_Init+0x94>
    2808:	00002840 	call	284 <LCD_Init+0x94>
    280c:	00003478 	rdprs	zero,zero,209
    2810:	00002840 	call	284 <LCD_Init+0x94>
    2814:	00003448 	cmpgei	zero,zero,209
    2818:	00002f58 	cmpnei	zero,zero,189
    281c:	000034a8 	cmpgeui	zero,zero,210
    2820:	00003494 	movui	zero,210
    2824:	00002840 	call	284 <LCD_Init+0x94>
    2828:	00003724 	muli	zero,zero,220
    282c:	00002840 	call	284 <LCD_Init+0x94>
    2830:	00002fa4 	muli	zero,zero,190
    2834:	00002840 	call	284 <LCD_Init+0x94>
    2838:	00002840 	call	284 <LCD_Init+0x94>
    283c:	0000361c 	xori	zero,zero,216
    2840:	d9014d17 	ldw	r4,1332(sp)
    2844:	2000ce26 	beq	r4,zero,2b80 <___vfprintf_internal_r+0x6d4>
    2848:	01400044 	movi	r5,1
    284c:	d9800f04 	addi	r6,sp,60
    2850:	d9c14015 	stw	r7,1280(sp)
    2854:	d9414515 	stw	r5,1300(sp)
    2858:	d9814115 	stw	r6,1284(sp)
    285c:	280f883a 	mov	r7,r5
    2860:	d9000f05 	stb	r4,60(sp)
    2864:	d8000405 	stb	zero,16(sp)
    2868:	d8014615 	stw	zero,1304(sp)
    286c:	d8c14c17 	ldw	r3,1328(sp)
    2870:	1880008c 	andi	r2,r3,2
    2874:	1005003a 	cmpeq	r2,r2,zero
    2878:	d8815015 	stw	r2,1344(sp)
    287c:	1000031e 	bne	r2,zero,288c <___vfprintf_internal_r+0x3e0>
    2880:	d9014517 	ldw	r4,1300(sp)
    2884:	21000084 	addi	r4,r4,2
    2888:	d9014515 	stw	r4,1300(sp)
    288c:	d9414c17 	ldw	r5,1328(sp)
    2890:	2940210c 	andi	r5,r5,132
    2894:	d9414e15 	stw	r5,1336(sp)
    2898:	28002d1e 	bne	r5,zero,2950 <___vfprintf_internal_r+0x4a4>
    289c:	d9814a17 	ldw	r6,1320(sp)
    28a0:	d8814517 	ldw	r2,1300(sp)
    28a4:	30a1c83a 	sub	r16,r6,r2
    28a8:	0400290e 	bge	zero,r16,2950 <___vfprintf_internal_r+0x4a4>
    28ac:	00800404 	movi	r2,16
    28b0:	1404580e 	bge	r2,r16,3a14 <___vfprintf_internal_r+0x1568>
    28b4:	dc800e17 	ldw	r18,56(sp)
    28b8:	dc400d17 	ldw	r17,52(sp)
    28bc:	1027883a 	mov	r19,r2
    28c0:	07000074 	movhi	fp,1
    28c4:	e73ca584 	addi	fp,fp,-3434
    28c8:	050001c4 	movi	r20,7
    28cc:	00000306 	br	28dc <___vfprintf_internal_r+0x430>
    28d0:	843ffc04 	addi	r16,r16,-16
    28d4:	ad400204 	addi	r21,r21,8
    28d8:	9c00130e 	bge	r19,r16,2928 <___vfprintf_internal_r+0x47c>
    28dc:	94800404 	addi	r18,r18,16
    28e0:	8c400044 	addi	r17,r17,1
    28e4:	af000015 	stw	fp,0(r21)
    28e8:	acc00115 	stw	r19,4(r21)
    28ec:	dc800e15 	stw	r18,56(sp)
    28f0:	dc400d15 	stw	r17,52(sp)
    28f4:	a47ff60e 	bge	r20,r17,28d0 <___vfprintf_internal_r+0x424>
    28f8:	d9014f17 	ldw	r4,1340(sp)
    28fc:	b00b883a 	mov	r5,r22
    2900:	d9800c04 	addi	r6,sp,48
    2904:	d9c15115 	stw	r7,1348(sp)
    2908:	00024540 	call	2454 <__sprint_r>
    290c:	d9c15117 	ldw	r7,1348(sp)
    2910:	10009e1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    2914:	843ffc04 	addi	r16,r16,-16
    2918:	dc800e17 	ldw	r18,56(sp)
    291c:	dc400d17 	ldw	r17,52(sp)
    2920:	dd401904 	addi	r21,sp,100
    2924:	9c3fed16 	blt	r19,r16,28dc <___vfprintf_internal_r+0x430>
    2928:	9425883a 	add	r18,r18,r16
    292c:	8c400044 	addi	r17,r17,1
    2930:	008001c4 	movi	r2,7
    2934:	af000015 	stw	fp,0(r21)
    2938:	ac000115 	stw	r16,4(r21)
    293c:	dc800e15 	stw	r18,56(sp)
    2940:	dc400d15 	stw	r17,52(sp)
    2944:	1441f516 	blt	r2,r17,311c <___vfprintf_internal_r+0xc70>
    2948:	ad400204 	addi	r21,r21,8
    294c:	00000206 	br	2958 <___vfprintf_internal_r+0x4ac>
    2950:	dc800e17 	ldw	r18,56(sp)
    2954:	dc400d17 	ldw	r17,52(sp)
    2958:	d8800407 	ldb	r2,16(sp)
    295c:	10000b26 	beq	r2,zero,298c <___vfprintf_internal_r+0x4e0>
    2960:	00800044 	movi	r2,1
    2964:	94800044 	addi	r18,r18,1
    2968:	8c400044 	addi	r17,r17,1
    296c:	a8800115 	stw	r2,4(r21)
    2970:	d8c00404 	addi	r3,sp,16
    2974:	008001c4 	movi	r2,7
    2978:	a8c00015 	stw	r3,0(r21)
    297c:	dc800e15 	stw	r18,56(sp)
    2980:	dc400d15 	stw	r17,52(sp)
    2984:	1441da16 	blt	r2,r17,30f0 <___vfprintf_internal_r+0xc44>
    2988:	ad400204 	addi	r21,r21,8
    298c:	d9015017 	ldw	r4,1344(sp)
    2990:	20000b1e 	bne	r4,zero,29c0 <___vfprintf_internal_r+0x514>
    2994:	d8800444 	addi	r2,sp,17
    2998:	94800084 	addi	r18,r18,2
    299c:	8c400044 	addi	r17,r17,1
    29a0:	a8800015 	stw	r2,0(r21)
    29a4:	00c00084 	movi	r3,2
    29a8:	008001c4 	movi	r2,7
    29ac:	a8c00115 	stw	r3,4(r21)
    29b0:	dc800e15 	stw	r18,56(sp)
    29b4:	dc400d15 	stw	r17,52(sp)
    29b8:	1441c216 	blt	r2,r17,30c4 <___vfprintf_internal_r+0xc18>
    29bc:	ad400204 	addi	r21,r21,8
    29c0:	d9414e17 	ldw	r5,1336(sp)
    29c4:	00802004 	movi	r2,128
    29c8:	2880b126 	beq	r5,r2,2c90 <___vfprintf_internal_r+0x7e4>
    29cc:	d8c14617 	ldw	r3,1304(sp)
    29d0:	19e1c83a 	sub	r16,r3,r7
    29d4:	0400260e 	bge	zero,r16,2a70 <___vfprintf_internal_r+0x5c4>
    29d8:	00800404 	movi	r2,16
    29dc:	1403c90e 	bge	r2,r16,3904 <___vfprintf_internal_r+0x1458>
    29e0:	1027883a 	mov	r19,r2
    29e4:	07000074 	movhi	fp,1
    29e8:	e73ca184 	addi	fp,fp,-3450
    29ec:	050001c4 	movi	r20,7
    29f0:	00000306 	br	2a00 <___vfprintf_internal_r+0x554>
    29f4:	843ffc04 	addi	r16,r16,-16
    29f8:	ad400204 	addi	r21,r21,8
    29fc:	9c00130e 	bge	r19,r16,2a4c <___vfprintf_internal_r+0x5a0>
    2a00:	94800404 	addi	r18,r18,16
    2a04:	8c400044 	addi	r17,r17,1
    2a08:	af000015 	stw	fp,0(r21)
    2a0c:	acc00115 	stw	r19,4(r21)
    2a10:	dc800e15 	stw	r18,56(sp)
    2a14:	dc400d15 	stw	r17,52(sp)
    2a18:	a47ff60e 	bge	r20,r17,29f4 <___vfprintf_internal_r+0x548>
    2a1c:	d9014f17 	ldw	r4,1340(sp)
    2a20:	b00b883a 	mov	r5,r22
    2a24:	d9800c04 	addi	r6,sp,48
    2a28:	d9c15115 	stw	r7,1348(sp)
    2a2c:	00024540 	call	2454 <__sprint_r>
    2a30:	d9c15117 	ldw	r7,1348(sp)
    2a34:	1000551e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    2a38:	843ffc04 	addi	r16,r16,-16
    2a3c:	dc800e17 	ldw	r18,56(sp)
    2a40:	dc400d17 	ldw	r17,52(sp)
    2a44:	dd401904 	addi	r21,sp,100
    2a48:	9c3fed16 	blt	r19,r16,2a00 <___vfprintf_internal_r+0x554>
    2a4c:	9425883a 	add	r18,r18,r16
    2a50:	8c400044 	addi	r17,r17,1
    2a54:	008001c4 	movi	r2,7
    2a58:	af000015 	stw	fp,0(r21)
    2a5c:	ac000115 	stw	r16,4(r21)
    2a60:	dc800e15 	stw	r18,56(sp)
    2a64:	dc400d15 	stw	r17,52(sp)
    2a68:	14418216 	blt	r2,r17,3074 <___vfprintf_internal_r+0xbc8>
    2a6c:	ad400204 	addi	r21,r21,8
    2a70:	d9014c17 	ldw	r4,1328(sp)
    2a74:	2080400c 	andi	r2,r4,256
    2a78:	10004a1e 	bne	r2,zero,2ba4 <___vfprintf_internal_r+0x6f8>
    2a7c:	d9414117 	ldw	r5,1284(sp)
    2a80:	91e5883a 	add	r18,r18,r7
    2a84:	8c400044 	addi	r17,r17,1
    2a88:	008001c4 	movi	r2,7
    2a8c:	a9400015 	stw	r5,0(r21)
    2a90:	a9c00115 	stw	r7,4(r21)
    2a94:	dc800e15 	stw	r18,56(sp)
    2a98:	dc400d15 	stw	r17,52(sp)
    2a9c:	14416716 	blt	r2,r17,303c <___vfprintf_internal_r+0xb90>
    2aa0:	a8c00204 	addi	r3,r21,8
    2aa4:	d9814c17 	ldw	r6,1328(sp)
    2aa8:	3080010c 	andi	r2,r6,4
    2aac:	10002826 	beq	r2,zero,2b50 <___vfprintf_internal_r+0x6a4>
    2ab0:	d8814a17 	ldw	r2,1320(sp)
    2ab4:	d9014517 	ldw	r4,1300(sp)
    2ab8:	1121c83a 	sub	r16,r2,r4
    2abc:	0400240e 	bge	zero,r16,2b50 <___vfprintf_internal_r+0x6a4>
    2ac0:	00800404 	movi	r2,16
    2ac4:	14044f0e 	bge	r2,r16,3c04 <___vfprintf_internal_r+0x1758>
    2ac8:	dc400d17 	ldw	r17,52(sp)
    2acc:	1027883a 	mov	r19,r2
    2ad0:	07000074 	movhi	fp,1
    2ad4:	e73ca584 	addi	fp,fp,-3434
    2ad8:	050001c4 	movi	r20,7
    2adc:	00000306 	br	2aec <___vfprintf_internal_r+0x640>
    2ae0:	843ffc04 	addi	r16,r16,-16
    2ae4:	18c00204 	addi	r3,r3,8
    2ae8:	9c00110e 	bge	r19,r16,2b30 <___vfprintf_internal_r+0x684>
    2aec:	94800404 	addi	r18,r18,16
    2af0:	8c400044 	addi	r17,r17,1
    2af4:	1f000015 	stw	fp,0(r3)
    2af8:	1cc00115 	stw	r19,4(r3)
    2afc:	dc800e15 	stw	r18,56(sp)
    2b00:	dc400d15 	stw	r17,52(sp)
    2b04:	a47ff60e 	bge	r20,r17,2ae0 <___vfprintf_internal_r+0x634>
    2b08:	d9014f17 	ldw	r4,1340(sp)
    2b0c:	b00b883a 	mov	r5,r22
    2b10:	d9800c04 	addi	r6,sp,48
    2b14:	00024540 	call	2454 <__sprint_r>
    2b18:	10001c1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    2b1c:	843ffc04 	addi	r16,r16,-16
    2b20:	dc800e17 	ldw	r18,56(sp)
    2b24:	dc400d17 	ldw	r17,52(sp)
    2b28:	d8c01904 	addi	r3,sp,100
    2b2c:	9c3fef16 	blt	r19,r16,2aec <___vfprintf_internal_r+0x640>
    2b30:	9425883a 	add	r18,r18,r16
    2b34:	8c400044 	addi	r17,r17,1
    2b38:	008001c4 	movi	r2,7
    2b3c:	1f000015 	stw	fp,0(r3)
    2b40:	1c000115 	stw	r16,4(r3)
    2b44:	dc800e15 	stw	r18,56(sp)
    2b48:	dc400d15 	stw	r17,52(sp)
    2b4c:	1440cb16 	blt	r2,r17,2e7c <___vfprintf_internal_r+0x9d0>
    2b50:	d8814a17 	ldw	r2,1320(sp)
    2b54:	d9414517 	ldw	r5,1300(sp)
    2b58:	1140010e 	bge	r2,r5,2b60 <___vfprintf_internal_r+0x6b4>
    2b5c:	2805883a 	mov	r2,r5
    2b60:	d9814b17 	ldw	r6,1324(sp)
    2b64:	308d883a 	add	r6,r6,r2
    2b68:	d9814b15 	stw	r6,1324(sp)
    2b6c:	90013b1e 	bne	r18,zero,305c <___vfprintf_internal_r+0xbb0>
    2b70:	d9c14017 	ldw	r7,1280(sp)
    2b74:	dd401904 	addi	r21,sp,100
    2b78:	d8000d15 	stw	zero,52(sp)
    2b7c:	003ea706 	br	261c <___vfprintf_internal_r+0x170>
    2b80:	d8800e17 	ldw	r2,56(sp)
    2b84:	10053f1e 	bne	r2,zero,4084 <___vfprintf_internal_r+0x1bd8>
    2b88:	d8000d15 	stw	zero,52(sp)
    2b8c:	b080030b 	ldhu	r2,12(r22)
    2b90:	1080100c 	andi	r2,r2,64
    2b94:	103e8726 	beq	r2,zero,25b4 <___vfprintf_internal_r+0x108>
    2b98:	00bfffc4 	movi	r2,-1
    2b9c:	d8814b15 	stw	r2,1324(sp)
    2ba0:	003e8406 	br	25b4 <___vfprintf_internal_r+0x108>
    2ba4:	d9814d17 	ldw	r6,1332(sp)
    2ba8:	00801944 	movi	r2,101
    2bac:	11806e16 	blt	r2,r6,2d68 <___vfprintf_internal_r+0x8bc>
    2bb0:	d9414717 	ldw	r5,1308(sp)
    2bb4:	00c00044 	movi	r3,1
    2bb8:	1943430e 	bge	r3,r5,38c8 <___vfprintf_internal_r+0x141c>
    2bbc:	d8814117 	ldw	r2,1284(sp)
    2bc0:	94800044 	addi	r18,r18,1
    2bc4:	8c400044 	addi	r17,r17,1
    2bc8:	a8800015 	stw	r2,0(r21)
    2bcc:	008001c4 	movi	r2,7
    2bd0:	a8c00115 	stw	r3,4(r21)
    2bd4:	dc800e15 	stw	r18,56(sp)
    2bd8:	dc400d15 	stw	r17,52(sp)
    2bdc:	1441ca16 	blt	r2,r17,3308 <___vfprintf_internal_r+0xe5c>
    2be0:	a8c00204 	addi	r3,r21,8
    2be4:	d9014917 	ldw	r4,1316(sp)
    2be8:	00800044 	movi	r2,1
    2bec:	94800044 	addi	r18,r18,1
    2bf0:	8c400044 	addi	r17,r17,1
    2bf4:	18800115 	stw	r2,4(r3)
    2bf8:	008001c4 	movi	r2,7
    2bfc:	19000015 	stw	r4,0(r3)
    2c00:	dc800e15 	stw	r18,56(sp)
    2c04:	dc400d15 	stw	r17,52(sp)
    2c08:	1441b616 	blt	r2,r17,32e4 <___vfprintf_internal_r+0xe38>
    2c0c:	1cc00204 	addi	r19,r3,8
    2c10:	d9014217 	ldw	r4,1288(sp)
    2c14:	d9414317 	ldw	r5,1292(sp)
    2c18:	000d883a 	mov	r6,zero
    2c1c:	000f883a 	mov	r7,zero
    2c20:	000a54c0 	call	a54c <__nedf2>
    2c24:	10017426 	beq	r2,zero,31f8 <___vfprintf_internal_r+0xd4c>
    2c28:	d9414717 	ldw	r5,1308(sp)
    2c2c:	d9814117 	ldw	r6,1284(sp)
    2c30:	8c400044 	addi	r17,r17,1
    2c34:	2c85883a 	add	r2,r5,r18
    2c38:	14bfffc4 	addi	r18,r2,-1
    2c3c:	28bfffc4 	addi	r2,r5,-1
    2c40:	30c00044 	addi	r3,r6,1
    2c44:	98800115 	stw	r2,4(r19)
    2c48:	008001c4 	movi	r2,7
    2c4c:	98c00015 	stw	r3,0(r19)
    2c50:	dc800e15 	stw	r18,56(sp)
    2c54:	dc400d15 	stw	r17,52(sp)
    2c58:	14418e16 	blt	r2,r17,3294 <___vfprintf_internal_r+0xde8>
    2c5c:	9cc00204 	addi	r19,r19,8
    2c60:	d9414817 	ldw	r5,1312(sp)
    2c64:	d8800804 	addi	r2,sp,32
    2c68:	8c400044 	addi	r17,r17,1
    2c6c:	9165883a 	add	r18,r18,r5
    2c70:	98800015 	stw	r2,0(r19)
    2c74:	008001c4 	movi	r2,7
    2c78:	99400115 	stw	r5,4(r19)
    2c7c:	dc800e15 	stw	r18,56(sp)
    2c80:	dc400d15 	stw	r17,52(sp)
    2c84:	1440ed16 	blt	r2,r17,303c <___vfprintf_internal_r+0xb90>
    2c88:	98c00204 	addi	r3,r19,8
    2c8c:	003f8506 	br	2aa4 <___vfprintf_internal_r+0x5f8>
    2c90:	d9814a17 	ldw	r6,1320(sp)
    2c94:	d8814517 	ldw	r2,1300(sp)
    2c98:	30a1c83a 	sub	r16,r6,r2
    2c9c:	043f4b0e 	bge	zero,r16,29cc <___vfprintf_internal_r+0x520>
    2ca0:	00800404 	movi	r2,16
    2ca4:	1404340e 	bge	r2,r16,3d78 <___vfprintf_internal_r+0x18cc>
    2ca8:	1027883a 	mov	r19,r2
    2cac:	07000074 	movhi	fp,1
    2cb0:	e73ca184 	addi	fp,fp,-3450
    2cb4:	050001c4 	movi	r20,7
    2cb8:	00000306 	br	2cc8 <___vfprintf_internal_r+0x81c>
    2cbc:	843ffc04 	addi	r16,r16,-16
    2cc0:	ad400204 	addi	r21,r21,8
    2cc4:	9c00130e 	bge	r19,r16,2d14 <___vfprintf_internal_r+0x868>
    2cc8:	94800404 	addi	r18,r18,16
    2ccc:	8c400044 	addi	r17,r17,1
    2cd0:	af000015 	stw	fp,0(r21)
    2cd4:	acc00115 	stw	r19,4(r21)
    2cd8:	dc800e15 	stw	r18,56(sp)
    2cdc:	dc400d15 	stw	r17,52(sp)
    2ce0:	a47ff60e 	bge	r20,r17,2cbc <___vfprintf_internal_r+0x810>
    2ce4:	d9014f17 	ldw	r4,1340(sp)
    2ce8:	b00b883a 	mov	r5,r22
    2cec:	d9800c04 	addi	r6,sp,48
    2cf0:	d9c15115 	stw	r7,1348(sp)
    2cf4:	00024540 	call	2454 <__sprint_r>
    2cf8:	d9c15117 	ldw	r7,1348(sp)
    2cfc:	103fa31e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    2d00:	843ffc04 	addi	r16,r16,-16
    2d04:	dc800e17 	ldw	r18,56(sp)
    2d08:	dc400d17 	ldw	r17,52(sp)
    2d0c:	dd401904 	addi	r21,sp,100
    2d10:	9c3fed16 	blt	r19,r16,2cc8 <___vfprintf_internal_r+0x81c>
    2d14:	9425883a 	add	r18,r18,r16
    2d18:	8c400044 	addi	r17,r17,1
    2d1c:	008001c4 	movi	r2,7
    2d20:	af000015 	stw	fp,0(r21)
    2d24:	ac000115 	stw	r16,4(r21)
    2d28:	dc800e15 	stw	r18,56(sp)
    2d2c:	dc400d15 	stw	r17,52(sp)
    2d30:	14416116 	blt	r2,r17,32b8 <___vfprintf_internal_r+0xe0c>
    2d34:	ad400204 	addi	r21,r21,8
    2d38:	003f2406 	br	29cc <___vfprintf_internal_r+0x520>
    2d3c:	d9014f17 	ldw	r4,1340(sp)
    2d40:	0005f1c0 	call	5f1c <__sinit>
    2d44:	d9c15117 	ldw	r7,1348(sp)
    2d48:	003def06 	br	2508 <___vfprintf_internal_r+0x5c>
    2d4c:	d9014f17 	ldw	r4,1340(sp)
    2d50:	b00b883a 	mov	r5,r22
    2d54:	d9c15115 	stw	r7,1348(sp)
    2d58:	000437c0 	call	437c <__swsetup_r>
    2d5c:	d9c15117 	ldw	r7,1348(sp)
    2d60:	103dee26 	beq	r2,zero,251c <___vfprintf_internal_r+0x70>
    2d64:	003f8c06 	br	2b98 <___vfprintf_internal_r+0x6ec>
    2d68:	d9014217 	ldw	r4,1288(sp)
    2d6c:	d9414317 	ldw	r5,1292(sp)
    2d70:	000d883a 	mov	r6,zero
    2d74:	000f883a 	mov	r7,zero
    2d78:	000a4c40 	call	a4c4 <__eqdf2>
    2d7c:	1000f21e 	bne	r2,zero,3148 <___vfprintf_internal_r+0xc9c>
    2d80:	00800074 	movhi	r2,1
    2d84:	10bca104 	addi	r2,r2,-3452
    2d88:	94800044 	addi	r18,r18,1
    2d8c:	8c400044 	addi	r17,r17,1
    2d90:	a8800015 	stw	r2,0(r21)
    2d94:	00c00044 	movi	r3,1
    2d98:	008001c4 	movi	r2,7
    2d9c:	a8c00115 	stw	r3,4(r21)
    2da0:	dc800e15 	stw	r18,56(sp)
    2da4:	dc400d15 	stw	r17,52(sp)
    2da8:	1442fa16 	blt	r2,r17,3994 <___vfprintf_internal_r+0x14e8>
    2dac:	a8c00204 	addi	r3,r21,8
    2db0:	d8800517 	ldw	r2,20(sp)
    2db4:	d9014717 	ldw	r4,1308(sp)
    2db8:	11015c0e 	bge	r2,r4,332c <___vfprintf_internal_r+0xe80>
    2dbc:	dc400d17 	ldw	r17,52(sp)
    2dc0:	d9814917 	ldw	r6,1316(sp)
    2dc4:	00800044 	movi	r2,1
    2dc8:	94800044 	addi	r18,r18,1
    2dcc:	8c400044 	addi	r17,r17,1
    2dd0:	18800115 	stw	r2,4(r3)
    2dd4:	008001c4 	movi	r2,7
    2dd8:	19800015 	stw	r6,0(r3)
    2ddc:	dc800e15 	stw	r18,56(sp)
    2de0:	dc400d15 	stw	r17,52(sp)
    2de4:	14431016 	blt	r2,r17,3a28 <___vfprintf_internal_r+0x157c>
    2de8:	18c00204 	addi	r3,r3,8
    2dec:	d8814717 	ldw	r2,1308(sp)
    2df0:	143fffc4 	addi	r16,r2,-1
    2df4:	043f2b0e 	bge	zero,r16,2aa4 <___vfprintf_internal_r+0x5f8>
    2df8:	00800404 	movi	r2,16
    2dfc:	1402a20e 	bge	r2,r16,3888 <___vfprintf_internal_r+0x13dc>
    2e00:	dc400d17 	ldw	r17,52(sp)
    2e04:	1027883a 	mov	r19,r2
    2e08:	07000074 	movhi	fp,1
    2e0c:	e73ca184 	addi	fp,fp,-3450
    2e10:	050001c4 	movi	r20,7
    2e14:	00000306 	br	2e24 <___vfprintf_internal_r+0x978>
    2e18:	18c00204 	addi	r3,r3,8
    2e1c:	843ffc04 	addi	r16,r16,-16
    2e20:	9c029c0e 	bge	r19,r16,3894 <___vfprintf_internal_r+0x13e8>
    2e24:	94800404 	addi	r18,r18,16
    2e28:	8c400044 	addi	r17,r17,1
    2e2c:	1f000015 	stw	fp,0(r3)
    2e30:	1cc00115 	stw	r19,4(r3)
    2e34:	dc800e15 	stw	r18,56(sp)
    2e38:	dc400d15 	stw	r17,52(sp)
    2e3c:	a47ff60e 	bge	r20,r17,2e18 <___vfprintf_internal_r+0x96c>
    2e40:	d9014f17 	ldw	r4,1340(sp)
    2e44:	b00b883a 	mov	r5,r22
    2e48:	d9800c04 	addi	r6,sp,48
    2e4c:	00024540 	call	2454 <__sprint_r>
    2e50:	103f4e1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    2e54:	dc800e17 	ldw	r18,56(sp)
    2e58:	dc400d17 	ldw	r17,52(sp)
    2e5c:	d8c01904 	addi	r3,sp,100
    2e60:	003fee06 	br	2e1c <___vfprintf_internal_r+0x970>
    2e64:	d8802c0b 	ldhu	r2,176(sp)
    2e68:	00ffffc4 	movi	r3,-1
    2e6c:	d8c14b15 	stw	r3,1324(sp)
    2e70:	1080100c 	andi	r2,r2,64
    2e74:	103dcc1e 	bne	r2,zero,25a8 <___vfprintf_internal_r+0xfc>
    2e78:	003dce06 	br	25b4 <___vfprintf_internal_r+0x108>
    2e7c:	d9014f17 	ldw	r4,1340(sp)
    2e80:	b00b883a 	mov	r5,r22
    2e84:	d9800c04 	addi	r6,sp,48
    2e88:	00024540 	call	2454 <__sprint_r>
    2e8c:	103f3f1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    2e90:	dc800e17 	ldw	r18,56(sp)
    2e94:	003f2e06 	br	2b50 <___vfprintf_internal_r+0x6a4>
    2e98:	d9414c17 	ldw	r5,1328(sp)
    2e9c:	29400414 	ori	r5,r5,16
    2ea0:	d9414c15 	stw	r5,1328(sp)
    2ea4:	d9814c17 	ldw	r6,1328(sp)
    2ea8:	3080080c 	andi	r2,r6,32
    2eac:	10014f1e 	bne	r2,zero,33ec <___vfprintf_internal_r+0xf40>
    2eb0:	d8c14c17 	ldw	r3,1328(sp)
    2eb4:	1880040c 	andi	r2,r3,16
    2eb8:	1002ea1e 	bne	r2,zero,3a64 <___vfprintf_internal_r+0x15b8>
    2ebc:	d9014c17 	ldw	r4,1328(sp)
    2ec0:	2080100c 	andi	r2,r4,64
    2ec4:	1002e726 	beq	r2,zero,3a64 <___vfprintf_internal_r+0x15b8>
    2ec8:	3880000f 	ldh	r2,0(r7)
    2ecc:	39c00104 	addi	r7,r7,4
    2ed0:	d9c14015 	stw	r7,1280(sp)
    2ed4:	1023d7fa 	srai	r17,r2,31
    2ed8:	1021883a 	mov	r16,r2
    2edc:	88037216 	blt	r17,zero,3ca8 <___vfprintf_internal_r+0x17fc>
    2ee0:	01000044 	movi	r4,1
    2ee4:	98000416 	blt	r19,zero,2ef8 <___vfprintf_internal_r+0xa4c>
    2ee8:	d8c14c17 	ldw	r3,1328(sp)
    2eec:	00bfdfc4 	movi	r2,-129
    2ef0:	1886703a 	and	r3,r3,r2
    2ef4:	d8c14c15 	stw	r3,1328(sp)
    2ef8:	8444b03a 	or	r2,r16,r17
    2efc:	1002261e 	bne	r2,zero,3798 <___vfprintf_internal_r+0x12ec>
    2f00:	9802251e 	bne	r19,zero,3798 <___vfprintf_internal_r+0x12ec>
    2f04:	20803fcc 	andi	r2,r4,255
    2f08:	10029b26 	beq	r2,zero,3978 <___vfprintf_internal_r+0x14cc>
    2f0c:	d8c01904 	addi	r3,sp,100
    2f10:	dd000f04 	addi	r20,sp,60
    2f14:	d8c14115 	stw	r3,1284(sp)
    2f18:	d8c14117 	ldw	r3,1284(sp)
    2f1c:	dcc14515 	stw	r19,1300(sp)
    2f20:	a0c5c83a 	sub	r2,r20,r3
    2f24:	11c00a04 	addi	r7,r2,40
    2f28:	99c0010e 	bge	r19,r7,2f30 <___vfprintf_internal_r+0xa84>
    2f2c:	d9c14515 	stw	r7,1300(sp)
    2f30:	dcc14615 	stw	r19,1304(sp)
    2f34:	d8800407 	ldb	r2,16(sp)
    2f38:	103e4c26 	beq	r2,zero,286c <___vfprintf_internal_r+0x3c0>
    2f3c:	d8814517 	ldw	r2,1300(sp)
    2f40:	10800044 	addi	r2,r2,1
    2f44:	d8814515 	stw	r2,1300(sp)
    2f48:	003e4806 	br	286c <___vfprintf_internal_r+0x3c0>
    2f4c:	d9814c17 	ldw	r6,1328(sp)
    2f50:	31800414 	ori	r6,r6,16
    2f54:	d9814c15 	stw	r6,1328(sp)
    2f58:	d8c14c17 	ldw	r3,1328(sp)
    2f5c:	1880080c 	andi	r2,r3,32
    2f60:	1001271e 	bne	r2,zero,3400 <___vfprintf_internal_r+0xf54>
    2f64:	d9414c17 	ldw	r5,1328(sp)
    2f68:	2880040c 	andi	r2,r5,16
    2f6c:	1002b61e 	bne	r2,zero,3a48 <___vfprintf_internal_r+0x159c>
    2f70:	d9814c17 	ldw	r6,1328(sp)
    2f74:	3080100c 	andi	r2,r6,64
    2f78:	1002b326 	beq	r2,zero,3a48 <___vfprintf_internal_r+0x159c>
    2f7c:	3c00000b 	ldhu	r16,0(r7)
    2f80:	0009883a 	mov	r4,zero
    2f84:	39c00104 	addi	r7,r7,4
    2f88:	0023883a 	mov	r17,zero
    2f8c:	d9c14015 	stw	r7,1280(sp)
    2f90:	d8000405 	stb	zero,16(sp)
    2f94:	003fd306 	br	2ee4 <___vfprintf_internal_r+0xa38>
    2f98:	d9014c17 	ldw	r4,1328(sp)
    2f9c:	21000414 	ori	r4,r4,16
    2fa0:	d9014c15 	stw	r4,1328(sp)
    2fa4:	d9414c17 	ldw	r5,1328(sp)
    2fa8:	2880080c 	andi	r2,r5,32
    2fac:	1001081e 	bne	r2,zero,33d0 <___vfprintf_internal_r+0xf24>
    2fb0:	d8c14c17 	ldw	r3,1328(sp)
    2fb4:	1880040c 	andi	r2,r3,16
    2fb8:	1002b01e 	bne	r2,zero,3a7c <___vfprintf_internal_r+0x15d0>
    2fbc:	d9014c17 	ldw	r4,1328(sp)
    2fc0:	2080100c 	andi	r2,r4,64
    2fc4:	1002ad26 	beq	r2,zero,3a7c <___vfprintf_internal_r+0x15d0>
    2fc8:	3c00000b 	ldhu	r16,0(r7)
    2fcc:	01000044 	movi	r4,1
    2fd0:	39c00104 	addi	r7,r7,4
    2fd4:	0023883a 	mov	r17,zero
    2fd8:	d9c14015 	stw	r7,1280(sp)
    2fdc:	d8000405 	stb	zero,16(sp)
    2fe0:	003fc006 	br	2ee4 <___vfprintf_internal_r+0xa38>
    2fe4:	d9014f17 	ldw	r4,1340(sp)
    2fe8:	b00b883a 	mov	r5,r22
    2fec:	d9800c04 	addi	r6,sp,48
    2ff0:	00024540 	call	2454 <__sprint_r>
    2ff4:	103ee51e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    2ff8:	dc800e17 	ldw	r18,56(sp)
    2ffc:	d8c01904 	addi	r3,sp,100
    3000:	d9814c17 	ldw	r6,1328(sp)
    3004:	3080004c 	andi	r2,r6,1
    3008:	1005003a 	cmpeq	r2,r2,zero
    300c:	103ea51e 	bne	r2,zero,2aa4 <___vfprintf_internal_r+0x5f8>
    3010:	00800044 	movi	r2,1
    3014:	dc400d17 	ldw	r17,52(sp)
    3018:	18800115 	stw	r2,4(r3)
    301c:	d8814917 	ldw	r2,1316(sp)
    3020:	94800044 	addi	r18,r18,1
    3024:	8c400044 	addi	r17,r17,1
    3028:	18800015 	stw	r2,0(r3)
    302c:	008001c4 	movi	r2,7
    3030:	dc800e15 	stw	r18,56(sp)
    3034:	dc400d15 	stw	r17,52(sp)
    3038:	14421e0e 	bge	r2,r17,38b4 <___vfprintf_internal_r+0x1408>
    303c:	d9014f17 	ldw	r4,1340(sp)
    3040:	b00b883a 	mov	r5,r22
    3044:	d9800c04 	addi	r6,sp,48
    3048:	00024540 	call	2454 <__sprint_r>
    304c:	103ecf1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3050:	dc800e17 	ldw	r18,56(sp)
    3054:	d8c01904 	addi	r3,sp,100
    3058:	003e9206 	br	2aa4 <___vfprintf_internal_r+0x5f8>
    305c:	d9014f17 	ldw	r4,1340(sp)
    3060:	b00b883a 	mov	r5,r22
    3064:	d9800c04 	addi	r6,sp,48
    3068:	00024540 	call	2454 <__sprint_r>
    306c:	103ec026 	beq	r2,zero,2b70 <___vfprintf_internal_r+0x6c4>
    3070:	003ec606 	br	2b8c <___vfprintf_internal_r+0x6e0>
    3074:	d9014f17 	ldw	r4,1340(sp)
    3078:	b00b883a 	mov	r5,r22
    307c:	d9800c04 	addi	r6,sp,48
    3080:	d9c15115 	stw	r7,1348(sp)
    3084:	00024540 	call	2454 <__sprint_r>
    3088:	d9c15117 	ldw	r7,1348(sp)
    308c:	103ebf1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3090:	dc800e17 	ldw	r18,56(sp)
    3094:	dc400d17 	ldw	r17,52(sp)
    3098:	dd401904 	addi	r21,sp,100
    309c:	003e7406 	br	2a70 <___vfprintf_internal_r+0x5c4>
    30a0:	d9014f17 	ldw	r4,1340(sp)
    30a4:	b00b883a 	mov	r5,r22
    30a8:	d9800c04 	addi	r6,sp,48
    30ac:	d9c15115 	stw	r7,1348(sp)
    30b0:	00024540 	call	2454 <__sprint_r>
    30b4:	d9c15117 	ldw	r7,1348(sp)
    30b8:	103eb41e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    30bc:	dd401904 	addi	r21,sp,100
    30c0:	003d6d06 	br	2678 <___vfprintf_internal_r+0x1cc>
    30c4:	d9014f17 	ldw	r4,1340(sp)
    30c8:	b00b883a 	mov	r5,r22
    30cc:	d9800c04 	addi	r6,sp,48
    30d0:	d9c15115 	stw	r7,1348(sp)
    30d4:	00024540 	call	2454 <__sprint_r>
    30d8:	d9c15117 	ldw	r7,1348(sp)
    30dc:	103eab1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    30e0:	dc800e17 	ldw	r18,56(sp)
    30e4:	dc400d17 	ldw	r17,52(sp)
    30e8:	dd401904 	addi	r21,sp,100
    30ec:	003e3406 	br	29c0 <___vfprintf_internal_r+0x514>
    30f0:	d9014f17 	ldw	r4,1340(sp)
    30f4:	b00b883a 	mov	r5,r22
    30f8:	d9800c04 	addi	r6,sp,48
    30fc:	d9c15115 	stw	r7,1348(sp)
    3100:	00024540 	call	2454 <__sprint_r>
    3104:	d9c15117 	ldw	r7,1348(sp)
    3108:	103ea01e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    310c:	dc800e17 	ldw	r18,56(sp)
    3110:	dc400d17 	ldw	r17,52(sp)
    3114:	dd401904 	addi	r21,sp,100
    3118:	003e1c06 	br	298c <___vfprintf_internal_r+0x4e0>
    311c:	d9014f17 	ldw	r4,1340(sp)
    3120:	b00b883a 	mov	r5,r22
    3124:	d9800c04 	addi	r6,sp,48
    3128:	d9c15115 	stw	r7,1348(sp)
    312c:	00024540 	call	2454 <__sprint_r>
    3130:	d9c15117 	ldw	r7,1348(sp)
    3134:	103e951e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3138:	dc800e17 	ldw	r18,56(sp)
    313c:	dc400d17 	ldw	r17,52(sp)
    3140:	dd401904 	addi	r21,sp,100
    3144:	003e0406 	br	2958 <___vfprintf_internal_r+0x4ac>
    3148:	d9000517 	ldw	r4,20(sp)
    314c:	0102520e 	bge	zero,r4,3a98 <___vfprintf_internal_r+0x15ec>
    3150:	d9814717 	ldw	r6,1308(sp)
    3154:	21807a16 	blt	r4,r6,3340 <___vfprintf_internal_r+0xe94>
    3158:	d8814117 	ldw	r2,1284(sp)
    315c:	91a5883a 	add	r18,r18,r6
    3160:	8c400044 	addi	r17,r17,1
    3164:	a8800015 	stw	r2,0(r21)
    3168:	008001c4 	movi	r2,7
    316c:	a9800115 	stw	r6,4(r21)
    3170:	dc800e15 	stw	r18,56(sp)
    3174:	dc400d15 	stw	r17,52(sp)
    3178:	1442f616 	blt	r2,r17,3d54 <___vfprintf_internal_r+0x18a8>
    317c:	a8c00204 	addi	r3,r21,8
    3180:	d9414717 	ldw	r5,1308(sp)
    3184:	2161c83a 	sub	r16,r4,r5
    3188:	043f9d0e 	bge	zero,r16,3000 <___vfprintf_internal_r+0xb54>
    318c:	00800404 	movi	r2,16
    3190:	1402130e 	bge	r2,r16,39e0 <___vfprintf_internal_r+0x1534>
    3194:	dc400d17 	ldw	r17,52(sp)
    3198:	1027883a 	mov	r19,r2
    319c:	07000074 	movhi	fp,1
    31a0:	e73ca184 	addi	fp,fp,-3450
    31a4:	050001c4 	movi	r20,7
    31a8:	00000306 	br	31b8 <___vfprintf_internal_r+0xd0c>
    31ac:	18c00204 	addi	r3,r3,8
    31b0:	843ffc04 	addi	r16,r16,-16
    31b4:	9c020d0e 	bge	r19,r16,39ec <___vfprintf_internal_r+0x1540>
    31b8:	94800404 	addi	r18,r18,16
    31bc:	8c400044 	addi	r17,r17,1
    31c0:	1f000015 	stw	fp,0(r3)
    31c4:	1cc00115 	stw	r19,4(r3)
    31c8:	dc800e15 	stw	r18,56(sp)
    31cc:	dc400d15 	stw	r17,52(sp)
    31d0:	a47ff60e 	bge	r20,r17,31ac <___vfprintf_internal_r+0xd00>
    31d4:	d9014f17 	ldw	r4,1340(sp)
    31d8:	b00b883a 	mov	r5,r22
    31dc:	d9800c04 	addi	r6,sp,48
    31e0:	00024540 	call	2454 <__sprint_r>
    31e4:	103e691e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    31e8:	dc800e17 	ldw	r18,56(sp)
    31ec:	dc400d17 	ldw	r17,52(sp)
    31f0:	d8c01904 	addi	r3,sp,100
    31f4:	003fee06 	br	31b0 <___vfprintf_internal_r+0xd04>
    31f8:	d8814717 	ldw	r2,1308(sp)
    31fc:	143fffc4 	addi	r16,r2,-1
    3200:	043e970e 	bge	zero,r16,2c60 <___vfprintf_internal_r+0x7b4>
    3204:	00800404 	movi	r2,16
    3208:	1400180e 	bge	r2,r16,326c <___vfprintf_internal_r+0xdc0>
    320c:	1029883a 	mov	r20,r2
    3210:	07000074 	movhi	fp,1
    3214:	e73ca184 	addi	fp,fp,-3450
    3218:	054001c4 	movi	r21,7
    321c:	00000306 	br	322c <___vfprintf_internal_r+0xd80>
    3220:	9cc00204 	addi	r19,r19,8
    3224:	843ffc04 	addi	r16,r16,-16
    3228:	a400120e 	bge	r20,r16,3274 <___vfprintf_internal_r+0xdc8>
    322c:	94800404 	addi	r18,r18,16
    3230:	8c400044 	addi	r17,r17,1
    3234:	9f000015 	stw	fp,0(r19)
    3238:	9d000115 	stw	r20,4(r19)
    323c:	dc800e15 	stw	r18,56(sp)
    3240:	dc400d15 	stw	r17,52(sp)
    3244:	ac7ff60e 	bge	r21,r17,3220 <___vfprintf_internal_r+0xd74>
    3248:	d9014f17 	ldw	r4,1340(sp)
    324c:	b00b883a 	mov	r5,r22
    3250:	d9800c04 	addi	r6,sp,48
    3254:	00024540 	call	2454 <__sprint_r>
    3258:	103e4c1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    325c:	dc800e17 	ldw	r18,56(sp)
    3260:	dc400d17 	ldw	r17,52(sp)
    3264:	dcc01904 	addi	r19,sp,100
    3268:	003fee06 	br	3224 <___vfprintf_internal_r+0xd78>
    326c:	07000074 	movhi	fp,1
    3270:	e73ca184 	addi	fp,fp,-3450
    3274:	9425883a 	add	r18,r18,r16
    3278:	8c400044 	addi	r17,r17,1
    327c:	008001c4 	movi	r2,7
    3280:	9f000015 	stw	fp,0(r19)
    3284:	9c000115 	stw	r16,4(r19)
    3288:	dc800e15 	stw	r18,56(sp)
    328c:	dc400d15 	stw	r17,52(sp)
    3290:	147e720e 	bge	r2,r17,2c5c <___vfprintf_internal_r+0x7b0>
    3294:	d9014f17 	ldw	r4,1340(sp)
    3298:	b00b883a 	mov	r5,r22
    329c:	d9800c04 	addi	r6,sp,48
    32a0:	00024540 	call	2454 <__sprint_r>
    32a4:	103e391e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    32a8:	dc800e17 	ldw	r18,56(sp)
    32ac:	dc400d17 	ldw	r17,52(sp)
    32b0:	dcc01904 	addi	r19,sp,100
    32b4:	003e6a06 	br	2c60 <___vfprintf_internal_r+0x7b4>
    32b8:	d9014f17 	ldw	r4,1340(sp)
    32bc:	b00b883a 	mov	r5,r22
    32c0:	d9800c04 	addi	r6,sp,48
    32c4:	d9c15115 	stw	r7,1348(sp)
    32c8:	00024540 	call	2454 <__sprint_r>
    32cc:	d9c15117 	ldw	r7,1348(sp)
    32d0:	103e2e1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    32d4:	dc800e17 	ldw	r18,56(sp)
    32d8:	dc400d17 	ldw	r17,52(sp)
    32dc:	dd401904 	addi	r21,sp,100
    32e0:	003dba06 	br	29cc <___vfprintf_internal_r+0x520>
    32e4:	d9014f17 	ldw	r4,1340(sp)
    32e8:	b00b883a 	mov	r5,r22
    32ec:	d9800c04 	addi	r6,sp,48
    32f0:	00024540 	call	2454 <__sprint_r>
    32f4:	103e251e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    32f8:	dc800e17 	ldw	r18,56(sp)
    32fc:	dc400d17 	ldw	r17,52(sp)
    3300:	dcc01904 	addi	r19,sp,100
    3304:	003e4206 	br	2c10 <___vfprintf_internal_r+0x764>
    3308:	d9014f17 	ldw	r4,1340(sp)
    330c:	b00b883a 	mov	r5,r22
    3310:	d9800c04 	addi	r6,sp,48
    3314:	00024540 	call	2454 <__sprint_r>
    3318:	103e1c1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    331c:	dc800e17 	ldw	r18,56(sp)
    3320:	dc400d17 	ldw	r17,52(sp)
    3324:	d8c01904 	addi	r3,sp,100
    3328:	003e2e06 	br	2be4 <___vfprintf_internal_r+0x738>
    332c:	d9414c17 	ldw	r5,1328(sp)
    3330:	2880004c 	andi	r2,r5,1
    3334:	1005003a 	cmpeq	r2,r2,zero
    3338:	103dda1e 	bne	r2,zero,2aa4 <___vfprintf_internal_r+0x5f8>
    333c:	003e9f06 	br	2dbc <___vfprintf_internal_r+0x910>
    3340:	d8c14117 	ldw	r3,1284(sp)
    3344:	9125883a 	add	r18,r18,r4
    3348:	8c400044 	addi	r17,r17,1
    334c:	008001c4 	movi	r2,7
    3350:	a8c00015 	stw	r3,0(r21)
    3354:	a9000115 	stw	r4,4(r21)
    3358:	dc800e15 	stw	r18,56(sp)
    335c:	dc400d15 	stw	r17,52(sp)
    3360:	14426616 	blt	r2,r17,3cfc <___vfprintf_internal_r+0x1850>
    3364:	a8c00204 	addi	r3,r21,8
    3368:	d9414917 	ldw	r5,1316(sp)
    336c:	00800044 	movi	r2,1
    3370:	94800044 	addi	r18,r18,1
    3374:	8c400044 	addi	r17,r17,1
    3378:	18800115 	stw	r2,4(r3)
    337c:	008001c4 	movi	r2,7
    3380:	19400015 	stw	r5,0(r3)
    3384:	dc800e15 	stw	r18,56(sp)
    3388:	dc400d15 	stw	r17,52(sp)
    338c:	2021883a 	mov	r16,r4
    3390:	14425016 	blt	r2,r17,3cd4 <___vfprintf_internal_r+0x1828>
    3394:	19400204 	addi	r5,r3,8
    3398:	d9814717 	ldw	r6,1308(sp)
    339c:	8c400044 	addi	r17,r17,1
    33a0:	dc400d15 	stw	r17,52(sp)
    33a4:	3107c83a 	sub	r3,r6,r4
    33a8:	d9014117 	ldw	r4,1284(sp)
    33ac:	90e5883a 	add	r18,r18,r3
    33b0:	28c00115 	stw	r3,4(r5)
    33b4:	8105883a 	add	r2,r16,r4
    33b8:	28800015 	stw	r2,0(r5)
    33bc:	008001c4 	movi	r2,7
    33c0:	dc800e15 	stw	r18,56(sp)
    33c4:	147f1d16 	blt	r2,r17,303c <___vfprintf_internal_r+0xb90>
    33c8:	28c00204 	addi	r3,r5,8
    33cc:	003db506 	br	2aa4 <___vfprintf_internal_r+0x5f8>
    33d0:	3c000017 	ldw	r16,0(r7)
    33d4:	3c400117 	ldw	r17,4(r7)
    33d8:	39800204 	addi	r6,r7,8
    33dc:	01000044 	movi	r4,1
    33e0:	d9814015 	stw	r6,1280(sp)
    33e4:	d8000405 	stb	zero,16(sp)
    33e8:	003ebe06 	br	2ee4 <___vfprintf_internal_r+0xa38>
    33ec:	3c000017 	ldw	r16,0(r7)
    33f0:	3c400117 	ldw	r17,4(r7)
    33f4:	38800204 	addi	r2,r7,8
    33f8:	d8814015 	stw	r2,1280(sp)
    33fc:	003eb706 	br	2edc <___vfprintf_internal_r+0xa30>
    3400:	3c000017 	ldw	r16,0(r7)
    3404:	3c400117 	ldw	r17,4(r7)
    3408:	39000204 	addi	r4,r7,8
    340c:	d9014015 	stw	r4,1280(sp)
    3410:	0009883a 	mov	r4,zero
    3414:	d8000405 	stb	zero,16(sp)
    3418:	003eb206 	br	2ee4 <___vfprintf_internal_r+0xa38>
    341c:	38c00017 	ldw	r3,0(r7)
    3420:	39c00104 	addi	r7,r7,4
    3424:	d8c14a15 	stw	r3,1320(sp)
    3428:	1800d10e 	bge	r3,zero,3770 <___vfprintf_internal_r+0x12c4>
    342c:	00c7c83a 	sub	r3,zero,r3
    3430:	d8c14a15 	stw	r3,1320(sp)
    3434:	d9014c17 	ldw	r4,1328(sp)
    3438:	b8c00007 	ldb	r3,0(r23)
    343c:	21000114 	ori	r4,r4,4
    3440:	d9014c15 	stw	r4,1328(sp)
    3444:	003c9806 	br	26a8 <___vfprintf_internal_r+0x1fc>
    3448:	d9814c17 	ldw	r6,1328(sp)
    344c:	3080080c 	andi	r2,r6,32
    3450:	1001f026 	beq	r2,zero,3c14 <___vfprintf_internal_r+0x1768>
    3454:	d9014b17 	ldw	r4,1324(sp)
    3458:	38800017 	ldw	r2,0(r7)
    345c:	39c00104 	addi	r7,r7,4
    3460:	d9c14015 	stw	r7,1280(sp)
    3464:	2007d7fa 	srai	r3,r4,31
    3468:	d9c14017 	ldw	r7,1280(sp)
    346c:	11000015 	stw	r4,0(r2)
    3470:	10c00115 	stw	r3,4(r2)
    3474:	003c6906 	br	261c <___vfprintf_internal_r+0x170>
    3478:	b8c00007 	ldb	r3,0(r23)
    347c:	00801b04 	movi	r2,108
    3480:	18824f26 	beq	r3,r2,3dc0 <___vfprintf_internal_r+0x1914>
    3484:	d9414c17 	ldw	r5,1328(sp)
    3488:	29400414 	ori	r5,r5,16
    348c:	d9414c15 	stw	r5,1328(sp)
    3490:	003c8506 	br	26a8 <___vfprintf_internal_r+0x1fc>
    3494:	d9814c17 	ldw	r6,1328(sp)
    3498:	b8c00007 	ldb	r3,0(r23)
    349c:	31800814 	ori	r6,r6,32
    34a0:	d9814c15 	stw	r6,1328(sp)
    34a4:	003c8006 	br	26a8 <___vfprintf_internal_r+0x1fc>
    34a8:	d8814c17 	ldw	r2,1328(sp)
    34ac:	3c000017 	ldw	r16,0(r7)
    34b0:	00c01e04 	movi	r3,120
    34b4:	10800094 	ori	r2,r2,2
    34b8:	d8814c15 	stw	r2,1328(sp)
    34bc:	39c00104 	addi	r7,r7,4
    34c0:	01400074 	movhi	r5,1
    34c4:	297c8a04 	addi	r5,r5,-3544
    34c8:	00800c04 	movi	r2,48
    34cc:	0023883a 	mov	r17,zero
    34d0:	01000084 	movi	r4,2
    34d4:	d9c14015 	stw	r7,1280(sp)
    34d8:	d8c14d15 	stw	r3,1332(sp)
    34dc:	d9414415 	stw	r5,1296(sp)
    34e0:	d8800445 	stb	r2,17(sp)
    34e4:	d8c00485 	stb	r3,18(sp)
    34e8:	d8000405 	stb	zero,16(sp)
    34ec:	003e7d06 	br	2ee4 <___vfprintf_internal_r+0xa38>
    34f0:	d8814c17 	ldw	r2,1328(sp)
    34f4:	b8c00007 	ldb	r3,0(r23)
    34f8:	10801014 	ori	r2,r2,64
    34fc:	d8814c15 	stw	r2,1328(sp)
    3500:	003c6906 	br	26a8 <___vfprintf_internal_r+0x1fc>
    3504:	d9414c17 	ldw	r5,1328(sp)
    3508:	2880020c 	andi	r2,r5,8
    350c:	1001df26 	beq	r2,zero,3c8c <___vfprintf_internal_r+0x17e0>
    3510:	39800017 	ldw	r6,0(r7)
    3514:	38800204 	addi	r2,r7,8
    3518:	d8814015 	stw	r2,1280(sp)
    351c:	d9814215 	stw	r6,1288(sp)
    3520:	39c00117 	ldw	r7,4(r7)
    3524:	d9c14315 	stw	r7,1292(sp)
    3528:	d9014217 	ldw	r4,1288(sp)
    352c:	d9414317 	ldw	r5,1292(sp)
    3530:	000870c0 	call	870c <__isinfd>
    3534:	10021726 	beq	r2,zero,3d94 <___vfprintf_internal_r+0x18e8>
    3538:	d9014217 	ldw	r4,1288(sp)
    353c:	d9414317 	ldw	r5,1292(sp)
    3540:	000d883a 	mov	r6,zero
    3544:	000f883a 	mov	r7,zero
    3548:	000a6e40 	call	a6e4 <__ltdf2>
    354c:	1002ca16 	blt	r2,zero,4078 <___vfprintf_internal_r+0x1bcc>
    3550:	d9414d17 	ldw	r5,1332(sp)
    3554:	008011c4 	movi	r2,71
    3558:	11420a16 	blt	r2,r5,3d84 <___vfprintf_internal_r+0x18d8>
    355c:	01800074 	movhi	r6,1
    3560:	31bc8f04 	addi	r6,r6,-3524
    3564:	d9814115 	stw	r6,1284(sp)
    3568:	d9014c17 	ldw	r4,1328(sp)
    356c:	00c000c4 	movi	r3,3
    3570:	00bfdfc4 	movi	r2,-129
    3574:	2088703a 	and	r4,r4,r2
    3578:	180f883a 	mov	r7,r3
    357c:	d8c14515 	stw	r3,1300(sp)
    3580:	d9014c15 	stw	r4,1328(sp)
    3584:	d8014615 	stw	zero,1304(sp)
    3588:	003e6a06 	br	2f34 <___vfprintf_internal_r+0xa88>
    358c:	38800017 	ldw	r2,0(r7)
    3590:	00c00044 	movi	r3,1
    3594:	39c00104 	addi	r7,r7,4
    3598:	d9c14015 	stw	r7,1280(sp)
    359c:	d9000f04 	addi	r4,sp,60
    35a0:	180f883a 	mov	r7,r3
    35a4:	d8c14515 	stw	r3,1300(sp)
    35a8:	d9014115 	stw	r4,1284(sp)
    35ac:	d8800f05 	stb	r2,60(sp)
    35b0:	d8000405 	stb	zero,16(sp)
    35b4:	003cac06 	br	2868 <___vfprintf_internal_r+0x3bc>
    35b8:	01400074 	movhi	r5,1
    35bc:	297c9504 	addi	r5,r5,-3500
    35c0:	d9414415 	stw	r5,1296(sp)
    35c4:	d9814c17 	ldw	r6,1328(sp)
    35c8:	3080080c 	andi	r2,r6,32
    35cc:	1000f926 	beq	r2,zero,39b4 <___vfprintf_internal_r+0x1508>
    35d0:	3c000017 	ldw	r16,0(r7)
    35d4:	3c400117 	ldw	r17,4(r7)
    35d8:	38800204 	addi	r2,r7,8
    35dc:	d8814015 	stw	r2,1280(sp)
    35e0:	d9414c17 	ldw	r5,1328(sp)
    35e4:	2880004c 	andi	r2,r5,1
    35e8:	1005003a 	cmpeq	r2,r2,zero
    35ec:	1000b31e 	bne	r2,zero,38bc <___vfprintf_internal_r+0x1410>
    35f0:	8444b03a 	or	r2,r16,r17
    35f4:	1000b126 	beq	r2,zero,38bc <___vfprintf_internal_r+0x1410>
    35f8:	d9814d17 	ldw	r6,1332(sp)
    35fc:	29400094 	ori	r5,r5,2
    3600:	00800c04 	movi	r2,48
    3604:	01000084 	movi	r4,2
    3608:	d9414c15 	stw	r5,1328(sp)
    360c:	d8800445 	stb	r2,17(sp)
    3610:	d9800485 	stb	r6,18(sp)
    3614:	d8000405 	stb	zero,16(sp)
    3618:	003e3206 	br	2ee4 <___vfprintf_internal_r+0xa38>
    361c:	01800074 	movhi	r6,1
    3620:	31bc8a04 	addi	r6,r6,-3544
    3624:	d9814415 	stw	r6,1296(sp)
    3628:	003fe606 	br	35c4 <___vfprintf_internal_r+0x1118>
    362c:	00800ac4 	movi	r2,43
    3630:	d8800405 	stb	r2,16(sp)
    3634:	b8c00007 	ldb	r3,0(r23)
    3638:	003c1b06 	br	26a8 <___vfprintf_internal_r+0x1fc>
    363c:	d8814c17 	ldw	r2,1328(sp)
    3640:	b8c00007 	ldb	r3,0(r23)
    3644:	10800054 	ori	r2,r2,1
    3648:	d8814c15 	stw	r2,1328(sp)
    364c:	003c1606 	br	26a8 <___vfprintf_internal_r+0x1fc>
    3650:	d8800407 	ldb	r2,16(sp)
    3654:	1000461e 	bne	r2,zero,3770 <___vfprintf_internal_r+0x12c4>
    3658:	00800804 	movi	r2,32
    365c:	d8800405 	stb	r2,16(sp)
    3660:	b8c00007 	ldb	r3,0(r23)
    3664:	003c1006 	br	26a8 <___vfprintf_internal_r+0x1fc>
    3668:	d9814c17 	ldw	r6,1328(sp)
    366c:	b8c00007 	ldb	r3,0(r23)
    3670:	31800214 	ori	r6,r6,8
    3674:	d9814c15 	stw	r6,1328(sp)
    3678:	003c0b06 	br	26a8 <___vfprintf_internal_r+0x1fc>
    367c:	0007883a 	mov	r3,zero
    3680:	01000244 	movi	r4,9
    3684:	188002a4 	muli	r2,r3,10
    3688:	b8c00007 	ldb	r3,0(r23)
    368c:	d9814d17 	ldw	r6,1332(sp)
    3690:	bdc00044 	addi	r23,r23,1
    3694:	d8c14d15 	stw	r3,1332(sp)
    3698:	d9414d17 	ldw	r5,1332(sp)
    369c:	3085883a 	add	r2,r6,r2
    36a0:	10fff404 	addi	r3,r2,-48
    36a4:	28bff404 	addi	r2,r5,-48
    36a8:	20bff62e 	bgeu	r4,r2,3684 <___vfprintf_internal_r+0x11d8>
    36ac:	d8c14a15 	stw	r3,1320(sp)
    36b0:	003bff06 	br	26b0 <___vfprintf_internal_r+0x204>
    36b4:	d9414c17 	ldw	r5,1328(sp)
    36b8:	b8c00007 	ldb	r3,0(r23)
    36bc:	29402014 	ori	r5,r5,128
    36c0:	d9414c15 	stw	r5,1328(sp)
    36c4:	003bf806 	br	26a8 <___vfprintf_internal_r+0x1fc>
    36c8:	b8c00007 	ldb	r3,0(r23)
    36cc:	00800a84 	movi	r2,42
    36d0:	bdc00044 	addi	r23,r23,1
    36d4:	18831526 	beq	r3,r2,432c <___vfprintf_internal_r+0x1e80>
    36d8:	d8c14d15 	stw	r3,1332(sp)
    36dc:	18bff404 	addi	r2,r3,-48
    36e0:	00c00244 	movi	r3,9
    36e4:	18827836 	bltu	r3,r2,40c8 <___vfprintf_internal_r+0x1c1c>
    36e8:	000d883a 	mov	r6,zero
    36ec:	308002a4 	muli	r2,r6,10
    36f0:	b9800007 	ldb	r6,0(r23)
    36f4:	d9414d17 	ldw	r5,1332(sp)
    36f8:	bdc00044 	addi	r23,r23,1
    36fc:	d9814d15 	stw	r6,1332(sp)
    3700:	d9014d17 	ldw	r4,1332(sp)
    3704:	1145883a 	add	r2,r2,r5
    3708:	11bff404 	addi	r6,r2,-48
    370c:	20bff404 	addi	r2,r4,-48
    3710:	18bff62e 	bgeu	r3,r2,36ec <___vfprintf_internal_r+0x1240>
    3714:	3027883a 	mov	r19,r6
    3718:	303be50e 	bge	r6,zero,26b0 <___vfprintf_internal_r+0x204>
    371c:	04ffffc4 	movi	r19,-1
    3720:	003be306 	br	26b0 <___vfprintf_internal_r+0x204>
    3724:	d8000405 	stb	zero,16(sp)
    3728:	39800017 	ldw	r6,0(r7)
    372c:	39c00104 	addi	r7,r7,4
    3730:	d9c14015 	stw	r7,1280(sp)
    3734:	d9814115 	stw	r6,1284(sp)
    3738:	3001c926 	beq	r6,zero,3e60 <___vfprintf_internal_r+0x19b4>
    373c:	98000e16 	blt	r19,zero,3778 <___vfprintf_internal_r+0x12cc>
    3740:	d9014117 	ldw	r4,1284(sp)
    3744:	000b883a 	mov	r5,zero
    3748:	980d883a 	mov	r6,r19
    374c:	0006e280 	call	6e28 <memchr>
    3750:	10025926 	beq	r2,zero,40b8 <___vfprintf_internal_r+0x1c0c>
    3754:	d8c14117 	ldw	r3,1284(sp)
    3758:	10cfc83a 	sub	r7,r2,r3
    375c:	99c19e16 	blt	r19,r7,3dd8 <___vfprintf_internal_r+0x192c>
    3760:	d9c14515 	stw	r7,1300(sp)
    3764:	38000916 	blt	r7,zero,378c <___vfprintf_internal_r+0x12e0>
    3768:	d8014615 	stw	zero,1304(sp)
    376c:	003df106 	br	2f34 <___vfprintf_internal_r+0xa88>
    3770:	b8c00007 	ldb	r3,0(r23)
    3774:	003bcc06 	br	26a8 <___vfprintf_internal_r+0x1fc>
    3778:	d9014117 	ldw	r4,1284(sp)
    377c:	00023e00 	call	23e0 <strlen>
    3780:	d8814515 	stw	r2,1300(sp)
    3784:	100f883a 	mov	r7,r2
    3788:	103ff70e 	bge	r2,zero,3768 <___vfprintf_internal_r+0x12bc>
    378c:	d8014515 	stw	zero,1300(sp)
    3790:	d8014615 	stw	zero,1304(sp)
    3794:	003de706 	br	2f34 <___vfprintf_internal_r+0xa88>
    3798:	20c03fcc 	andi	r3,r4,255
    379c:	00800044 	movi	r2,1
    37a0:	18802d26 	beq	r3,r2,3858 <___vfprintf_internal_r+0x13ac>
    37a4:	18800e36 	bltu	r3,r2,37e0 <___vfprintf_internal_r+0x1334>
    37a8:	00800084 	movi	r2,2
    37ac:	1880fa26 	beq	r3,r2,3b98 <___vfprintf_internal_r+0x16ec>
    37b0:	01000074 	movhi	r4,1
    37b4:	213c9a04 	addi	r4,r4,-3480
    37b8:	00023e00 	call	23e0 <strlen>
    37bc:	100f883a 	mov	r7,r2
    37c0:	dcc14515 	stw	r19,1300(sp)
    37c4:	9880010e 	bge	r19,r2,37cc <___vfprintf_internal_r+0x1320>
    37c8:	d8814515 	stw	r2,1300(sp)
    37cc:	00800074 	movhi	r2,1
    37d0:	10bc9a04 	addi	r2,r2,-3480
    37d4:	dcc14615 	stw	r19,1304(sp)
    37d8:	d8814115 	stw	r2,1284(sp)
    37dc:	003dd506 	br	2f34 <___vfprintf_internal_r+0xa88>
    37e0:	d9401904 	addi	r5,sp,100
    37e4:	dd000f04 	addi	r20,sp,60
    37e8:	d9414115 	stw	r5,1284(sp)
    37ec:	880a977a 	slli	r5,r17,29
    37f0:	d9814117 	ldw	r6,1284(sp)
    37f4:	8004d0fa 	srli	r2,r16,3
    37f8:	8806d0fa 	srli	r3,r17,3
    37fc:	810001cc 	andi	r4,r16,7
    3800:	2884b03a 	or	r2,r5,r2
    3804:	31bfffc4 	addi	r6,r6,-1
    3808:	21000c04 	addi	r4,r4,48
    380c:	d9814115 	stw	r6,1284(sp)
    3810:	10cab03a 	or	r5,r2,r3
    3814:	31000005 	stb	r4,0(r6)
    3818:	1021883a 	mov	r16,r2
    381c:	1823883a 	mov	r17,r3
    3820:	283ff21e 	bne	r5,zero,37ec <___vfprintf_internal_r+0x1340>
    3824:	d8c14c17 	ldw	r3,1328(sp)
    3828:	1880004c 	andi	r2,r3,1
    382c:	1005003a 	cmpeq	r2,r2,zero
    3830:	103db91e 	bne	r2,zero,2f18 <___vfprintf_internal_r+0xa6c>
    3834:	20803fcc 	andi	r2,r4,255
    3838:	1080201c 	xori	r2,r2,128
    383c:	10bfe004 	addi	r2,r2,-128
    3840:	00c00c04 	movi	r3,48
    3844:	10fdb426 	beq	r2,r3,2f18 <___vfprintf_internal_r+0xa6c>
    3848:	31bfffc4 	addi	r6,r6,-1
    384c:	d9814115 	stw	r6,1284(sp)
    3850:	30c00005 	stb	r3,0(r6)
    3854:	003db006 	br	2f18 <___vfprintf_internal_r+0xa6c>
    3858:	88800068 	cmpgeui	r2,r17,1
    385c:	10002c1e 	bne	r2,zero,3910 <___vfprintf_internal_r+0x1464>
    3860:	8800021e 	bne	r17,zero,386c <___vfprintf_internal_r+0x13c0>
    3864:	00800244 	movi	r2,9
    3868:	14002936 	bltu	r2,r16,3910 <___vfprintf_internal_r+0x1464>
    386c:	d90018c4 	addi	r4,sp,99
    3870:	dd000f04 	addi	r20,sp,60
    3874:	d9014115 	stw	r4,1284(sp)
    3878:	d9014117 	ldw	r4,1284(sp)
    387c:	80800c04 	addi	r2,r16,48
    3880:	20800005 	stb	r2,0(r4)
    3884:	003da406 	br	2f18 <___vfprintf_internal_r+0xa6c>
    3888:	dc400d17 	ldw	r17,52(sp)
    388c:	07000074 	movhi	fp,1
    3890:	e73ca184 	addi	fp,fp,-3450
    3894:	9425883a 	add	r18,r18,r16
    3898:	8c400044 	addi	r17,r17,1
    389c:	008001c4 	movi	r2,7
    38a0:	1f000015 	stw	fp,0(r3)
    38a4:	1c000115 	stw	r16,4(r3)
    38a8:	dc800e15 	stw	r18,56(sp)
    38ac:	dc400d15 	stw	r17,52(sp)
    38b0:	147de216 	blt	r2,r17,303c <___vfprintf_internal_r+0xb90>
    38b4:	18c00204 	addi	r3,r3,8
    38b8:	003c7a06 	br	2aa4 <___vfprintf_internal_r+0x5f8>
    38bc:	01000084 	movi	r4,2
    38c0:	d8000405 	stb	zero,16(sp)
    38c4:	003d8706 	br	2ee4 <___vfprintf_internal_r+0xa38>
    38c8:	d9814c17 	ldw	r6,1328(sp)
    38cc:	30c4703a 	and	r2,r6,r3
    38d0:	1005003a 	cmpeq	r2,r2,zero
    38d4:	103cb926 	beq	r2,zero,2bbc <___vfprintf_internal_r+0x710>
    38d8:	d9014117 	ldw	r4,1284(sp)
    38dc:	94800044 	addi	r18,r18,1
    38e0:	8c400044 	addi	r17,r17,1
    38e4:	008001c4 	movi	r2,7
    38e8:	a9000015 	stw	r4,0(r21)
    38ec:	a8c00115 	stw	r3,4(r21)
    38f0:	dc800e15 	stw	r18,56(sp)
    38f4:	dc400d15 	stw	r17,52(sp)
    38f8:	147e6616 	blt	r2,r17,3294 <___vfprintf_internal_r+0xde8>
    38fc:	acc00204 	addi	r19,r21,8
    3900:	003cd706 	br	2c60 <___vfprintf_internal_r+0x7b4>
    3904:	07000074 	movhi	fp,1
    3908:	e73ca184 	addi	fp,fp,-3450
    390c:	003c4f06 	br	2a4c <___vfprintf_internal_r+0x5a0>
    3910:	dd000f04 	addi	r20,sp,60
    3914:	dc801904 	addi	r18,sp,100
    3918:	8009883a 	mov	r4,r16
    391c:	880b883a 	mov	r5,r17
    3920:	01800284 	movi	r6,10
    3924:	000f883a 	mov	r7,zero
    3928:	00093f40 	call	93f4 <__umoddi3>
    392c:	12000c04 	addi	r8,r2,48
    3930:	94bfffc4 	addi	r18,r18,-1
    3934:	8009883a 	mov	r4,r16
    3938:	880b883a 	mov	r5,r17
    393c:	01800284 	movi	r6,10
    3940:	000f883a 	mov	r7,zero
    3944:	92000005 	stb	r8,0(r18)
    3948:	0008e180 	call	8e18 <__udivdi3>
    394c:	1009883a 	mov	r4,r2
    3950:	1021883a 	mov	r16,r2
    3954:	18800068 	cmpgeui	r2,r3,1
    3958:	1823883a 	mov	r17,r3
    395c:	103fee1e 	bne	r2,zero,3918 <___vfprintf_internal_r+0x146c>
    3960:	1800021e 	bne	r3,zero,396c <___vfprintf_internal_r+0x14c0>
    3964:	00800244 	movi	r2,9
    3968:	113feb36 	bltu	r2,r4,3918 <___vfprintf_internal_r+0x146c>
    396c:	94bfffc4 	addi	r18,r18,-1
    3970:	dc814115 	stw	r18,1284(sp)
    3974:	003fc006 	br	3878 <___vfprintf_internal_r+0x13cc>
    3978:	d9014c17 	ldw	r4,1328(sp)
    397c:	2080004c 	andi	r2,r4,1
    3980:	10009a1e 	bne	r2,zero,3bec <___vfprintf_internal_r+0x1740>
    3984:	d9401904 	addi	r5,sp,100
    3988:	dd000f04 	addi	r20,sp,60
    398c:	d9414115 	stw	r5,1284(sp)
    3990:	003d6106 	br	2f18 <___vfprintf_internal_r+0xa6c>
    3994:	d9014f17 	ldw	r4,1340(sp)
    3998:	b00b883a 	mov	r5,r22
    399c:	d9800c04 	addi	r6,sp,48
    39a0:	00024540 	call	2454 <__sprint_r>
    39a4:	103c791e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    39a8:	dc800e17 	ldw	r18,56(sp)
    39ac:	d8c01904 	addi	r3,sp,100
    39b0:	003cff06 	br	2db0 <___vfprintf_internal_r+0x904>
    39b4:	d8c14c17 	ldw	r3,1328(sp)
    39b8:	1880040c 	andi	r2,r3,16
    39bc:	1000711e 	bne	r2,zero,3b84 <___vfprintf_internal_r+0x16d8>
    39c0:	d9014c17 	ldw	r4,1328(sp)
    39c4:	2080100c 	andi	r2,r4,64
    39c8:	10006e26 	beq	r2,zero,3b84 <___vfprintf_internal_r+0x16d8>
    39cc:	3c00000b 	ldhu	r16,0(r7)
    39d0:	0023883a 	mov	r17,zero
    39d4:	39c00104 	addi	r7,r7,4
    39d8:	d9c14015 	stw	r7,1280(sp)
    39dc:	003f0006 	br	35e0 <___vfprintf_internal_r+0x1134>
    39e0:	dc400d17 	ldw	r17,52(sp)
    39e4:	07000074 	movhi	fp,1
    39e8:	e73ca184 	addi	fp,fp,-3450
    39ec:	9425883a 	add	r18,r18,r16
    39f0:	8c400044 	addi	r17,r17,1
    39f4:	008001c4 	movi	r2,7
    39f8:	1f000015 	stw	fp,0(r3)
    39fc:	1c000115 	stw	r16,4(r3)
    3a00:	dc800e15 	stw	r18,56(sp)
    3a04:	dc400d15 	stw	r17,52(sp)
    3a08:	147d7616 	blt	r2,r17,2fe4 <___vfprintf_internal_r+0xb38>
    3a0c:	18c00204 	addi	r3,r3,8
    3a10:	003d7b06 	br	3000 <___vfprintf_internal_r+0xb54>
    3a14:	dc800e17 	ldw	r18,56(sp)
    3a18:	dc400d17 	ldw	r17,52(sp)
    3a1c:	07000074 	movhi	fp,1
    3a20:	e73ca584 	addi	fp,fp,-3434
    3a24:	003bc006 	br	2928 <___vfprintf_internal_r+0x47c>
    3a28:	d9014f17 	ldw	r4,1340(sp)
    3a2c:	b00b883a 	mov	r5,r22
    3a30:	d9800c04 	addi	r6,sp,48
    3a34:	00024540 	call	2454 <__sprint_r>
    3a38:	103c541e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3a3c:	dc800e17 	ldw	r18,56(sp)
    3a40:	d8c01904 	addi	r3,sp,100
    3a44:	003ce906 	br	2dec <___vfprintf_internal_r+0x940>
    3a48:	3c000017 	ldw	r16,0(r7)
    3a4c:	0009883a 	mov	r4,zero
    3a50:	39c00104 	addi	r7,r7,4
    3a54:	0023883a 	mov	r17,zero
    3a58:	d9c14015 	stw	r7,1280(sp)
    3a5c:	d8000405 	stb	zero,16(sp)
    3a60:	003d2006 	br	2ee4 <___vfprintf_internal_r+0xa38>
    3a64:	38800017 	ldw	r2,0(r7)
    3a68:	39c00104 	addi	r7,r7,4
    3a6c:	d9c14015 	stw	r7,1280(sp)
    3a70:	1023d7fa 	srai	r17,r2,31
    3a74:	1021883a 	mov	r16,r2
    3a78:	003d1806 	br	2edc <___vfprintf_internal_r+0xa30>
    3a7c:	3c000017 	ldw	r16,0(r7)
    3a80:	01000044 	movi	r4,1
    3a84:	39c00104 	addi	r7,r7,4
    3a88:	0023883a 	mov	r17,zero
    3a8c:	d9c14015 	stw	r7,1280(sp)
    3a90:	d8000405 	stb	zero,16(sp)
    3a94:	003d1306 	br	2ee4 <___vfprintf_internal_r+0xa38>
    3a98:	00800074 	movhi	r2,1
    3a9c:	10bca104 	addi	r2,r2,-3452
    3aa0:	94800044 	addi	r18,r18,1
    3aa4:	8c400044 	addi	r17,r17,1
    3aa8:	a8800015 	stw	r2,0(r21)
    3aac:	00c00044 	movi	r3,1
    3ab0:	008001c4 	movi	r2,7
    3ab4:	a8c00115 	stw	r3,4(r21)
    3ab8:	dc800e15 	stw	r18,56(sp)
    3abc:	dc400d15 	stw	r17,52(sp)
    3ac0:	1440ca16 	blt	r2,r17,3dec <___vfprintf_internal_r+0x1940>
    3ac4:	a8c00204 	addi	r3,r21,8
    3ac8:	2000061e 	bne	r4,zero,3ae4 <___vfprintf_internal_r+0x1638>
    3acc:	d9414717 	ldw	r5,1308(sp)
    3ad0:	2800041e 	bne	r5,zero,3ae4 <___vfprintf_internal_r+0x1638>
    3ad4:	d9814c17 	ldw	r6,1328(sp)
    3ad8:	3080004c 	andi	r2,r6,1
    3adc:	1005003a 	cmpeq	r2,r2,zero
    3ae0:	103bf01e 	bne	r2,zero,2aa4 <___vfprintf_internal_r+0x5f8>
    3ae4:	00800044 	movi	r2,1
    3ae8:	dc400d17 	ldw	r17,52(sp)
    3aec:	18800115 	stw	r2,4(r3)
    3af0:	d8814917 	ldw	r2,1316(sp)
    3af4:	94800044 	addi	r18,r18,1
    3af8:	8c400044 	addi	r17,r17,1
    3afc:	18800015 	stw	r2,0(r3)
    3b00:	008001c4 	movi	r2,7
    3b04:	dc800e15 	stw	r18,56(sp)
    3b08:	dc400d15 	stw	r17,52(sp)
    3b0c:	1440ca16 	blt	r2,r17,3e38 <___vfprintf_internal_r+0x198c>
    3b10:	18c00204 	addi	r3,r3,8
    3b14:	0121c83a 	sub	r16,zero,r4
    3b18:	0400500e 	bge	zero,r16,3c5c <___vfprintf_internal_r+0x17b0>
    3b1c:	00800404 	movi	r2,16
    3b20:	1400800e 	bge	r2,r16,3d24 <___vfprintf_internal_r+0x1878>
    3b24:	1027883a 	mov	r19,r2
    3b28:	07000074 	movhi	fp,1
    3b2c:	e73ca184 	addi	fp,fp,-3450
    3b30:	050001c4 	movi	r20,7
    3b34:	00000306 	br	3b44 <___vfprintf_internal_r+0x1698>
    3b38:	18c00204 	addi	r3,r3,8
    3b3c:	843ffc04 	addi	r16,r16,-16
    3b40:	9c007a0e 	bge	r19,r16,3d2c <___vfprintf_internal_r+0x1880>
    3b44:	94800404 	addi	r18,r18,16
    3b48:	8c400044 	addi	r17,r17,1
    3b4c:	1f000015 	stw	fp,0(r3)
    3b50:	1cc00115 	stw	r19,4(r3)
    3b54:	dc800e15 	stw	r18,56(sp)
    3b58:	dc400d15 	stw	r17,52(sp)
    3b5c:	a47ff60e 	bge	r20,r17,3b38 <___vfprintf_internal_r+0x168c>
    3b60:	d9014f17 	ldw	r4,1340(sp)
    3b64:	b00b883a 	mov	r5,r22
    3b68:	d9800c04 	addi	r6,sp,48
    3b6c:	00024540 	call	2454 <__sprint_r>
    3b70:	103c061e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3b74:	dc800e17 	ldw	r18,56(sp)
    3b78:	dc400d17 	ldw	r17,52(sp)
    3b7c:	d8c01904 	addi	r3,sp,100
    3b80:	003fee06 	br	3b3c <___vfprintf_internal_r+0x1690>
    3b84:	3c000017 	ldw	r16,0(r7)
    3b88:	0023883a 	mov	r17,zero
    3b8c:	39c00104 	addi	r7,r7,4
    3b90:	d9c14015 	stw	r7,1280(sp)
    3b94:	003e9206 	br	35e0 <___vfprintf_internal_r+0x1134>
    3b98:	d9401904 	addi	r5,sp,100
    3b9c:	dd000f04 	addi	r20,sp,60
    3ba0:	d9414115 	stw	r5,1284(sp)
    3ba4:	d9814417 	ldw	r6,1296(sp)
    3ba8:	880a973a 	slli	r5,r17,28
    3bac:	8004d13a 	srli	r2,r16,4
    3bb0:	810003cc 	andi	r4,r16,15
    3bb4:	3109883a 	add	r4,r6,r4
    3bb8:	2884b03a 	or	r2,r5,r2
    3bbc:	21400003 	ldbu	r5,0(r4)
    3bc0:	d9014117 	ldw	r4,1284(sp)
    3bc4:	8806d13a 	srli	r3,r17,4
    3bc8:	1021883a 	mov	r16,r2
    3bcc:	213fffc4 	addi	r4,r4,-1
    3bd0:	d9014115 	stw	r4,1284(sp)
    3bd4:	d9814117 	ldw	r6,1284(sp)
    3bd8:	10c8b03a 	or	r4,r2,r3
    3bdc:	1823883a 	mov	r17,r3
    3be0:	31400005 	stb	r5,0(r6)
    3be4:	203fef1e 	bne	r4,zero,3ba4 <___vfprintf_internal_r+0x16f8>
    3be8:	003ccb06 	br	2f18 <___vfprintf_internal_r+0xa6c>
    3bec:	00800c04 	movi	r2,48
    3bf0:	d98018c4 	addi	r6,sp,99
    3bf4:	dd000f04 	addi	r20,sp,60
    3bf8:	d88018c5 	stb	r2,99(sp)
    3bfc:	d9814115 	stw	r6,1284(sp)
    3c00:	003cc506 	br	2f18 <___vfprintf_internal_r+0xa6c>
    3c04:	dc400d17 	ldw	r17,52(sp)
    3c08:	07000074 	movhi	fp,1
    3c0c:	e73ca584 	addi	fp,fp,-3434
    3c10:	003bc706 	br	2b30 <___vfprintf_internal_r+0x684>
    3c14:	d9414c17 	ldw	r5,1328(sp)
    3c18:	2880040c 	andi	r2,r5,16
    3c1c:	10007c26 	beq	r2,zero,3e10 <___vfprintf_internal_r+0x1964>
    3c20:	38800017 	ldw	r2,0(r7)
    3c24:	39c00104 	addi	r7,r7,4
    3c28:	d9c14015 	stw	r7,1280(sp)
    3c2c:	d9814b17 	ldw	r6,1324(sp)
    3c30:	d9c14017 	ldw	r7,1280(sp)
    3c34:	11800015 	stw	r6,0(r2)
    3c38:	003a7806 	br	261c <___vfprintf_internal_r+0x170>
    3c3c:	d9014f17 	ldw	r4,1340(sp)
    3c40:	b00b883a 	mov	r5,r22
    3c44:	d9800c04 	addi	r6,sp,48
    3c48:	00024540 	call	2454 <__sprint_r>
    3c4c:	103bcf1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3c50:	dc800e17 	ldw	r18,56(sp)
    3c54:	dc400d17 	ldw	r17,52(sp)
    3c58:	d8c01904 	addi	r3,sp,100
    3c5c:	d9014717 	ldw	r4,1308(sp)
    3c60:	d9414117 	ldw	r5,1284(sp)
    3c64:	8c400044 	addi	r17,r17,1
    3c68:	9125883a 	add	r18,r18,r4
    3c6c:	008001c4 	movi	r2,7
    3c70:	19400015 	stw	r5,0(r3)
    3c74:	19000115 	stw	r4,4(r3)
    3c78:	dc800e15 	stw	r18,56(sp)
    3c7c:	dc400d15 	stw	r17,52(sp)
    3c80:	147cee16 	blt	r2,r17,303c <___vfprintf_internal_r+0xb90>
    3c84:	18c00204 	addi	r3,r3,8
    3c88:	003b8606 	br	2aa4 <___vfprintf_internal_r+0x5f8>
    3c8c:	38c00017 	ldw	r3,0(r7)
    3c90:	39000204 	addi	r4,r7,8
    3c94:	d9014015 	stw	r4,1280(sp)
    3c98:	d8c14215 	stw	r3,1288(sp)
    3c9c:	39c00117 	ldw	r7,4(r7)
    3ca0:	d9c14315 	stw	r7,1292(sp)
    3ca4:	003e2006 	br	3528 <___vfprintf_internal_r+0x107c>
    3ca8:	0005883a 	mov	r2,zero
    3cac:	1409c83a 	sub	r4,r2,r16
    3cb0:	1105803a 	cmpltu	r2,r2,r4
    3cb4:	044bc83a 	sub	r5,zero,r17
    3cb8:	2885c83a 	sub	r2,r5,r2
    3cbc:	2021883a 	mov	r16,r4
    3cc0:	1023883a 	mov	r17,r2
    3cc4:	01000044 	movi	r4,1
    3cc8:	00800b44 	movi	r2,45
    3ccc:	d8800405 	stb	r2,16(sp)
    3cd0:	003c8406 	br	2ee4 <___vfprintf_internal_r+0xa38>
    3cd4:	d9014f17 	ldw	r4,1340(sp)
    3cd8:	b00b883a 	mov	r5,r22
    3cdc:	d9800c04 	addi	r6,sp,48
    3ce0:	00024540 	call	2454 <__sprint_r>
    3ce4:	103ba91e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3ce8:	dc800e17 	ldw	r18,56(sp)
    3cec:	dc400d17 	ldw	r17,52(sp)
    3cf0:	d9000517 	ldw	r4,20(sp)
    3cf4:	d9401904 	addi	r5,sp,100
    3cf8:	003da706 	br	3398 <___vfprintf_internal_r+0xeec>
    3cfc:	d9014f17 	ldw	r4,1340(sp)
    3d00:	b00b883a 	mov	r5,r22
    3d04:	d9800c04 	addi	r6,sp,48
    3d08:	00024540 	call	2454 <__sprint_r>
    3d0c:	103b9f1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3d10:	dc800e17 	ldw	r18,56(sp)
    3d14:	dc400d17 	ldw	r17,52(sp)
    3d18:	d9000517 	ldw	r4,20(sp)
    3d1c:	d8c01904 	addi	r3,sp,100
    3d20:	003d9106 	br	3368 <___vfprintf_internal_r+0xebc>
    3d24:	07000074 	movhi	fp,1
    3d28:	e73ca184 	addi	fp,fp,-3450
    3d2c:	9425883a 	add	r18,r18,r16
    3d30:	8c400044 	addi	r17,r17,1
    3d34:	008001c4 	movi	r2,7
    3d38:	1f000015 	stw	fp,0(r3)
    3d3c:	1c000115 	stw	r16,4(r3)
    3d40:	dc800e15 	stw	r18,56(sp)
    3d44:	dc400d15 	stw	r17,52(sp)
    3d48:	147fbc16 	blt	r2,r17,3c3c <___vfprintf_internal_r+0x1790>
    3d4c:	18c00204 	addi	r3,r3,8
    3d50:	003fc206 	br	3c5c <___vfprintf_internal_r+0x17b0>
    3d54:	d9014f17 	ldw	r4,1340(sp)
    3d58:	b00b883a 	mov	r5,r22
    3d5c:	d9800c04 	addi	r6,sp,48
    3d60:	00024540 	call	2454 <__sprint_r>
    3d64:	103b891e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3d68:	dc800e17 	ldw	r18,56(sp)
    3d6c:	d9000517 	ldw	r4,20(sp)
    3d70:	d8c01904 	addi	r3,sp,100
    3d74:	003d0206 	br	3180 <___vfprintf_internal_r+0xcd4>
    3d78:	07000074 	movhi	fp,1
    3d7c:	e73ca184 	addi	fp,fp,-3450
    3d80:	003be406 	br	2d14 <___vfprintf_internal_r+0x868>
    3d84:	00800074 	movhi	r2,1
    3d88:	10bc9004 	addi	r2,r2,-3520
    3d8c:	d8814115 	stw	r2,1284(sp)
    3d90:	003df506 	br	3568 <___vfprintf_internal_r+0x10bc>
    3d94:	d9014217 	ldw	r4,1288(sp)
    3d98:	d9414317 	ldw	r5,1292(sp)
    3d9c:	000874c0 	call	874c <__isnand>
    3da0:	10003926 	beq	r2,zero,3e88 <___vfprintf_internal_r+0x19dc>
    3da4:	d9414d17 	ldw	r5,1332(sp)
    3da8:	008011c4 	movi	r2,71
    3dac:	1140ce16 	blt	r2,r5,40e8 <___vfprintf_internal_r+0x1c3c>
    3db0:	01800074 	movhi	r6,1
    3db4:	31bc9104 	addi	r6,r6,-3516
    3db8:	d9814115 	stw	r6,1284(sp)
    3dbc:	003dea06 	br	3568 <___vfprintf_internal_r+0x10bc>
    3dc0:	d9014c17 	ldw	r4,1328(sp)
    3dc4:	bdc00044 	addi	r23,r23,1
    3dc8:	b8c00007 	ldb	r3,0(r23)
    3dcc:	21000814 	ori	r4,r4,32
    3dd0:	d9014c15 	stw	r4,1328(sp)
    3dd4:	003a3406 	br	26a8 <___vfprintf_internal_r+0x1fc>
    3dd8:	dcc14515 	stw	r19,1300(sp)
    3ddc:	98011016 	blt	r19,zero,4220 <___vfprintf_internal_r+0x1d74>
    3de0:	980f883a 	mov	r7,r19
    3de4:	d8014615 	stw	zero,1304(sp)
    3de8:	003c5206 	br	2f34 <___vfprintf_internal_r+0xa88>
    3dec:	d9014f17 	ldw	r4,1340(sp)
    3df0:	b00b883a 	mov	r5,r22
    3df4:	d9800c04 	addi	r6,sp,48
    3df8:	00024540 	call	2454 <__sprint_r>
    3dfc:	103b631e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3e00:	dc800e17 	ldw	r18,56(sp)
    3e04:	d9000517 	ldw	r4,20(sp)
    3e08:	d8c01904 	addi	r3,sp,100
    3e0c:	003f2e06 	br	3ac8 <___vfprintf_internal_r+0x161c>
    3e10:	d8c14c17 	ldw	r3,1328(sp)
    3e14:	1880100c 	andi	r2,r3,64
    3e18:	1000a026 	beq	r2,zero,409c <___vfprintf_internal_r+0x1bf0>
    3e1c:	38800017 	ldw	r2,0(r7)
    3e20:	39c00104 	addi	r7,r7,4
    3e24:	d9c14015 	stw	r7,1280(sp)
    3e28:	d9014b17 	ldw	r4,1324(sp)
    3e2c:	d9c14017 	ldw	r7,1280(sp)
    3e30:	1100000d 	sth	r4,0(r2)
    3e34:	0039f906 	br	261c <___vfprintf_internal_r+0x170>
    3e38:	d9014f17 	ldw	r4,1340(sp)
    3e3c:	b00b883a 	mov	r5,r22
    3e40:	d9800c04 	addi	r6,sp,48
    3e44:	00024540 	call	2454 <__sprint_r>
    3e48:	103b501e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    3e4c:	dc800e17 	ldw	r18,56(sp)
    3e50:	dc400d17 	ldw	r17,52(sp)
    3e54:	d9000517 	ldw	r4,20(sp)
    3e58:	d8c01904 	addi	r3,sp,100
    3e5c:	003f2d06 	br	3b14 <___vfprintf_internal_r+0x1668>
    3e60:	00800184 	movi	r2,6
    3e64:	14c09a36 	bltu	r2,r19,40d0 <___vfprintf_internal_r+0x1c24>
    3e68:	dcc14515 	stw	r19,1300(sp)
    3e6c:	9800010e 	bge	r19,zero,3e74 <___vfprintf_internal_r+0x19c8>
    3e70:	d8014515 	stw	zero,1300(sp)
    3e74:	00800074 	movhi	r2,1
    3e78:	10bc9304 	addi	r2,r2,-3508
    3e7c:	980f883a 	mov	r7,r19
    3e80:	d8814115 	stw	r2,1284(sp)
    3e84:	003a7806 	br	2868 <___vfprintf_internal_r+0x3bc>
    3e88:	00bfffc4 	movi	r2,-1
    3e8c:	9880e226 	beq	r19,r2,4218 <___vfprintf_internal_r+0x1d6c>
    3e90:	d9414d17 	ldw	r5,1332(sp)
    3e94:	008019c4 	movi	r2,103
    3e98:	2880dc26 	beq	r5,r2,420c <___vfprintf_internal_r+0x1d60>
    3e9c:	008011c4 	movi	r2,71
    3ea0:	2880da26 	beq	r5,r2,420c <___vfprintf_internal_r+0x1d60>
    3ea4:	d9414c17 	ldw	r5,1328(sp)
    3ea8:	d9014317 	ldw	r4,1292(sp)
    3eac:	d9814217 	ldw	r6,1288(sp)
    3eb0:	29404014 	ori	r5,r5,256
    3eb4:	d9414c15 	stw	r5,1328(sp)
    3eb8:	2000cc16 	blt	r4,zero,41ec <___vfprintf_internal_r+0x1d40>
    3ebc:	3021883a 	mov	r16,r6
    3ec0:	2023883a 	mov	r17,r4
    3ec4:	0039883a 	mov	fp,zero
    3ec8:	d9414d17 	ldw	r5,1332(sp)
    3ecc:	00801984 	movi	r2,102
    3ed0:	2880b726 	beq	r5,r2,41b0 <___vfprintf_internal_r+0x1d04>
    3ed4:	00801184 	movi	r2,70
    3ed8:	2880b526 	beq	r5,r2,41b0 <___vfprintf_internal_r+0x1d04>
    3edc:	00801944 	movi	r2,101
    3ee0:	2880c826 	beq	r5,r2,4204 <___vfprintf_internal_r+0x1d58>
    3ee4:	00801144 	movi	r2,69
    3ee8:	2880c626 	beq	r5,r2,4204 <___vfprintf_internal_r+0x1d58>
    3eec:	9829883a 	mov	r20,r19
    3ef0:	d9014f17 	ldw	r4,1340(sp)
    3ef4:	d8800504 	addi	r2,sp,20
    3ef8:	880d883a 	mov	r6,r17
    3efc:	d8800115 	stw	r2,4(sp)
    3f00:	d8c00604 	addi	r3,sp,24
    3f04:	d8800704 	addi	r2,sp,28
    3f08:	800b883a 	mov	r5,r16
    3f0c:	01c00084 	movi	r7,2
    3f10:	d8c00215 	stw	r3,8(sp)
    3f14:	d8800315 	stw	r2,12(sp)
    3f18:	dd000015 	stw	r20,0(sp)
    3f1c:	00046d00 	call	46d0 <_dtoa_r>
    3f20:	d9814d17 	ldw	r6,1332(sp)
    3f24:	d8814115 	stw	r2,1284(sp)
    3f28:	008019c4 	movi	r2,103
    3f2c:	30809526 	beq	r6,r2,4184 <___vfprintf_internal_r+0x1cd8>
    3f30:	d8c14d17 	ldw	r3,1332(sp)
    3f34:	008011c4 	movi	r2,71
    3f38:	18809226 	beq	r3,r2,4184 <___vfprintf_internal_r+0x1cd8>
    3f3c:	d9414117 	ldw	r5,1284(sp)
    3f40:	d9814d17 	ldw	r6,1332(sp)
    3f44:	00801984 	movi	r2,102
    3f48:	2d25883a 	add	r18,r5,r20
    3f4c:	30808626 	beq	r6,r2,4168 <___vfprintf_internal_r+0x1cbc>
    3f50:	00801184 	movi	r2,70
    3f54:	30808426 	beq	r6,r2,4168 <___vfprintf_internal_r+0x1cbc>
    3f58:	000d883a 	mov	r6,zero
    3f5c:	000f883a 	mov	r7,zero
    3f60:	880b883a 	mov	r5,r17
    3f64:	8009883a 	mov	r4,r16
    3f68:	000a4c40 	call	a4c4 <__eqdf2>
    3f6c:	1000751e 	bne	r2,zero,4144 <___vfprintf_internal_r+0x1c98>
    3f70:	9005883a 	mov	r2,r18
    3f74:	dc800715 	stw	r18,28(sp)
    3f78:	d9014117 	ldw	r4,1284(sp)
    3f7c:	d9414d17 	ldw	r5,1332(sp)
    3f80:	00c019c4 	movi	r3,103
    3f84:	1125c83a 	sub	r18,r2,r4
    3f88:	28c06826 	beq	r5,r3,412c <___vfprintf_internal_r+0x1c80>
    3f8c:	008011c4 	movi	r2,71
    3f90:	28806626 	beq	r5,r2,412c <___vfprintf_internal_r+0x1c80>
    3f94:	d9000517 	ldw	r4,20(sp)
    3f98:	d8c14d17 	ldw	r3,1332(sp)
    3f9c:	00801944 	movi	r2,101
    3fa0:	10c05516 	blt	r2,r3,40f8 <___vfprintf_internal_r+0x1c4c>
    3fa4:	213fffc4 	addi	r4,r4,-1
    3fa8:	d9000515 	stw	r4,20(sp)
    3fac:	d8c00805 	stb	r3,32(sp)
    3fb0:	2021883a 	mov	r16,r4
    3fb4:	2000c116 	blt	r4,zero,42bc <___vfprintf_internal_r+0x1e10>
    3fb8:	00800ac4 	movi	r2,43
    3fbc:	d8800845 	stb	r2,33(sp)
    3fc0:	00800244 	movi	r2,9
    3fc4:	1400af0e 	bge	r2,r16,4284 <___vfprintf_internal_r+0x1dd8>
    3fc8:	1027883a 	mov	r19,r2
    3fcc:	dc400b84 	addi	r17,sp,46
    3fd0:	8009883a 	mov	r4,r16
    3fd4:	01400284 	movi	r5,10
    3fd8:	0001a6c0 	call	1a6c <__modsi3>
    3fdc:	10800c04 	addi	r2,r2,48
    3fe0:	8c7fffc4 	addi	r17,r17,-1
    3fe4:	8009883a 	mov	r4,r16
    3fe8:	01400284 	movi	r5,10
    3fec:	88800005 	stb	r2,0(r17)
    3ff0:	0001a0c0 	call	1a0c <__divsi3>
    3ff4:	1021883a 	mov	r16,r2
    3ff8:	98bff516 	blt	r19,r2,3fd0 <___vfprintf_internal_r+0x1b24>
    3ffc:	10c00c04 	addi	r3,r2,48
    4000:	d88009c4 	addi	r2,sp,39
    4004:	108001c4 	addi	r2,r2,7
    4008:	897fffc4 	addi	r5,r17,-1
    400c:	88ffffc5 	stb	r3,-1(r17)
    4010:	2880a72e 	bgeu	r5,r2,42b0 <___vfprintf_internal_r+0x1e04>
    4014:	1009883a 	mov	r4,r2
    4018:	d9800804 	addi	r6,sp,32
    401c:	d8c00884 	addi	r3,sp,34
    4020:	28800003 	ldbu	r2,0(r5)
    4024:	29400044 	addi	r5,r5,1
    4028:	18800005 	stb	r2,0(r3)
    402c:	18c00044 	addi	r3,r3,1
    4030:	293ffb36 	bltu	r5,r4,4020 <___vfprintf_internal_r+0x1b74>
    4034:	1987c83a 	sub	r3,r3,r6
    4038:	00800044 	movi	r2,1
    403c:	d8c14815 	stw	r3,1312(sp)
    4040:	90cf883a 	add	r7,r18,r3
    4044:	1480960e 	bge	r2,r18,42a0 <___vfprintf_internal_r+0x1df4>
    4048:	39c00044 	addi	r7,r7,1
    404c:	d9c14515 	stw	r7,1300(sp)
    4050:	38003416 	blt	r7,zero,4124 <___vfprintf_internal_r+0x1c78>
    4054:	e0803fcc 	andi	r2,fp,255
    4058:	1080201c 	xori	r2,r2,128
    405c:	10bfe004 	addi	r2,r2,-128
    4060:	10004e26 	beq	r2,zero,419c <___vfprintf_internal_r+0x1cf0>
    4064:	00800b44 	movi	r2,45
    4068:	dc814715 	stw	r18,1308(sp)
    406c:	d8014615 	stw	zero,1304(sp)
    4070:	d8800405 	stb	r2,16(sp)
    4074:	003bb106 	br	2f3c <___vfprintf_internal_r+0xa90>
    4078:	00800b44 	movi	r2,45
    407c:	d8800405 	stb	r2,16(sp)
    4080:	003d3306 	br	3550 <___vfprintf_internal_r+0x10a4>
    4084:	d9014f17 	ldw	r4,1340(sp)
    4088:	b00b883a 	mov	r5,r22
    408c:	d9800c04 	addi	r6,sp,48
    4090:	00024540 	call	2454 <__sprint_r>
    4094:	103abd1e 	bne	r2,zero,2b8c <___vfprintf_internal_r+0x6e0>
    4098:	003abb06 	br	2b88 <___vfprintf_internal_r+0x6dc>
    409c:	38800017 	ldw	r2,0(r7)
    40a0:	39c00104 	addi	r7,r7,4
    40a4:	d9c14015 	stw	r7,1280(sp)
    40a8:	d9414b17 	ldw	r5,1324(sp)
    40ac:	d9c14017 	ldw	r7,1280(sp)
    40b0:	11400015 	stw	r5,0(r2)
    40b4:	00395906 	br	261c <___vfprintf_internal_r+0x170>
    40b8:	980f883a 	mov	r7,r19
    40bc:	dcc14515 	stw	r19,1300(sp)
    40c0:	d8014615 	stw	zero,1304(sp)
    40c4:	003b9b06 	br	2f34 <___vfprintf_internal_r+0xa88>
    40c8:	0027883a 	mov	r19,zero
    40cc:	00397806 	br	26b0 <___vfprintf_internal_r+0x204>
    40d0:	00c00074 	movhi	r3,1
    40d4:	18fc9304 	addi	r3,r3,-3508
    40d8:	100f883a 	mov	r7,r2
    40dc:	d8814515 	stw	r2,1300(sp)
    40e0:	d8c14115 	stw	r3,1284(sp)
    40e4:	0039e006 	br	2868 <___vfprintf_internal_r+0x3bc>
    40e8:	00800074 	movhi	r2,1
    40ec:	10bc9204 	addi	r2,r2,-3512
    40f0:	d8814115 	stw	r2,1284(sp)
    40f4:	003d1c06 	br	3568 <___vfprintf_internal_r+0x10bc>
    40f8:	d9414d17 	ldw	r5,1332(sp)
    40fc:	00801984 	movi	r2,102
    4100:	28804926 	beq	r5,r2,4228 <___vfprintf_internal_r+0x1d7c>
    4104:	200f883a 	mov	r7,r4
    4108:	24805716 	blt	r4,r18,4268 <___vfprintf_internal_r+0x1dbc>
    410c:	d9414c17 	ldw	r5,1328(sp)
    4110:	2880004c 	andi	r2,r5,1
    4114:	10000126 	beq	r2,zero,411c <___vfprintf_internal_r+0x1c70>
    4118:	21c00044 	addi	r7,r4,1
    411c:	d9c14515 	stw	r7,1300(sp)
    4120:	383fcc0e 	bge	r7,zero,4054 <___vfprintf_internal_r+0x1ba8>
    4124:	d8014515 	stw	zero,1300(sp)
    4128:	003fca06 	br	4054 <___vfprintf_internal_r+0x1ba8>
    412c:	d9000517 	ldw	r4,20(sp)
    4130:	00bfff04 	movi	r2,-4
    4134:	1100480e 	bge	r2,r4,4258 <___vfprintf_internal_r+0x1dac>
    4138:	99004716 	blt	r19,r4,4258 <___vfprintf_internal_r+0x1dac>
    413c:	d8c14d15 	stw	r3,1332(sp)
    4140:	003ff006 	br	4104 <___vfprintf_internal_r+0x1c58>
    4144:	d8800717 	ldw	r2,28(sp)
    4148:	14bf8b2e 	bgeu	r2,r18,3f78 <___vfprintf_internal_r+0x1acc>
    414c:	9007883a 	mov	r3,r18
    4150:	01000c04 	movi	r4,48
    4154:	11000005 	stb	r4,0(r2)
    4158:	10800044 	addi	r2,r2,1
    415c:	d8800715 	stw	r2,28(sp)
    4160:	18bffc1e 	bne	r3,r2,4154 <___vfprintf_internal_r+0x1ca8>
    4164:	003f8406 	br	3f78 <___vfprintf_internal_r+0x1acc>
    4168:	d8814117 	ldw	r2,1284(sp)
    416c:	10c00007 	ldb	r3,0(r2)
    4170:	00800c04 	movi	r2,48
    4174:	18805b26 	beq	r3,r2,42e4 <___vfprintf_internal_r+0x1e38>
    4178:	d9000517 	ldw	r4,20(sp)
    417c:	9125883a 	add	r18,r18,r4
    4180:	003f7506 	br	3f58 <___vfprintf_internal_r+0x1aac>
    4184:	d9014c17 	ldw	r4,1328(sp)
    4188:	2080004c 	andi	r2,r4,1
    418c:	1005003a 	cmpeq	r2,r2,zero
    4190:	103f6a26 	beq	r2,zero,3f3c <___vfprintf_internal_r+0x1a90>
    4194:	d8800717 	ldw	r2,28(sp)
    4198:	003f7706 	br	3f78 <___vfprintf_internal_r+0x1acc>
    419c:	d9c14515 	stw	r7,1300(sp)
    41a0:	38004d16 	blt	r7,zero,42d8 <___vfprintf_internal_r+0x1e2c>
    41a4:	dc814715 	stw	r18,1308(sp)
    41a8:	d8014615 	stw	zero,1304(sp)
    41ac:	003b6106 	br	2f34 <___vfprintf_internal_r+0xa88>
    41b0:	d9014f17 	ldw	r4,1340(sp)
    41b4:	d8800504 	addi	r2,sp,20
    41b8:	d8800115 	stw	r2,4(sp)
    41bc:	d8c00604 	addi	r3,sp,24
    41c0:	d8800704 	addi	r2,sp,28
    41c4:	800b883a 	mov	r5,r16
    41c8:	880d883a 	mov	r6,r17
    41cc:	01c000c4 	movi	r7,3
    41d0:	d8c00215 	stw	r3,8(sp)
    41d4:	d8800315 	stw	r2,12(sp)
    41d8:	dcc00015 	stw	r19,0(sp)
    41dc:	9829883a 	mov	r20,r19
    41e0:	00046d00 	call	46d0 <_dtoa_r>
    41e4:	d8814115 	stw	r2,1284(sp)
    41e8:	003f5106 	br	3f30 <___vfprintf_internal_r+0x1a84>
    41ec:	d8c14217 	ldw	r3,1288(sp)
    41f0:	d9014317 	ldw	r4,1292(sp)
    41f4:	07000b44 	movi	fp,45
    41f8:	1821883a 	mov	r16,r3
    41fc:	2460003c 	xorhi	r17,r4,32768
    4200:	003f3106 	br	3ec8 <___vfprintf_internal_r+0x1a1c>
    4204:	9d000044 	addi	r20,r19,1
    4208:	003f3906 	br	3ef0 <___vfprintf_internal_r+0x1a44>
    420c:	983f251e 	bne	r19,zero,3ea4 <___vfprintf_internal_r+0x19f8>
    4210:	04c00044 	movi	r19,1
    4214:	003f2306 	br	3ea4 <___vfprintf_internal_r+0x19f8>
    4218:	04c00184 	movi	r19,6
    421c:	003f2106 	br	3ea4 <___vfprintf_internal_r+0x19f8>
    4220:	d8014515 	stw	zero,1300(sp)
    4224:	003eee06 	br	3de0 <___vfprintf_internal_r+0x1934>
    4228:	200f883a 	mov	r7,r4
    422c:	0100370e 	bge	zero,r4,430c <___vfprintf_internal_r+0x1e60>
    4230:	9800031e 	bne	r19,zero,4240 <___vfprintf_internal_r+0x1d94>
    4234:	d9814c17 	ldw	r6,1328(sp)
    4238:	3080004c 	andi	r2,r6,1
    423c:	103fb726 	beq	r2,zero,411c <___vfprintf_internal_r+0x1c70>
    4240:	20800044 	addi	r2,r4,1
    4244:	98a7883a 	add	r19,r19,r2
    4248:	dcc14515 	stw	r19,1300(sp)
    424c:	980f883a 	mov	r7,r19
    4250:	983f800e 	bge	r19,zero,4054 <___vfprintf_internal_r+0x1ba8>
    4254:	003fb306 	br	4124 <___vfprintf_internal_r+0x1c78>
    4258:	d9814d17 	ldw	r6,1332(sp)
    425c:	31bfff84 	addi	r6,r6,-2
    4260:	d9814d15 	stw	r6,1332(sp)
    4264:	003f4c06 	br	3f98 <___vfprintf_internal_r+0x1aec>
    4268:	0100180e 	bge	zero,r4,42cc <___vfprintf_internal_r+0x1e20>
    426c:	00800044 	movi	r2,1
    4270:	1485883a 	add	r2,r2,r18
    4274:	d8814515 	stw	r2,1300(sp)
    4278:	100f883a 	mov	r7,r2
    427c:	103f750e 	bge	r2,zero,4054 <___vfprintf_internal_r+0x1ba8>
    4280:	003fa806 	br	4124 <___vfprintf_internal_r+0x1c78>
    4284:	80c00c04 	addi	r3,r16,48
    4288:	00800c04 	movi	r2,48
    428c:	d8c008c5 	stb	r3,35(sp)
    4290:	d9800804 	addi	r6,sp,32
    4294:	d8c00904 	addi	r3,sp,36
    4298:	d8800885 	stb	r2,34(sp)
    429c:	003f6506 	br	4034 <___vfprintf_internal_r+0x1b88>
    42a0:	d9014c17 	ldw	r4,1328(sp)
    42a4:	2084703a 	and	r2,r4,r2
    42a8:	103f9c26 	beq	r2,zero,411c <___vfprintf_internal_r+0x1c70>
    42ac:	003f6606 	br	4048 <___vfprintf_internal_r+0x1b9c>
    42b0:	d9800804 	addi	r6,sp,32
    42b4:	d8c00884 	addi	r3,sp,34
    42b8:	003f5e06 	br	4034 <___vfprintf_internal_r+0x1b88>
    42bc:	00800b44 	movi	r2,45
    42c0:	0121c83a 	sub	r16,zero,r4
    42c4:	d8800845 	stb	r2,33(sp)
    42c8:	003f3d06 	br	3fc0 <___vfprintf_internal_r+0x1b14>
    42cc:	00800084 	movi	r2,2
    42d0:	1105c83a 	sub	r2,r2,r4
    42d4:	003fe606 	br	4270 <___vfprintf_internal_r+0x1dc4>
    42d8:	d8014515 	stw	zero,1300(sp)
    42dc:	dc814715 	stw	r18,1308(sp)
    42e0:	003fb106 	br	41a8 <___vfprintf_internal_r+0x1cfc>
    42e4:	000d883a 	mov	r6,zero
    42e8:	000f883a 	mov	r7,zero
    42ec:	8009883a 	mov	r4,r16
    42f0:	880b883a 	mov	r5,r17
    42f4:	000a54c0 	call	a54c <__nedf2>
    42f8:	103f9f26 	beq	r2,zero,4178 <___vfprintf_internal_r+0x1ccc>
    42fc:	00800044 	movi	r2,1
    4300:	1509c83a 	sub	r4,r2,r20
    4304:	d9000515 	stw	r4,20(sp)
    4308:	003f9b06 	br	4178 <___vfprintf_internal_r+0x1ccc>
    430c:	98000d1e 	bne	r19,zero,4344 <___vfprintf_internal_r+0x1e98>
    4310:	d8c14c17 	ldw	r3,1328(sp)
    4314:	1880004c 	andi	r2,r3,1
    4318:	10000a1e 	bne	r2,zero,4344 <___vfprintf_internal_r+0x1e98>
    431c:	01000044 	movi	r4,1
    4320:	200f883a 	mov	r7,r4
    4324:	d9014515 	stw	r4,1300(sp)
    4328:	003f4a06 	br	4054 <___vfprintf_internal_r+0x1ba8>
    432c:	3cc00017 	ldw	r19,0(r7)
    4330:	39c00104 	addi	r7,r7,4
    4334:	983d0e0e 	bge	r19,zero,3770 <___vfprintf_internal_r+0x12c4>
    4338:	b8c00007 	ldb	r3,0(r23)
    433c:	04ffffc4 	movi	r19,-1
    4340:	0038d906 	br	26a8 <___vfprintf_internal_r+0x1fc>
    4344:	9cc00084 	addi	r19,r19,2
    4348:	dcc14515 	stw	r19,1300(sp)
    434c:	980f883a 	mov	r7,r19
    4350:	983f400e 	bge	r19,zero,4054 <___vfprintf_internal_r+0x1ba8>
    4354:	003f7306 	br	4124 <___vfprintf_internal_r+0x1c78>

00004358 <__vfprintf_internal>:
    4358:	00800074 	movhi	r2,1
    435c:	10853a04 	addi	r2,r2,5352
    4360:	2013883a 	mov	r9,r4
    4364:	11000017 	ldw	r4,0(r2)
    4368:	2805883a 	mov	r2,r5
    436c:	300f883a 	mov	r7,r6
    4370:	480b883a 	mov	r5,r9
    4374:	100d883a 	mov	r6,r2
    4378:	00024ac1 	jmpi	24ac <___vfprintf_internal_r>

0000437c <__swsetup_r>:
    437c:	00800074 	movhi	r2,1
    4380:	10853a04 	addi	r2,r2,5352
    4384:	10c00017 	ldw	r3,0(r2)
    4388:	defffd04 	addi	sp,sp,-12
    438c:	dc400115 	stw	r17,4(sp)
    4390:	dc000015 	stw	r16,0(sp)
    4394:	dfc00215 	stw	ra,8(sp)
    4398:	2023883a 	mov	r17,r4
    439c:	2821883a 	mov	r16,r5
    43a0:	18000226 	beq	r3,zero,43ac <__swsetup_r+0x30>
    43a4:	18800e17 	ldw	r2,56(r3)
    43a8:	10001f26 	beq	r2,zero,4428 <__swsetup_r+0xac>
    43ac:	8100030b 	ldhu	r4,12(r16)
    43b0:	2080020c 	andi	r2,r4,8
    43b4:	10002826 	beq	r2,zero,4458 <__swsetup_r+0xdc>
    43b8:	81400417 	ldw	r5,16(r16)
    43bc:	28001d26 	beq	r5,zero,4434 <__swsetup_r+0xb8>
    43c0:	2080004c 	andi	r2,r4,1
    43c4:	1005003a 	cmpeq	r2,r2,zero
    43c8:	10000b26 	beq	r2,zero,43f8 <__swsetup_r+0x7c>
    43cc:	2080008c 	andi	r2,r4,2
    43d0:	10001226 	beq	r2,zero,441c <__swsetup_r+0xa0>
    43d4:	0005883a 	mov	r2,zero
    43d8:	80800215 	stw	r2,8(r16)
    43dc:	28000b26 	beq	r5,zero,440c <__swsetup_r+0x90>
    43e0:	0005883a 	mov	r2,zero
    43e4:	dfc00217 	ldw	ra,8(sp)
    43e8:	dc400117 	ldw	r17,4(sp)
    43ec:	dc000017 	ldw	r16,0(sp)
    43f0:	dec00304 	addi	sp,sp,12
    43f4:	f800283a 	ret
    43f8:	80800517 	ldw	r2,20(r16)
    43fc:	80000215 	stw	zero,8(r16)
    4400:	0085c83a 	sub	r2,zero,r2
    4404:	80800615 	stw	r2,24(r16)
    4408:	283ff51e 	bne	r5,zero,43e0 <__swsetup_r+0x64>
    440c:	2080200c 	andi	r2,r4,128
    4410:	103ff326 	beq	r2,zero,43e0 <__swsetup_r+0x64>
    4414:	00bfffc4 	movi	r2,-1
    4418:	003ff206 	br	43e4 <__swsetup_r+0x68>
    441c:	80800517 	ldw	r2,20(r16)
    4420:	80800215 	stw	r2,8(r16)
    4424:	003fed06 	br	43dc <__swsetup_r+0x60>
    4428:	1809883a 	mov	r4,r3
    442c:	0005f1c0 	call	5f1c <__sinit>
    4430:	003fde06 	br	43ac <__swsetup_r+0x30>
    4434:	20c0a00c 	andi	r3,r4,640
    4438:	00808004 	movi	r2,512
    443c:	18bfe026 	beq	r3,r2,43c0 <__swsetup_r+0x44>
    4440:	8809883a 	mov	r4,r17
    4444:	800b883a 	mov	r5,r16
    4448:	0006c940 	call	6c94 <__smakebuf_r>
    444c:	8100030b 	ldhu	r4,12(r16)
    4450:	81400417 	ldw	r5,16(r16)
    4454:	003fda06 	br	43c0 <__swsetup_r+0x44>
    4458:	2080040c 	andi	r2,r4,16
    445c:	103fed26 	beq	r2,zero,4414 <__swsetup_r+0x98>
    4460:	2080010c 	andi	r2,r4,4
    4464:	10001226 	beq	r2,zero,44b0 <__swsetup_r+0x134>
    4468:	81400c17 	ldw	r5,48(r16)
    446c:	28000526 	beq	r5,zero,4484 <__swsetup_r+0x108>
    4470:	80801004 	addi	r2,r16,64
    4474:	28800226 	beq	r5,r2,4480 <__swsetup_r+0x104>
    4478:	8809883a 	mov	r4,r17
    447c:	00062a00 	call	62a0 <_free_r>
    4480:	80000c15 	stw	zero,48(r16)
    4484:	8080030b 	ldhu	r2,12(r16)
    4488:	81400417 	ldw	r5,16(r16)
    448c:	80000115 	stw	zero,4(r16)
    4490:	10bff6cc 	andi	r2,r2,65499
    4494:	8080030d 	sth	r2,12(r16)
    4498:	81400015 	stw	r5,0(r16)
    449c:	8080030b 	ldhu	r2,12(r16)
    44a0:	10800214 	ori	r2,r2,8
    44a4:	113fffcc 	andi	r4,r2,65535
    44a8:	8080030d 	sth	r2,12(r16)
    44ac:	003fc306 	br	43bc <__swsetup_r+0x40>
    44b0:	81400417 	ldw	r5,16(r16)
    44b4:	003ff906 	br	449c <__swsetup_r+0x120>

000044b8 <quorem>:
    44b8:	28c00417 	ldw	r3,16(r5)
    44bc:	20800417 	ldw	r2,16(r4)
    44c0:	defff604 	addi	sp,sp,-40
    44c4:	ddc00715 	stw	r23,28(sp)
    44c8:	dd400515 	stw	r21,20(sp)
    44cc:	dfc00915 	stw	ra,36(sp)
    44d0:	df000815 	stw	fp,32(sp)
    44d4:	dd800615 	stw	r22,24(sp)
    44d8:	dd000415 	stw	r20,16(sp)
    44dc:	dcc00315 	stw	r19,12(sp)
    44e0:	dc800215 	stw	r18,8(sp)
    44e4:	dc400115 	stw	r17,4(sp)
    44e8:	dc000015 	stw	r16,0(sp)
    44ec:	202f883a 	mov	r23,r4
    44f0:	282b883a 	mov	r21,r5
    44f4:	10c07416 	blt	r2,r3,46c8 <quorem+0x210>
    44f8:	1c7fffc4 	addi	r17,r3,-1
    44fc:	8c45883a 	add	r2,r17,r17
    4500:	1085883a 	add	r2,r2,r2
    4504:	2c000504 	addi	r16,r5,20
    4508:	24c00504 	addi	r19,r4,20
    450c:	14ed883a 	add	r22,r2,r19
    4510:	80a5883a 	add	r18,r16,r2
    4514:	b7000017 	ldw	fp,0(r22)
    4518:	91400017 	ldw	r5,0(r18)
    451c:	e009883a 	mov	r4,fp
    4520:	29400044 	addi	r5,r5,1
    4524:	0001acc0 	call	1acc <__udivsi3>
    4528:	1029883a 	mov	r20,r2
    452c:	10003c1e 	bne	r2,zero,4620 <quorem+0x168>
    4530:	a80b883a 	mov	r5,r21
    4534:	b809883a 	mov	r4,r23
    4538:	00072800 	call	7280 <__mcmp>
    453c:	10002b16 	blt	r2,zero,45ec <quorem+0x134>
    4540:	a5000044 	addi	r20,r20,1
    4544:	980f883a 	mov	r7,r19
    4548:	0011883a 	mov	r8,zero
    454c:	0009883a 	mov	r4,zero
    4550:	81400017 	ldw	r5,0(r16)
    4554:	38c00017 	ldw	r3,0(r7)
    4558:	84000104 	addi	r16,r16,4
    455c:	28bfffcc 	andi	r2,r5,65535
    4560:	2085883a 	add	r2,r4,r2
    4564:	11bfffcc 	andi	r6,r2,65535
    4568:	193fffcc 	andi	r4,r3,65535
    456c:	1004d43a 	srli	r2,r2,16
    4570:	280ad43a 	srli	r5,r5,16
    4574:	2189c83a 	sub	r4,r4,r6
    4578:	2209883a 	add	r4,r4,r8
    457c:	1806d43a 	srli	r3,r3,16
    4580:	288b883a 	add	r5,r5,r2
    4584:	200dd43a 	srai	r6,r4,16
    4588:	28bfffcc 	andi	r2,r5,65535
    458c:	1887c83a 	sub	r3,r3,r2
    4590:	1987883a 	add	r3,r3,r6
    4594:	3900000d 	sth	r4,0(r7)
    4598:	38c0008d 	sth	r3,2(r7)
    459c:	2808d43a 	srli	r4,r5,16
    45a0:	39c00104 	addi	r7,r7,4
    45a4:	1811d43a 	srai	r8,r3,16
    45a8:	943fe92e 	bgeu	r18,r16,4550 <quorem+0x98>
    45ac:	8c45883a 	add	r2,r17,r17
    45b0:	1085883a 	add	r2,r2,r2
    45b4:	9885883a 	add	r2,r19,r2
    45b8:	10c00017 	ldw	r3,0(r2)
    45bc:	18000b1e 	bne	r3,zero,45ec <quorem+0x134>
    45c0:	113fff04 	addi	r4,r2,-4
    45c4:	9900082e 	bgeu	r19,r4,45e8 <quorem+0x130>
    45c8:	10bfff17 	ldw	r2,-4(r2)
    45cc:	10000326 	beq	r2,zero,45dc <quorem+0x124>
    45d0:	00000506 	br	45e8 <quorem+0x130>
    45d4:	20800017 	ldw	r2,0(r4)
    45d8:	1000031e 	bne	r2,zero,45e8 <quorem+0x130>
    45dc:	213fff04 	addi	r4,r4,-4
    45e0:	8c7fffc4 	addi	r17,r17,-1
    45e4:	993ffb36 	bltu	r19,r4,45d4 <quorem+0x11c>
    45e8:	bc400415 	stw	r17,16(r23)
    45ec:	a005883a 	mov	r2,r20
    45f0:	dfc00917 	ldw	ra,36(sp)
    45f4:	df000817 	ldw	fp,32(sp)
    45f8:	ddc00717 	ldw	r23,28(sp)
    45fc:	dd800617 	ldw	r22,24(sp)
    4600:	dd400517 	ldw	r21,20(sp)
    4604:	dd000417 	ldw	r20,16(sp)
    4608:	dcc00317 	ldw	r19,12(sp)
    460c:	dc800217 	ldw	r18,8(sp)
    4610:	dc400117 	ldw	r17,4(sp)
    4614:	dc000017 	ldw	r16,0(sp)
    4618:	dec00a04 	addi	sp,sp,40
    461c:	f800283a 	ret
    4620:	980f883a 	mov	r7,r19
    4624:	8011883a 	mov	r8,r16
    4628:	0013883a 	mov	r9,zero
    462c:	000d883a 	mov	r6,zero
    4630:	40c00017 	ldw	r3,0(r8)
    4634:	39000017 	ldw	r4,0(r7)
    4638:	42000104 	addi	r8,r8,4
    463c:	18bfffcc 	andi	r2,r3,65535
    4640:	a085383a 	mul	r2,r20,r2
    4644:	1806d43a 	srli	r3,r3,16
    4648:	217fffcc 	andi	r5,r4,65535
    464c:	3085883a 	add	r2,r6,r2
    4650:	11bfffcc 	andi	r6,r2,65535
    4654:	a0c7383a 	mul	r3,r20,r3
    4658:	1004d43a 	srli	r2,r2,16
    465c:	298bc83a 	sub	r5,r5,r6
    4660:	2a4b883a 	add	r5,r5,r9
    4664:	2008d43a 	srli	r4,r4,16
    4668:	1887883a 	add	r3,r3,r2
    466c:	280dd43a 	srai	r6,r5,16
    4670:	18bfffcc 	andi	r2,r3,65535
    4674:	2089c83a 	sub	r4,r4,r2
    4678:	2189883a 	add	r4,r4,r6
    467c:	3900008d 	sth	r4,2(r7)
    4680:	3940000d 	sth	r5,0(r7)
    4684:	180cd43a 	srli	r6,r3,16
    4688:	39c00104 	addi	r7,r7,4
    468c:	2013d43a 	srai	r9,r4,16
    4690:	923fe72e 	bgeu	r18,r8,4630 <quorem+0x178>
    4694:	e03fa61e 	bne	fp,zero,4530 <quorem+0x78>
    4698:	b0ffff04 	addi	r3,r22,-4
    469c:	98c0082e 	bgeu	r19,r3,46c0 <quorem+0x208>
    46a0:	b0bfff17 	ldw	r2,-4(r22)
    46a4:	10000326 	beq	r2,zero,46b4 <quorem+0x1fc>
    46a8:	00000506 	br	46c0 <quorem+0x208>
    46ac:	18800017 	ldw	r2,0(r3)
    46b0:	1000031e 	bne	r2,zero,46c0 <quorem+0x208>
    46b4:	18ffff04 	addi	r3,r3,-4
    46b8:	8c7fffc4 	addi	r17,r17,-1
    46bc:	98fffb36 	bltu	r19,r3,46ac <quorem+0x1f4>
    46c0:	bc400415 	stw	r17,16(r23)
    46c4:	003f9a06 	br	4530 <quorem+0x78>
    46c8:	0005883a 	mov	r2,zero
    46cc:	003fc806 	br	45f0 <quorem+0x138>

000046d0 <_dtoa_r>:
    46d0:	22001017 	ldw	r8,64(r4)
    46d4:	deffda04 	addi	sp,sp,-152
    46d8:	dd402115 	stw	r21,132(sp)
    46dc:	dd002015 	stw	r20,128(sp)
    46e0:	dc801e15 	stw	r18,120(sp)
    46e4:	dc401d15 	stw	r17,116(sp)
    46e8:	dfc02515 	stw	ra,148(sp)
    46ec:	df002415 	stw	fp,144(sp)
    46f0:	ddc02315 	stw	r23,140(sp)
    46f4:	dd802215 	stw	r22,136(sp)
    46f8:	dcc01f15 	stw	r19,124(sp)
    46fc:	dc001c15 	stw	r16,112(sp)
    4700:	d9001615 	stw	r4,88(sp)
    4704:	3023883a 	mov	r17,r6
    4708:	2829883a 	mov	r20,r5
    470c:	d9c01715 	stw	r7,92(sp)
    4710:	dc802817 	ldw	r18,160(sp)
    4714:	302b883a 	mov	r21,r6
    4718:	40000a26 	beq	r8,zero,4744 <_dtoa_r+0x74>
    471c:	20801117 	ldw	r2,68(r4)
    4720:	400b883a 	mov	r5,r8
    4724:	40800115 	stw	r2,4(r8)
    4728:	20c01117 	ldw	r3,68(r4)
    472c:	00800044 	movi	r2,1
    4730:	10c4983a 	sll	r2,r2,r3
    4734:	40800215 	stw	r2,8(r8)
    4738:	00071240 	call	7124 <_Bfree>
    473c:	d8c01617 	ldw	r3,88(sp)
    4740:	18001015 	stw	zero,64(r3)
    4744:	8800a316 	blt	r17,zero,49d4 <_dtoa_r+0x304>
    4748:	90000015 	stw	zero,0(r18)
    474c:	a8dffc2c 	andhi	r3,r21,32752
    4750:	009ffc34 	movhi	r2,32752
    4754:	18809126 	beq	r3,r2,499c <_dtoa_r+0x2cc>
    4758:	000d883a 	mov	r6,zero
    475c:	000f883a 	mov	r7,zero
    4760:	a009883a 	mov	r4,r20
    4764:	a80b883a 	mov	r5,r21
    4768:	dd001215 	stw	r20,72(sp)
    476c:	dd401315 	stw	r21,76(sp)
    4770:	000a54c0 	call	a54c <__nedf2>
    4774:	1000171e 	bne	r2,zero,47d4 <_dtoa_r+0x104>
    4778:	d9802717 	ldw	r6,156(sp)
    477c:	00800044 	movi	r2,1
    4780:	30800015 	stw	r2,0(r6)
    4784:	d8802917 	ldw	r2,164(sp)
    4788:	10029b26 	beq	r2,zero,51f8 <_dtoa_r+0xb28>
    478c:	d9002917 	ldw	r4,164(sp)
    4790:	00800074 	movhi	r2,1
    4794:	10bca144 	addi	r2,r2,-3451
    4798:	10ffffc4 	addi	r3,r2,-1
    479c:	20800015 	stw	r2,0(r4)
    47a0:	1805883a 	mov	r2,r3
    47a4:	dfc02517 	ldw	ra,148(sp)
    47a8:	df002417 	ldw	fp,144(sp)
    47ac:	ddc02317 	ldw	r23,140(sp)
    47b0:	dd802217 	ldw	r22,136(sp)
    47b4:	dd402117 	ldw	r21,132(sp)
    47b8:	dd002017 	ldw	r20,128(sp)
    47bc:	dcc01f17 	ldw	r19,124(sp)
    47c0:	dc801e17 	ldw	r18,120(sp)
    47c4:	dc401d17 	ldw	r17,116(sp)
    47c8:	dc001c17 	ldw	r16,112(sp)
    47cc:	dec02604 	addi	sp,sp,152
    47d0:	f800283a 	ret
    47d4:	d9001617 	ldw	r4,88(sp)
    47d8:	d9401217 	ldw	r5,72(sp)
    47dc:	d8800104 	addi	r2,sp,4
    47e0:	a80d883a 	mov	r6,r21
    47e4:	d9c00204 	addi	r7,sp,8
    47e8:	d8800015 	stw	r2,0(sp)
    47ec:	00077600 	call	7760 <__d2b>
    47f0:	d8800715 	stw	r2,28(sp)
    47f4:	a804d53a 	srli	r2,r21,20
    47f8:	1101ffcc 	andi	r4,r2,2047
    47fc:	20008626 	beq	r4,zero,4a18 <_dtoa_r+0x348>
    4800:	d8c01217 	ldw	r3,72(sp)
    4804:	00800434 	movhi	r2,16
    4808:	10bfffc4 	addi	r2,r2,-1
    480c:	ddc00117 	ldw	r23,4(sp)
    4810:	a884703a 	and	r2,r21,r2
    4814:	1811883a 	mov	r8,r3
    4818:	124ffc34 	orhi	r9,r2,16368
    481c:	25bf0044 	addi	r22,r4,-1023
    4820:	d8000815 	stw	zero,32(sp)
    4824:	0005883a 	mov	r2,zero
    4828:	00cffe34 	movhi	r3,16376
    482c:	480b883a 	mov	r5,r9
    4830:	4009883a 	mov	r4,r8
    4834:	180f883a 	mov	r7,r3
    4838:	100d883a 	mov	r6,r2
    483c:	0009db40 	call	9db4 <__subdf3>
    4840:	0218dbf4 	movhi	r8,25455
    4844:	4210d844 	addi	r8,r8,17249
    4848:	024ff4f4 	movhi	r9,16339
    484c:	4a61e9c4 	addi	r9,r9,-30809
    4850:	480f883a 	mov	r7,r9
    4854:	400d883a 	mov	r6,r8
    4858:	180b883a 	mov	r5,r3
    485c:	1009883a 	mov	r4,r2
    4860:	0009ea80 	call	9ea8 <__muldf3>
    4864:	0222d874 	movhi	r8,35681
    4868:	42322cc4 	addi	r8,r8,-14157
    486c:	024ff1f4 	movhi	r9,16327
    4870:	4a628a04 	addi	r9,r9,-30168
    4874:	480f883a 	mov	r7,r9
    4878:	400d883a 	mov	r6,r8
    487c:	180b883a 	mov	r5,r3
    4880:	1009883a 	mov	r4,r2
    4884:	0009e340 	call	9e34 <__adddf3>
    4888:	b009883a 	mov	r4,r22
    488c:	1021883a 	mov	r16,r2
    4890:	1823883a 	mov	r17,r3
    4894:	000a76c0 	call	a76c <__floatsidf>
    4898:	021427f4 	movhi	r8,20639
    489c:	421e7ec4 	addi	r8,r8,31227
    48a0:	024ff4f4 	movhi	r9,16339
    48a4:	4a5104c4 	addi	r9,r9,17427
    48a8:	480f883a 	mov	r7,r9
    48ac:	400d883a 	mov	r6,r8
    48b0:	180b883a 	mov	r5,r3
    48b4:	1009883a 	mov	r4,r2
    48b8:	0009ea80 	call	9ea8 <__muldf3>
    48bc:	180f883a 	mov	r7,r3
    48c0:	880b883a 	mov	r5,r17
    48c4:	100d883a 	mov	r6,r2
    48c8:	8009883a 	mov	r4,r16
    48cc:	0009e340 	call	9e34 <__adddf3>
    48d0:	1009883a 	mov	r4,r2
    48d4:	180b883a 	mov	r5,r3
    48d8:	1021883a 	mov	r16,r2
    48dc:	1823883a 	mov	r17,r3
    48e0:	000a8640 	call	a864 <__fixdfsi>
    48e4:	000d883a 	mov	r6,zero
    48e8:	000f883a 	mov	r7,zero
    48ec:	8009883a 	mov	r4,r16
    48f0:	880b883a 	mov	r5,r17
    48f4:	d8800d15 	stw	r2,52(sp)
    48f8:	000a6e40 	call	a6e4 <__ltdf2>
    48fc:	10031716 	blt	r2,zero,555c <_dtoa_r+0xe8c>
    4900:	d8c00d17 	ldw	r3,52(sp)
    4904:	00800584 	movi	r2,22
    4908:	10c1482e 	bgeu	r2,r3,4e2c <_dtoa_r+0x75c>
    490c:	01000044 	movi	r4,1
    4910:	d9000c15 	stw	r4,48(sp)
    4914:	bd85c83a 	sub	r2,r23,r22
    4918:	11bfffc4 	addi	r6,r2,-1
    491c:	30030b16 	blt	r6,zero,554c <_dtoa_r+0xe7c>
    4920:	d9800a15 	stw	r6,40(sp)
    4924:	d8001115 	stw	zero,68(sp)
    4928:	d8c00d17 	ldw	r3,52(sp)
    492c:	1802ff16 	blt	r3,zero,552c <_dtoa_r+0xe5c>
    4930:	d9000a17 	ldw	r4,40(sp)
    4934:	d8c00915 	stw	r3,36(sp)
    4938:	d8001015 	stw	zero,64(sp)
    493c:	20c9883a 	add	r4,r4,r3
    4940:	d9000a15 	stw	r4,40(sp)
    4944:	d9001717 	ldw	r4,92(sp)
    4948:	00800244 	movi	r2,9
    494c:	11004636 	bltu	r2,r4,4a68 <_dtoa_r+0x398>
    4950:	00800144 	movi	r2,5
    4954:	11020416 	blt	r2,r4,5168 <_dtoa_r+0xa98>
    4958:	04400044 	movi	r17,1
    495c:	d8c01717 	ldw	r3,92(sp)
    4960:	00800144 	movi	r2,5
    4964:	10c1ed36 	bltu	r2,r3,511c <_dtoa_r+0xa4c>
    4968:	18c5883a 	add	r2,r3,r3
    496c:	1085883a 	add	r2,r2,r2
    4970:	00c00034 	movhi	r3,0
    4974:	18d26104 	addi	r3,r3,18820
    4978:	10c5883a 	add	r2,r2,r3
    497c:	11000017 	ldw	r4,0(r2)
    4980:	2000683a 	jmp	r4
    4984:	00004a70 	cmpltui	zero,zero,297
    4988:	00004a70 	cmpltui	zero,zero,297
    498c:	00005470 	cmpltui	zero,zero,337
    4990:	00005448 	cmpgei	zero,zero,337
    4994:	0000548c 	andi	zero,zero,338
    4998:	00005498 	cmpnei	zero,zero,338
    499c:	d9002717 	ldw	r4,156(sp)
    49a0:	0089c3c4 	movi	r2,9999
    49a4:	20800015 	stw	r2,0(r4)
    49a8:	a0001026 	beq	r20,zero,49ec <_dtoa_r+0x31c>
    49ac:	00c00074 	movhi	r3,1
    49b0:	18fcad04 	addi	r3,r3,-3404
    49b4:	d9802917 	ldw	r6,164(sp)
    49b8:	303f7926 	beq	r6,zero,47a0 <_dtoa_r+0xd0>
    49bc:	188000c7 	ldb	r2,3(r3)
    49c0:	190000c4 	addi	r4,r3,3
    49c4:	1000101e 	bne	r2,zero,4a08 <_dtoa_r+0x338>
    49c8:	d8802917 	ldw	r2,164(sp)
    49cc:	11000015 	stw	r4,0(r2)
    49d0:	003f7306 	br	47a0 <_dtoa_r+0xd0>
    49d4:	00a00034 	movhi	r2,32768
    49d8:	10bfffc4 	addi	r2,r2,-1
    49dc:	00c00044 	movi	r3,1
    49e0:	88aa703a 	and	r21,r17,r2
    49e4:	90c00015 	stw	r3,0(r18)
    49e8:	003f5806 	br	474c <_dtoa_r+0x7c>
    49ec:	00800434 	movhi	r2,16
    49f0:	10bfffc4 	addi	r2,r2,-1
    49f4:	a884703a 	and	r2,r21,r2
    49f8:	103fec1e 	bne	r2,zero,49ac <_dtoa_r+0x2dc>
    49fc:	00c00074 	movhi	r3,1
    4a00:	18fcaa04 	addi	r3,r3,-3416
    4a04:	003feb06 	br	49b4 <_dtoa_r+0x2e4>
    4a08:	d8802917 	ldw	r2,164(sp)
    4a0c:	19000204 	addi	r4,r3,8
    4a10:	11000015 	stw	r4,0(r2)
    4a14:	003f6206 	br	47a0 <_dtoa_r+0xd0>
    4a18:	ddc00117 	ldw	r23,4(sp)
    4a1c:	d8800217 	ldw	r2,8(sp)
    4a20:	01000804 	movi	r4,32
    4a24:	b8c10c84 	addi	r3,r23,1074
    4a28:	18a3883a 	add	r17,r3,r2
    4a2c:	2441b80e 	bge	r4,r17,5110 <_dtoa_r+0xa40>
    4a30:	00c01004 	movi	r3,64
    4a34:	1c47c83a 	sub	r3,r3,r17
    4a38:	88bff804 	addi	r2,r17,-32
    4a3c:	a8c6983a 	sll	r3,r21,r3
    4a40:	a084d83a 	srl	r2,r20,r2
    4a44:	1888b03a 	or	r4,r3,r2
    4a48:	000a93c0 	call	a93c <__floatunsidf>
    4a4c:	1011883a 	mov	r8,r2
    4a50:	00bf8434 	movhi	r2,65040
    4a54:	01000044 	movi	r4,1
    4a58:	10d3883a 	add	r9,r2,r3
    4a5c:	8dbef344 	addi	r22,r17,-1075
    4a60:	d9000815 	stw	r4,32(sp)
    4a64:	003f6f06 	br	4824 <_dtoa_r+0x154>
    4a68:	d8001715 	stw	zero,92(sp)
    4a6c:	04400044 	movi	r17,1
    4a70:	00bfffc4 	movi	r2,-1
    4a74:	00c00044 	movi	r3,1
    4a78:	d8800e15 	stw	r2,56(sp)
    4a7c:	d8002615 	stw	zero,152(sp)
    4a80:	d8800f15 	stw	r2,60(sp)
    4a84:	d8c00b15 	stw	r3,44(sp)
    4a88:	1021883a 	mov	r16,r2
    4a8c:	d8801617 	ldw	r2,88(sp)
    4a90:	10001115 	stw	zero,68(r2)
    4a94:	d8801617 	ldw	r2,88(sp)
    4a98:	11401117 	ldw	r5,68(r2)
    4a9c:	1009883a 	mov	r4,r2
    4aa0:	00076a40 	call	76a4 <_Balloc>
    4aa4:	d8c01617 	ldw	r3,88(sp)
    4aa8:	d8800515 	stw	r2,20(sp)
    4aac:	18801015 	stw	r2,64(r3)
    4ab0:	00800384 	movi	r2,14
    4ab4:	14006836 	bltu	r2,r16,4c58 <_dtoa_r+0x588>
    4ab8:	8805003a 	cmpeq	r2,r17,zero
    4abc:	1000661e 	bne	r2,zero,4c58 <_dtoa_r+0x588>
    4ac0:	d9000d17 	ldw	r4,52(sp)
    4ac4:	0102300e 	bge	zero,r4,5388 <_dtoa_r+0xcb8>
    4ac8:	208003cc 	andi	r2,r4,15
    4acc:	100490fa 	slli	r2,r2,3
    4ad0:	2025d13a 	srai	r18,r4,4
    4ad4:	00c00074 	movhi	r3,1
    4ad8:	18fcbf04 	addi	r3,r3,-3332
    4adc:	10c5883a 	add	r2,r2,r3
    4ae0:	90c0040c 	andi	r3,r18,16
    4ae4:	14000017 	ldw	r16,0(r2)
    4ae8:	14400117 	ldw	r17,4(r2)
    4aec:	18036a1e 	bne	r3,zero,5898 <_dtoa_r+0x11c8>
    4af0:	05800084 	movi	r22,2
    4af4:	90001026 	beq	r18,zero,4b38 <_dtoa_r+0x468>
    4af8:	04c00074 	movhi	r19,1
    4afc:	9cfcf104 	addi	r19,r19,-3132
    4b00:	9080004c 	andi	r2,r18,1
    4b04:	1005003a 	cmpeq	r2,r2,zero
    4b08:	1000081e 	bne	r2,zero,4b2c <_dtoa_r+0x45c>
    4b0c:	99800017 	ldw	r6,0(r19)
    4b10:	99c00117 	ldw	r7,4(r19)
    4b14:	880b883a 	mov	r5,r17
    4b18:	8009883a 	mov	r4,r16
    4b1c:	0009ea80 	call	9ea8 <__muldf3>
    4b20:	1021883a 	mov	r16,r2
    4b24:	b5800044 	addi	r22,r22,1
    4b28:	1823883a 	mov	r17,r3
    4b2c:	9025d07a 	srai	r18,r18,1
    4b30:	9cc00204 	addi	r19,r19,8
    4b34:	903ff21e 	bne	r18,zero,4b00 <_dtoa_r+0x430>
    4b38:	a80b883a 	mov	r5,r21
    4b3c:	a009883a 	mov	r4,r20
    4b40:	880f883a 	mov	r7,r17
    4b44:	800d883a 	mov	r6,r16
    4b48:	000a26c0 	call	a26c <__divdf3>
    4b4c:	1029883a 	mov	r20,r2
    4b50:	182b883a 	mov	r21,r3
    4b54:	d8c00c17 	ldw	r3,48(sp)
    4b58:	1805003a 	cmpeq	r2,r3,zero
    4b5c:	1000081e 	bne	r2,zero,4b80 <_dtoa_r+0x4b0>
    4b60:	0005883a 	mov	r2,zero
    4b64:	00cffc34 	movhi	r3,16368
    4b68:	180f883a 	mov	r7,r3
    4b6c:	a009883a 	mov	r4,r20
    4b70:	a80b883a 	mov	r5,r21
    4b74:	100d883a 	mov	r6,r2
    4b78:	000a6e40 	call	a6e4 <__ltdf2>
    4b7c:	1003fe16 	blt	r2,zero,5b78 <_dtoa_r+0x14a8>
    4b80:	b009883a 	mov	r4,r22
    4b84:	000a76c0 	call	a76c <__floatsidf>
    4b88:	180b883a 	mov	r5,r3
    4b8c:	1009883a 	mov	r4,r2
    4b90:	a00d883a 	mov	r6,r20
    4b94:	a80f883a 	mov	r7,r21
    4b98:	0009ea80 	call	9ea8 <__muldf3>
    4b9c:	0011883a 	mov	r8,zero
    4ba0:	02500734 	movhi	r9,16412
    4ba4:	1009883a 	mov	r4,r2
    4ba8:	180b883a 	mov	r5,r3
    4bac:	480f883a 	mov	r7,r9
    4bb0:	400d883a 	mov	r6,r8
    4bb4:	0009e340 	call	9e34 <__adddf3>
    4bb8:	d9000f17 	ldw	r4,60(sp)
    4bbc:	102d883a 	mov	r22,r2
    4bc0:	00bf3034 	movhi	r2,64704
    4bc4:	18b9883a 	add	fp,r3,r2
    4bc8:	e02f883a 	mov	r23,fp
    4bcc:	20028f1e 	bne	r4,zero,560c <_dtoa_r+0xf3c>
    4bd0:	0005883a 	mov	r2,zero
    4bd4:	00d00534 	movhi	r3,16404
    4bd8:	a009883a 	mov	r4,r20
    4bdc:	a80b883a 	mov	r5,r21
    4be0:	180f883a 	mov	r7,r3
    4be4:	100d883a 	mov	r6,r2
    4be8:	0009db40 	call	9db4 <__subdf3>
    4bec:	1009883a 	mov	r4,r2
    4bf0:	e00f883a 	mov	r7,fp
    4bf4:	180b883a 	mov	r5,r3
    4bf8:	b00d883a 	mov	r6,r22
    4bfc:	1025883a 	mov	r18,r2
    4c00:	1827883a 	mov	r19,r3
    4c04:	000a5d40 	call	a5d4 <__gtdf2>
    4c08:	00834f16 	blt	zero,r2,5948 <_dtoa_r+0x1278>
    4c0c:	e0e0003c 	xorhi	r3,fp,32768
    4c10:	9009883a 	mov	r4,r18
    4c14:	980b883a 	mov	r5,r19
    4c18:	180f883a 	mov	r7,r3
    4c1c:	b00d883a 	mov	r6,r22
    4c20:	000a6e40 	call	a6e4 <__ltdf2>
    4c24:	1000080e 	bge	r2,zero,4c48 <_dtoa_r+0x578>
    4c28:	0027883a 	mov	r19,zero
    4c2c:	0025883a 	mov	r18,zero
    4c30:	d8802617 	ldw	r2,152(sp)
    4c34:	df000517 	ldw	fp,20(sp)
    4c38:	d8000615 	stw	zero,24(sp)
    4c3c:	0084303a 	nor	r2,zero,r2
    4c40:	d8800d15 	stw	r2,52(sp)
    4c44:	00019b06 	br	52b4 <_dtoa_r+0xbe4>
    4c48:	d9801217 	ldw	r6,72(sp)
    4c4c:	d8801317 	ldw	r2,76(sp)
    4c50:	3029883a 	mov	r20,r6
    4c54:	102b883a 	mov	r21,r2
    4c58:	d8c00217 	ldw	r3,8(sp)
    4c5c:	18008516 	blt	r3,zero,4e74 <_dtoa_r+0x7a4>
    4c60:	d9000d17 	ldw	r4,52(sp)
    4c64:	00800384 	movi	r2,14
    4c68:	11008216 	blt	r2,r4,4e74 <_dtoa_r+0x7a4>
    4c6c:	200490fa 	slli	r2,r4,3
    4c70:	d9802617 	ldw	r6,152(sp)
    4c74:	00c00074 	movhi	r3,1
    4c78:	18fcbf04 	addi	r3,r3,-3332
    4c7c:	10c5883a 	add	r2,r2,r3
    4c80:	14800017 	ldw	r18,0(r2)
    4c84:	14c00117 	ldw	r19,4(r2)
    4c88:	30031e16 	blt	r6,zero,5904 <_dtoa_r+0x1234>
    4c8c:	d9000517 	ldw	r4,20(sp)
    4c90:	d8c00f17 	ldw	r3,60(sp)
    4c94:	a823883a 	mov	r17,r21
    4c98:	a021883a 	mov	r16,r20
    4c9c:	192b883a 	add	r21,r3,r4
    4ca0:	2039883a 	mov	fp,r4
    4ca4:	00000f06 	br	4ce4 <_dtoa_r+0x614>
    4ca8:	0005883a 	mov	r2,zero
    4cac:	00d00934 	movhi	r3,16420
    4cb0:	5009883a 	mov	r4,r10
    4cb4:	580b883a 	mov	r5,r11
    4cb8:	180f883a 	mov	r7,r3
    4cbc:	100d883a 	mov	r6,r2
    4cc0:	0009ea80 	call	9ea8 <__muldf3>
    4cc4:	180b883a 	mov	r5,r3
    4cc8:	000d883a 	mov	r6,zero
    4ccc:	000f883a 	mov	r7,zero
    4cd0:	1009883a 	mov	r4,r2
    4cd4:	1021883a 	mov	r16,r2
    4cd8:	1823883a 	mov	r17,r3
    4cdc:	000a54c0 	call	a54c <__nedf2>
    4ce0:	10004526 	beq	r2,zero,4df8 <_dtoa_r+0x728>
    4ce4:	900d883a 	mov	r6,r18
    4ce8:	980f883a 	mov	r7,r19
    4cec:	8009883a 	mov	r4,r16
    4cf0:	880b883a 	mov	r5,r17
    4cf4:	000a26c0 	call	a26c <__divdf3>
    4cf8:	180b883a 	mov	r5,r3
    4cfc:	1009883a 	mov	r4,r2
    4d00:	000a8640 	call	a864 <__fixdfsi>
    4d04:	1009883a 	mov	r4,r2
    4d08:	1029883a 	mov	r20,r2
    4d0c:	000a76c0 	call	a76c <__floatsidf>
    4d10:	180f883a 	mov	r7,r3
    4d14:	9009883a 	mov	r4,r18
    4d18:	980b883a 	mov	r5,r19
    4d1c:	100d883a 	mov	r6,r2
    4d20:	0009ea80 	call	9ea8 <__muldf3>
    4d24:	180f883a 	mov	r7,r3
    4d28:	880b883a 	mov	r5,r17
    4d2c:	8009883a 	mov	r4,r16
    4d30:	100d883a 	mov	r6,r2
    4d34:	0009db40 	call	9db4 <__subdf3>
    4d38:	1015883a 	mov	r10,r2
    4d3c:	a0800c04 	addi	r2,r20,48
    4d40:	e0800005 	stb	r2,0(fp)
    4d44:	e7000044 	addi	fp,fp,1
    4d48:	1817883a 	mov	r11,r3
    4d4c:	e57fd61e 	bne	fp,r21,4ca8 <_dtoa_r+0x5d8>
    4d50:	500d883a 	mov	r6,r10
    4d54:	180f883a 	mov	r7,r3
    4d58:	5009883a 	mov	r4,r10
    4d5c:	180b883a 	mov	r5,r3
    4d60:	0009e340 	call	9e34 <__adddf3>
    4d64:	100d883a 	mov	r6,r2
    4d68:	9009883a 	mov	r4,r18
    4d6c:	980b883a 	mov	r5,r19
    4d70:	180f883a 	mov	r7,r3
    4d74:	1021883a 	mov	r16,r2
    4d78:	1823883a 	mov	r17,r3
    4d7c:	000a6e40 	call	a6e4 <__ltdf2>
    4d80:	10000816 	blt	r2,zero,4da4 <_dtoa_r+0x6d4>
    4d84:	980b883a 	mov	r5,r19
    4d88:	800d883a 	mov	r6,r16
    4d8c:	880f883a 	mov	r7,r17
    4d90:	9009883a 	mov	r4,r18
    4d94:	000a4c40 	call	a4c4 <__eqdf2>
    4d98:	1000171e 	bne	r2,zero,4df8 <_dtoa_r+0x728>
    4d9c:	a080004c 	andi	r2,r20,1
    4da0:	10001526 	beq	r2,zero,4df8 <_dtoa_r+0x728>
    4da4:	d8800d17 	ldw	r2,52(sp)
    4da8:	d8800415 	stw	r2,16(sp)
    4dac:	e009883a 	mov	r4,fp
    4db0:	213fffc4 	addi	r4,r4,-1
    4db4:	20c00007 	ldb	r3,0(r4)
    4db8:	00800e44 	movi	r2,57
    4dbc:	1880081e 	bne	r3,r2,4de0 <_dtoa_r+0x710>
    4dc0:	d8800517 	ldw	r2,20(sp)
    4dc4:	113ffa1e 	bne	r2,r4,4db0 <_dtoa_r+0x6e0>
    4dc8:	d8c00417 	ldw	r3,16(sp)
    4dcc:	d9800517 	ldw	r6,20(sp)
    4dd0:	00800c04 	movi	r2,48
    4dd4:	18c00044 	addi	r3,r3,1
    4dd8:	d8c00415 	stw	r3,16(sp)
    4ddc:	30800005 	stb	r2,0(r6)
    4de0:	20800003 	ldbu	r2,0(r4)
    4de4:	d8c00417 	ldw	r3,16(sp)
    4de8:	27000044 	addi	fp,r4,1
    4dec:	10800044 	addi	r2,r2,1
    4df0:	d8c00d15 	stw	r3,52(sp)
    4df4:	20800005 	stb	r2,0(r4)
    4df8:	d9001617 	ldw	r4,88(sp)
    4dfc:	d9400717 	ldw	r5,28(sp)
    4e00:	00071240 	call	7124 <_Bfree>
    4e04:	e0000005 	stb	zero,0(fp)
    4e08:	d9800d17 	ldw	r6,52(sp)
    4e0c:	d8c02717 	ldw	r3,156(sp)
    4e10:	d9002917 	ldw	r4,164(sp)
    4e14:	30800044 	addi	r2,r6,1
    4e18:	18800015 	stw	r2,0(r3)
    4e1c:	20029c26 	beq	r4,zero,5890 <_dtoa_r+0x11c0>
    4e20:	d8c00517 	ldw	r3,20(sp)
    4e24:	27000015 	stw	fp,0(r4)
    4e28:	003e5d06 	br	47a0 <_dtoa_r+0xd0>
    4e2c:	d9800d17 	ldw	r6,52(sp)
    4e30:	00c00074 	movhi	r3,1
    4e34:	18fcbf04 	addi	r3,r3,-3332
    4e38:	d9001217 	ldw	r4,72(sp)
    4e3c:	300490fa 	slli	r2,r6,3
    4e40:	d9401317 	ldw	r5,76(sp)
    4e44:	10c5883a 	add	r2,r2,r3
    4e48:	12000017 	ldw	r8,0(r2)
    4e4c:	12400117 	ldw	r9,4(r2)
    4e50:	400d883a 	mov	r6,r8
    4e54:	480f883a 	mov	r7,r9
    4e58:	000a6e40 	call	a6e4 <__ltdf2>
    4e5c:	1000030e 	bge	r2,zero,4e6c <_dtoa_r+0x79c>
    4e60:	d8800d17 	ldw	r2,52(sp)
    4e64:	10bfffc4 	addi	r2,r2,-1
    4e68:	d8800d15 	stw	r2,52(sp)
    4e6c:	d8000c15 	stw	zero,48(sp)
    4e70:	003ea806 	br	4914 <_dtoa_r+0x244>
    4e74:	d9000b17 	ldw	r4,44(sp)
    4e78:	202cc03a 	cmpne	r22,r4,zero
    4e7c:	b000c71e 	bne	r22,zero,519c <_dtoa_r+0xacc>
    4e80:	dc001117 	ldw	r16,68(sp)
    4e84:	dc801017 	ldw	r18,64(sp)
    4e88:	0027883a 	mov	r19,zero
    4e8c:	04000b0e 	bge	zero,r16,4ebc <_dtoa_r+0x7ec>
    4e90:	d8c00a17 	ldw	r3,40(sp)
    4e94:	00c0090e 	bge	zero,r3,4ebc <_dtoa_r+0x7ec>
    4e98:	8005883a 	mov	r2,r16
    4e9c:	1c011316 	blt	r3,r16,52ec <_dtoa_r+0xc1c>
    4ea0:	d9000a17 	ldw	r4,40(sp)
    4ea4:	d9801117 	ldw	r6,68(sp)
    4ea8:	80a1c83a 	sub	r16,r16,r2
    4eac:	2089c83a 	sub	r4,r4,r2
    4eb0:	308dc83a 	sub	r6,r6,r2
    4eb4:	d9000a15 	stw	r4,40(sp)
    4eb8:	d9801115 	stw	r6,68(sp)
    4ebc:	d8801017 	ldw	r2,64(sp)
    4ec0:	0080150e 	bge	zero,r2,4f18 <_dtoa_r+0x848>
    4ec4:	d8c00b17 	ldw	r3,44(sp)
    4ec8:	1805003a 	cmpeq	r2,r3,zero
    4ecc:	1001c91e 	bne	r2,zero,55f4 <_dtoa_r+0xf24>
    4ed0:	04800e0e 	bge	zero,r18,4f0c <_dtoa_r+0x83c>
    4ed4:	d9001617 	ldw	r4,88(sp)
    4ed8:	980b883a 	mov	r5,r19
    4edc:	900d883a 	mov	r6,r18
    4ee0:	0007ed80 	call	7ed8 <__pow5mult>
    4ee4:	d9001617 	ldw	r4,88(sp)
    4ee8:	d9800717 	ldw	r6,28(sp)
    4eec:	100b883a 	mov	r5,r2
    4ef0:	1027883a 	mov	r19,r2
    4ef4:	0007bb40 	call	7bb4 <__multiply>
    4ef8:	d9001617 	ldw	r4,88(sp)
    4efc:	d9400717 	ldw	r5,28(sp)
    4f00:	1023883a 	mov	r17,r2
    4f04:	00071240 	call	7124 <_Bfree>
    4f08:	dc400715 	stw	r17,28(sp)
    4f0c:	d9001017 	ldw	r4,64(sp)
    4f10:	248dc83a 	sub	r6,r4,r18
    4f14:	30010e1e 	bne	r6,zero,5350 <_dtoa_r+0xc80>
    4f18:	d9001617 	ldw	r4,88(sp)
    4f1c:	04400044 	movi	r17,1
    4f20:	880b883a 	mov	r5,r17
    4f24:	0007d9c0 	call	7d9c <__i2b>
    4f28:	d9800917 	ldw	r6,36(sp)
    4f2c:	1025883a 	mov	r18,r2
    4f30:	0180040e 	bge	zero,r6,4f44 <_dtoa_r+0x874>
    4f34:	d9001617 	ldw	r4,88(sp)
    4f38:	100b883a 	mov	r5,r2
    4f3c:	0007ed80 	call	7ed8 <__pow5mult>
    4f40:	1025883a 	mov	r18,r2
    4f44:	d8801717 	ldw	r2,92(sp)
    4f48:	8880f30e 	bge	r17,r2,5318 <_dtoa_r+0xc48>
    4f4c:	0023883a 	mov	r17,zero
    4f50:	d9800917 	ldw	r6,36(sp)
    4f54:	30019e1e 	bne	r6,zero,55d0 <_dtoa_r+0xf00>
    4f58:	00c00044 	movi	r3,1
    4f5c:	d9000a17 	ldw	r4,40(sp)
    4f60:	20c5883a 	add	r2,r4,r3
    4f64:	10c007cc 	andi	r3,r2,31
    4f68:	1800841e 	bne	r3,zero,517c <_dtoa_r+0xaac>
    4f6c:	00800704 	movi	r2,28
    4f70:	d9000a17 	ldw	r4,40(sp)
    4f74:	d9801117 	ldw	r6,68(sp)
    4f78:	80a1883a 	add	r16,r16,r2
    4f7c:	2089883a 	add	r4,r4,r2
    4f80:	308d883a 	add	r6,r6,r2
    4f84:	d9000a15 	stw	r4,40(sp)
    4f88:	d9801115 	stw	r6,68(sp)
    4f8c:	d8801117 	ldw	r2,68(sp)
    4f90:	0080050e 	bge	zero,r2,4fa8 <_dtoa_r+0x8d8>
    4f94:	d9400717 	ldw	r5,28(sp)
    4f98:	d9001617 	ldw	r4,88(sp)
    4f9c:	100d883a 	mov	r6,r2
    4fa0:	0007a680 	call	7a68 <__lshift>
    4fa4:	d8800715 	stw	r2,28(sp)
    4fa8:	d8c00a17 	ldw	r3,40(sp)
    4fac:	00c0050e 	bge	zero,r3,4fc4 <_dtoa_r+0x8f4>
    4fb0:	d9001617 	ldw	r4,88(sp)
    4fb4:	900b883a 	mov	r5,r18
    4fb8:	180d883a 	mov	r6,r3
    4fbc:	0007a680 	call	7a68 <__lshift>
    4fc0:	1025883a 	mov	r18,r2
    4fc4:	d9000c17 	ldw	r4,48(sp)
    4fc8:	2005003a 	cmpeq	r2,r4,zero
    4fcc:	10016f26 	beq	r2,zero,558c <_dtoa_r+0xebc>
    4fd0:	d9000f17 	ldw	r4,60(sp)
    4fd4:	0102170e 	bge	zero,r4,5834 <_dtoa_r+0x1164>
    4fd8:	d9800b17 	ldw	r6,44(sp)
    4fdc:	3005003a 	cmpeq	r2,r6,zero
    4fe0:	1000881e 	bne	r2,zero,5204 <_dtoa_r+0xb34>
    4fe4:	0400050e 	bge	zero,r16,4ffc <_dtoa_r+0x92c>
    4fe8:	d9001617 	ldw	r4,88(sp)
    4fec:	980b883a 	mov	r5,r19
    4ff0:	800d883a 	mov	r6,r16
    4ff4:	0007a680 	call	7a68 <__lshift>
    4ff8:	1027883a 	mov	r19,r2
    4ffc:	8804c03a 	cmpne	r2,r17,zero
    5000:	1002541e 	bne	r2,zero,5954 <_dtoa_r+0x1284>
    5004:	980b883a 	mov	r5,r19
    5008:	dd800517 	ldw	r22,20(sp)
    500c:	dcc00615 	stw	r19,24(sp)
    5010:	a700004c 	andi	fp,r20,1
    5014:	2827883a 	mov	r19,r5
    5018:	d9000717 	ldw	r4,28(sp)
    501c:	900b883a 	mov	r5,r18
    5020:	00044b80 	call	44b8 <quorem>
    5024:	d9000717 	ldw	r4,28(sp)
    5028:	d9400617 	ldw	r5,24(sp)
    502c:	1023883a 	mov	r17,r2
    5030:	8dc00c04 	addi	r23,r17,48
    5034:	00072800 	call	7280 <__mcmp>
    5038:	d9001617 	ldw	r4,88(sp)
    503c:	900b883a 	mov	r5,r18
    5040:	980d883a 	mov	r6,r19
    5044:	1029883a 	mov	r20,r2
    5048:	00078dc0 	call	78dc <__mdiff>
    504c:	102b883a 	mov	r21,r2
    5050:	10800317 	ldw	r2,12(r2)
    5054:	1001281e 	bne	r2,zero,54f8 <_dtoa_r+0xe28>
    5058:	d9000717 	ldw	r4,28(sp)
    505c:	a80b883a 	mov	r5,r21
    5060:	00072800 	call	7280 <__mcmp>
    5064:	d9001617 	ldw	r4,88(sp)
    5068:	1021883a 	mov	r16,r2
    506c:	a80b883a 	mov	r5,r21
    5070:	00071240 	call	7124 <_Bfree>
    5074:	8000041e 	bne	r16,zero,5088 <_dtoa_r+0x9b8>
    5078:	d8801717 	ldw	r2,92(sp)
    507c:	1000021e 	bne	r2,zero,5088 <_dtoa_r+0x9b8>
    5080:	e004c03a 	cmpne	r2,fp,zero
    5084:	10011726 	beq	r2,zero,54e4 <_dtoa_r+0xe14>
    5088:	a0010616 	blt	r20,zero,54a4 <_dtoa_r+0xdd4>
    508c:	a000041e 	bne	r20,zero,50a0 <_dtoa_r+0x9d0>
    5090:	d8c01717 	ldw	r3,92(sp)
    5094:	1800021e 	bne	r3,zero,50a0 <_dtoa_r+0x9d0>
    5098:	e004c03a 	cmpne	r2,fp,zero
    509c:	10010126 	beq	r2,zero,54a4 <_dtoa_r+0xdd4>
    50a0:	04023d16 	blt	zero,r16,5998 <_dtoa_r+0x12c8>
    50a4:	b5c00005 	stb	r23,0(r22)
    50a8:	d9800517 	ldw	r6,20(sp)
    50ac:	d9000f17 	ldw	r4,60(sp)
    50b0:	b5800044 	addi	r22,r22,1
    50b4:	3105883a 	add	r2,r6,r4
    50b8:	b0806526 	beq	r22,r2,5250 <_dtoa_r+0xb80>
    50bc:	d9400717 	ldw	r5,28(sp)
    50c0:	d9001617 	ldw	r4,88(sp)
    50c4:	01800284 	movi	r6,10
    50c8:	000f883a 	mov	r7,zero
    50cc:	0007dd80 	call	7dd8 <__multadd>
    50d0:	d8800715 	stw	r2,28(sp)
    50d4:	d8800617 	ldw	r2,24(sp)
    50d8:	14c10c26 	beq	r2,r19,550c <_dtoa_r+0xe3c>
    50dc:	d9400617 	ldw	r5,24(sp)
    50e0:	d9001617 	ldw	r4,88(sp)
    50e4:	01800284 	movi	r6,10
    50e8:	000f883a 	mov	r7,zero
    50ec:	0007dd80 	call	7dd8 <__multadd>
    50f0:	d9001617 	ldw	r4,88(sp)
    50f4:	980b883a 	mov	r5,r19
    50f8:	01800284 	movi	r6,10
    50fc:	000f883a 	mov	r7,zero
    5100:	d8800615 	stw	r2,24(sp)
    5104:	0007dd80 	call	7dd8 <__multadd>
    5108:	1027883a 	mov	r19,r2
    510c:	003fc206 	br	5018 <_dtoa_r+0x948>
    5110:	2445c83a 	sub	r2,r4,r17
    5114:	a088983a 	sll	r4,r20,r2
    5118:	003e4b06 	br	4a48 <_dtoa_r+0x378>
    511c:	01bfffc4 	movi	r6,-1
    5120:	00800044 	movi	r2,1
    5124:	d9800e15 	stw	r6,56(sp)
    5128:	d9800f15 	stw	r6,60(sp)
    512c:	d8800b15 	stw	r2,44(sp)
    5130:	d8c01617 	ldw	r3,88(sp)
    5134:	008005c4 	movi	r2,23
    5138:	18001115 	stw	zero,68(r3)
    513c:	1580082e 	bgeu	r2,r22,5160 <_dtoa_r+0xa90>
    5140:	00c00104 	movi	r3,4
    5144:	0009883a 	mov	r4,zero
    5148:	18c7883a 	add	r3,r3,r3
    514c:	18800504 	addi	r2,r3,20
    5150:	21000044 	addi	r4,r4,1
    5154:	b0bffc2e 	bgeu	r22,r2,5148 <_dtoa_r+0xa78>
    5158:	d9801617 	ldw	r6,88(sp)
    515c:	31001115 	stw	r4,68(r6)
    5160:	dc000f17 	ldw	r16,60(sp)
    5164:	003e4b06 	br	4a94 <_dtoa_r+0x3c4>
    5168:	d9801717 	ldw	r6,92(sp)
    516c:	0023883a 	mov	r17,zero
    5170:	31bfff04 	addi	r6,r6,-4
    5174:	d9801715 	stw	r6,92(sp)
    5178:	003df806 	br	495c <_dtoa_r+0x28c>
    517c:	00800804 	movi	r2,32
    5180:	10c9c83a 	sub	r4,r2,r3
    5184:	00c00104 	movi	r3,4
    5188:	19005a16 	blt	r3,r4,52f4 <_dtoa_r+0xc24>
    518c:	008000c4 	movi	r2,3
    5190:	113f7e16 	blt	r2,r4,4f8c <_dtoa_r+0x8bc>
    5194:	20800704 	addi	r2,r4,28
    5198:	003f7506 	br	4f70 <_dtoa_r+0x8a0>
    519c:	d9801717 	ldw	r6,92(sp)
    51a0:	00800044 	movi	r2,1
    51a4:	1180a10e 	bge	r2,r6,542c <_dtoa_r+0xd5c>
    51a8:	d9800f17 	ldw	r6,60(sp)
    51ac:	d8c01017 	ldw	r3,64(sp)
    51b0:	30bfffc4 	addi	r2,r6,-1
    51b4:	1881c616 	blt	r3,r2,58d0 <_dtoa_r+0x1200>
    51b8:	18a5c83a 	sub	r18,r3,r2
    51bc:	d8800f17 	ldw	r2,60(sp)
    51c0:	10026216 	blt	r2,zero,5b4c <_dtoa_r+0x147c>
    51c4:	dc001117 	ldw	r16,68(sp)
    51c8:	1007883a 	mov	r3,r2
    51cc:	d9800a17 	ldw	r6,40(sp)
    51d0:	d8801117 	ldw	r2,68(sp)
    51d4:	d9001617 	ldw	r4,88(sp)
    51d8:	30cd883a 	add	r6,r6,r3
    51dc:	10c5883a 	add	r2,r2,r3
    51e0:	01400044 	movi	r5,1
    51e4:	d9800a15 	stw	r6,40(sp)
    51e8:	d8801115 	stw	r2,68(sp)
    51ec:	0007d9c0 	call	7d9c <__i2b>
    51f0:	1027883a 	mov	r19,r2
    51f4:	003f2506 	br	4e8c <_dtoa_r+0x7bc>
    51f8:	00c00074 	movhi	r3,1
    51fc:	18fca104 	addi	r3,r3,-3452
    5200:	003d6706 	br	47a0 <_dtoa_r+0xd0>
    5204:	dd800517 	ldw	r22,20(sp)
    5208:	04000044 	movi	r16,1
    520c:	00000706 	br	522c <_dtoa_r+0xb5c>
    5210:	d9400717 	ldw	r5,28(sp)
    5214:	d9001617 	ldw	r4,88(sp)
    5218:	01800284 	movi	r6,10
    521c:	000f883a 	mov	r7,zero
    5220:	0007dd80 	call	7dd8 <__multadd>
    5224:	d8800715 	stw	r2,28(sp)
    5228:	84000044 	addi	r16,r16,1
    522c:	d9000717 	ldw	r4,28(sp)
    5230:	900b883a 	mov	r5,r18
    5234:	00044b80 	call	44b8 <quorem>
    5238:	15c00c04 	addi	r23,r2,48
    523c:	b5c00005 	stb	r23,0(r22)
    5240:	d8c00f17 	ldw	r3,60(sp)
    5244:	b5800044 	addi	r22,r22,1
    5248:	80fff116 	blt	r16,r3,5210 <_dtoa_r+0xb40>
    524c:	d8000615 	stw	zero,24(sp)
    5250:	d9400717 	ldw	r5,28(sp)
    5254:	d9001617 	ldw	r4,88(sp)
    5258:	01800044 	movi	r6,1
    525c:	0007a680 	call	7a68 <__lshift>
    5260:	1009883a 	mov	r4,r2
    5264:	900b883a 	mov	r5,r18
    5268:	d8800715 	stw	r2,28(sp)
    526c:	00072800 	call	7280 <__mcmp>
    5270:	00803c0e 	bge	zero,r2,5364 <_dtoa_r+0xc94>
    5274:	b009883a 	mov	r4,r22
    5278:	213fffc4 	addi	r4,r4,-1
    527c:	21400003 	ldbu	r5,0(r4)
    5280:	00800e44 	movi	r2,57
    5284:	28c03fcc 	andi	r3,r5,255
    5288:	18c0201c 	xori	r3,r3,128
    528c:	18ffe004 	addi	r3,r3,-128
    5290:	1881981e 	bne	r3,r2,58f4 <_dtoa_r+0x1224>
    5294:	d9800517 	ldw	r6,20(sp)
    5298:	21bff71e 	bne	r4,r6,5278 <_dtoa_r+0xba8>
    529c:	d8800d17 	ldw	r2,52(sp)
    52a0:	37000044 	addi	fp,r6,1
    52a4:	10800044 	addi	r2,r2,1
    52a8:	d8800d15 	stw	r2,52(sp)
    52ac:	00800c44 	movi	r2,49
    52b0:	30800005 	stb	r2,0(r6)
    52b4:	d9001617 	ldw	r4,88(sp)
    52b8:	900b883a 	mov	r5,r18
    52bc:	00071240 	call	7124 <_Bfree>
    52c0:	983ecd26 	beq	r19,zero,4df8 <_dtoa_r+0x728>
    52c4:	d8c00617 	ldw	r3,24(sp)
    52c8:	18000426 	beq	r3,zero,52dc <_dtoa_r+0xc0c>
    52cc:	1cc00326 	beq	r3,r19,52dc <_dtoa_r+0xc0c>
    52d0:	d9001617 	ldw	r4,88(sp)
    52d4:	180b883a 	mov	r5,r3
    52d8:	00071240 	call	7124 <_Bfree>
    52dc:	d9001617 	ldw	r4,88(sp)
    52e0:	980b883a 	mov	r5,r19
    52e4:	00071240 	call	7124 <_Bfree>
    52e8:	003ec306 	br	4df8 <_dtoa_r+0x728>
    52ec:	1805883a 	mov	r2,r3
    52f0:	003eeb06 	br	4ea0 <_dtoa_r+0x7d0>
    52f4:	d9800a17 	ldw	r6,40(sp)
    52f8:	d8c01117 	ldw	r3,68(sp)
    52fc:	20bfff04 	addi	r2,r4,-4
    5300:	308d883a 	add	r6,r6,r2
    5304:	1887883a 	add	r3,r3,r2
    5308:	80a1883a 	add	r16,r16,r2
    530c:	d9800a15 	stw	r6,40(sp)
    5310:	d8c01115 	stw	r3,68(sp)
    5314:	003f1d06 	br	4f8c <_dtoa_r+0x8bc>
    5318:	a03f0c1e 	bne	r20,zero,4f4c <_dtoa_r+0x87c>
    531c:	00800434 	movhi	r2,16
    5320:	10bfffc4 	addi	r2,r2,-1
    5324:	a884703a 	and	r2,r21,r2
    5328:	103f081e 	bne	r2,zero,4f4c <_dtoa_r+0x87c>
    532c:	a89ffc2c 	andhi	r2,r21,32752
    5330:	103f0626 	beq	r2,zero,4f4c <_dtoa_r+0x87c>
    5334:	d8c01117 	ldw	r3,68(sp)
    5338:	d9000a17 	ldw	r4,40(sp)
    533c:	18c00044 	addi	r3,r3,1
    5340:	21000044 	addi	r4,r4,1
    5344:	d8c01115 	stw	r3,68(sp)
    5348:	d9000a15 	stw	r4,40(sp)
    534c:	003f0006 	br	4f50 <_dtoa_r+0x880>
    5350:	d9400717 	ldw	r5,28(sp)
    5354:	d9001617 	ldw	r4,88(sp)
    5358:	0007ed80 	call	7ed8 <__pow5mult>
    535c:	d8800715 	stw	r2,28(sp)
    5360:	003eed06 	br	4f18 <_dtoa_r+0x848>
    5364:	1000021e 	bne	r2,zero,5370 <_dtoa_r+0xca0>
    5368:	b880004c 	andi	r2,r23,1
    536c:	103fc11e 	bne	r2,zero,5274 <_dtoa_r+0xba4>
    5370:	b5bfffc4 	addi	r22,r22,-1
    5374:	b0c00007 	ldb	r3,0(r22)
    5378:	00800c04 	movi	r2,48
    537c:	18bffc26 	beq	r3,r2,5370 <_dtoa_r+0xca0>
    5380:	b7000044 	addi	fp,r22,1
    5384:	003fcb06 	br	52b4 <_dtoa_r+0xbe4>
    5388:	d9800d17 	ldw	r6,52(sp)
    538c:	018fc83a 	sub	r7,zero,r6
    5390:	3801f726 	beq	r7,zero,5b70 <_dtoa_r+0x14a0>
    5394:	398003cc 	andi	r6,r7,15
    5398:	300c90fa 	slli	r6,r6,3
    539c:	01400074 	movhi	r5,1
    53a0:	297cbf04 	addi	r5,r5,-3332
    53a4:	d9001217 	ldw	r4,72(sp)
    53a8:	314d883a 	add	r6,r6,r5
    53ac:	30c00117 	ldw	r3,4(r6)
    53b0:	30800017 	ldw	r2,0(r6)
    53b4:	d9401317 	ldw	r5,76(sp)
    53b8:	3821d13a 	srai	r16,r7,4
    53bc:	100d883a 	mov	r6,r2
    53c0:	180f883a 	mov	r7,r3
    53c4:	0009ea80 	call	9ea8 <__muldf3>
    53c8:	1011883a 	mov	r8,r2
    53cc:	1813883a 	mov	r9,r3
    53d0:	1029883a 	mov	r20,r2
    53d4:	182b883a 	mov	r21,r3
    53d8:	8001e526 	beq	r16,zero,5b70 <_dtoa_r+0x14a0>
    53dc:	05800084 	movi	r22,2
    53e0:	04400074 	movhi	r17,1
    53e4:	8c7cf104 	addi	r17,r17,-3132
    53e8:	8080004c 	andi	r2,r16,1
    53ec:	1005003a 	cmpeq	r2,r2,zero
    53f0:	1000081e 	bne	r2,zero,5414 <_dtoa_r+0xd44>
    53f4:	89800017 	ldw	r6,0(r17)
    53f8:	89c00117 	ldw	r7,4(r17)
    53fc:	480b883a 	mov	r5,r9
    5400:	4009883a 	mov	r4,r8
    5404:	0009ea80 	call	9ea8 <__muldf3>
    5408:	1011883a 	mov	r8,r2
    540c:	b5800044 	addi	r22,r22,1
    5410:	1813883a 	mov	r9,r3
    5414:	8021d07a 	srai	r16,r16,1
    5418:	8c400204 	addi	r17,r17,8
    541c:	803ff21e 	bne	r16,zero,53e8 <_dtoa_r+0xd18>
    5420:	4029883a 	mov	r20,r8
    5424:	482b883a 	mov	r21,r9
    5428:	003dca06 	br	4b54 <_dtoa_r+0x484>
    542c:	d9000817 	ldw	r4,32(sp)
    5430:	2005003a 	cmpeq	r2,r4,zero
    5434:	1001f61e 	bne	r2,zero,5c10 <_dtoa_r+0x1540>
    5438:	dc001117 	ldw	r16,68(sp)
    543c:	dc801017 	ldw	r18,64(sp)
    5440:	18c10cc4 	addi	r3,r3,1075
    5444:	003f6106 	br	51cc <_dtoa_r+0xafc>
    5448:	d8000b15 	stw	zero,44(sp)
    544c:	d9802617 	ldw	r6,152(sp)
    5450:	d8c00d17 	ldw	r3,52(sp)
    5454:	30800044 	addi	r2,r6,1
    5458:	18ad883a 	add	r22,r3,r2
    545c:	b13fffc4 	addi	r4,r22,-1
    5460:	d9000e15 	stw	r4,56(sp)
    5464:	0581f60e 	bge	zero,r22,5c40 <_dtoa_r+0x1570>
    5468:	dd800f15 	stw	r22,60(sp)
    546c:	003f3006 	br	5130 <_dtoa_r+0xa60>
    5470:	d8000b15 	stw	zero,44(sp)
    5474:	d9002617 	ldw	r4,152(sp)
    5478:	0101eb0e 	bge	zero,r4,5c28 <_dtoa_r+0x1558>
    547c:	202d883a 	mov	r22,r4
    5480:	d9000e15 	stw	r4,56(sp)
    5484:	d9000f15 	stw	r4,60(sp)
    5488:	003f2906 	br	5130 <_dtoa_r+0xa60>
    548c:	01800044 	movi	r6,1
    5490:	d9800b15 	stw	r6,44(sp)
    5494:	003ff706 	br	5474 <_dtoa_r+0xda4>
    5498:	01000044 	movi	r4,1
    549c:	d9000b15 	stw	r4,44(sp)
    54a0:	003fea06 	br	544c <_dtoa_r+0xd7c>
    54a4:	04000c0e 	bge	zero,r16,54d8 <_dtoa_r+0xe08>
    54a8:	d9400717 	ldw	r5,28(sp)
    54ac:	d9001617 	ldw	r4,88(sp)
    54b0:	01800044 	movi	r6,1
    54b4:	0007a680 	call	7a68 <__lshift>
    54b8:	1009883a 	mov	r4,r2
    54bc:	900b883a 	mov	r5,r18
    54c0:	d8800715 	stw	r2,28(sp)
    54c4:	00072800 	call	7280 <__mcmp>
    54c8:	0081e00e 	bge	zero,r2,5c4c <_dtoa_r+0x157c>
    54cc:	bdc00044 	addi	r23,r23,1
    54d0:	00800e84 	movi	r2,58
    54d4:	b881a226 	beq	r23,r2,5b60 <_dtoa_r+0x1490>
    54d8:	b7000044 	addi	fp,r22,1
    54dc:	b5c00005 	stb	r23,0(r22)
    54e0:	003f7406 	br	52b4 <_dtoa_r+0xbe4>
    54e4:	00800e44 	movi	r2,57
    54e8:	b8819d26 	beq	r23,r2,5b60 <_dtoa_r+0x1490>
    54ec:	053ffa0e 	bge	zero,r20,54d8 <_dtoa_r+0xe08>
    54f0:	8dc00c44 	addi	r23,r17,49
    54f4:	003ff806 	br	54d8 <_dtoa_r+0xe08>
    54f8:	d9001617 	ldw	r4,88(sp)
    54fc:	a80b883a 	mov	r5,r21
    5500:	04000044 	movi	r16,1
    5504:	00071240 	call	7124 <_Bfree>
    5508:	003edf06 	br	5088 <_dtoa_r+0x9b8>
    550c:	d9001617 	ldw	r4,88(sp)
    5510:	980b883a 	mov	r5,r19
    5514:	01800284 	movi	r6,10
    5518:	000f883a 	mov	r7,zero
    551c:	0007dd80 	call	7dd8 <__multadd>
    5520:	1027883a 	mov	r19,r2
    5524:	d8800615 	stw	r2,24(sp)
    5528:	003ebb06 	br	5018 <_dtoa_r+0x948>
    552c:	d9801117 	ldw	r6,68(sp)
    5530:	d8800d17 	ldw	r2,52(sp)
    5534:	d8000915 	stw	zero,36(sp)
    5538:	308dc83a 	sub	r6,r6,r2
    553c:	0087c83a 	sub	r3,zero,r2
    5540:	d9801115 	stw	r6,68(sp)
    5544:	d8c01015 	stw	r3,64(sp)
    5548:	003cfe06 	br	4944 <_dtoa_r+0x274>
    554c:	018dc83a 	sub	r6,zero,r6
    5550:	d9801115 	stw	r6,68(sp)
    5554:	d8000a15 	stw	zero,40(sp)
    5558:	003cf306 	br	4928 <_dtoa_r+0x258>
    555c:	d9000d17 	ldw	r4,52(sp)
    5560:	000a76c0 	call	a76c <__floatsidf>
    5564:	880b883a 	mov	r5,r17
    5568:	8009883a 	mov	r4,r16
    556c:	180f883a 	mov	r7,r3
    5570:	100d883a 	mov	r6,r2
    5574:	000a54c0 	call	a54c <__nedf2>
    5578:	103ce126 	beq	r2,zero,4900 <_dtoa_r+0x230>
    557c:	d9800d17 	ldw	r6,52(sp)
    5580:	31bfffc4 	addi	r6,r6,-1
    5584:	d9800d15 	stw	r6,52(sp)
    5588:	003cdd06 	br	4900 <_dtoa_r+0x230>
    558c:	d9000717 	ldw	r4,28(sp)
    5590:	900b883a 	mov	r5,r18
    5594:	00072800 	call	7280 <__mcmp>
    5598:	103e8d0e 	bge	r2,zero,4fd0 <_dtoa_r+0x900>
    559c:	d9400717 	ldw	r5,28(sp)
    55a0:	d9001617 	ldw	r4,88(sp)
    55a4:	01800284 	movi	r6,10
    55a8:	000f883a 	mov	r7,zero
    55ac:	0007dd80 	call	7dd8 <__multadd>
    55b0:	d9800d17 	ldw	r6,52(sp)
    55b4:	d8800715 	stw	r2,28(sp)
    55b8:	31bfffc4 	addi	r6,r6,-1
    55bc:	d9800d15 	stw	r6,52(sp)
    55c0:	b001a71e 	bne	r22,zero,5c60 <_dtoa_r+0x1590>
    55c4:	d8800e17 	ldw	r2,56(sp)
    55c8:	d8800f15 	stw	r2,60(sp)
    55cc:	003e8006 	br	4fd0 <_dtoa_r+0x900>
    55d0:	90800417 	ldw	r2,16(r18)
    55d4:	1085883a 	add	r2,r2,r2
    55d8:	1085883a 	add	r2,r2,r2
    55dc:	1485883a 	add	r2,r2,r18
    55e0:	11000417 	ldw	r4,16(r2)
    55e4:	000714c0 	call	714c <__hi0bits>
    55e8:	00c00804 	movi	r3,32
    55ec:	1887c83a 	sub	r3,r3,r2
    55f0:	003e5a06 	br	4f5c <_dtoa_r+0x88c>
    55f4:	d9400717 	ldw	r5,28(sp)
    55f8:	d9801017 	ldw	r6,64(sp)
    55fc:	d9001617 	ldw	r4,88(sp)
    5600:	0007ed80 	call	7ed8 <__pow5mult>
    5604:	d8800715 	stw	r2,28(sp)
    5608:	003e4306 	br	4f18 <_dtoa_r+0x848>
    560c:	d9800f17 	ldw	r6,60(sp)
    5610:	d8800d17 	ldw	r2,52(sp)
    5614:	d9800315 	stw	r6,12(sp)
    5618:	d8800415 	stw	r2,16(sp)
    561c:	d8c00b17 	ldw	r3,44(sp)
    5620:	1805003a 	cmpeq	r2,r3,zero
    5624:	1000e21e 	bne	r2,zero,59b0 <_dtoa_r+0x12e0>
    5628:	d9000317 	ldw	r4,12(sp)
    562c:	0005883a 	mov	r2,zero
    5630:	00cff834 	movhi	r3,16352
    5634:	200c90fa 	slli	r6,r4,3
    5638:	01000074 	movhi	r4,1
    563c:	213cbf04 	addi	r4,r4,-3332
    5640:	180b883a 	mov	r5,r3
    5644:	310d883a 	add	r6,r6,r4
    5648:	327fff17 	ldw	r9,-4(r6)
    564c:	323ffe17 	ldw	r8,-8(r6)
    5650:	1009883a 	mov	r4,r2
    5654:	480f883a 	mov	r7,r9
    5658:	400d883a 	mov	r6,r8
    565c:	000a26c0 	call	a26c <__divdf3>
    5660:	180b883a 	mov	r5,r3
    5664:	b00d883a 	mov	r6,r22
    5668:	b80f883a 	mov	r7,r23
    566c:	1009883a 	mov	r4,r2
    5670:	0009db40 	call	9db4 <__subdf3>
    5674:	a80b883a 	mov	r5,r21
    5678:	a009883a 	mov	r4,r20
    567c:	d8c01915 	stw	r3,100(sp)
    5680:	d8801815 	stw	r2,96(sp)
    5684:	000a8640 	call	a864 <__fixdfsi>
    5688:	1009883a 	mov	r4,r2
    568c:	1027883a 	mov	r19,r2
    5690:	000a76c0 	call	a76c <__floatsidf>
    5694:	a80b883a 	mov	r5,r21
    5698:	a009883a 	mov	r4,r20
    569c:	180f883a 	mov	r7,r3
    56a0:	100d883a 	mov	r6,r2
    56a4:	0009db40 	call	9db4 <__subdf3>
    56a8:	d9801817 	ldw	r6,96(sp)
    56ac:	1823883a 	mov	r17,r3
    56b0:	d8801415 	stw	r2,80(sp)
    56b4:	302d883a 	mov	r22,r6
    56b8:	d9800517 	ldw	r6,20(sp)
    56bc:	9cc00c04 	addi	r19,r19,48
    56c0:	dc401515 	stw	r17,84(sp)
    56c4:	d8c01917 	ldw	r3,100(sp)
    56c8:	34c00005 	stb	r19,0(r6)
    56cc:	d8800517 	ldw	r2,20(sp)
    56d0:	d9401917 	ldw	r5,100(sp)
    56d4:	d9801417 	ldw	r6,80(sp)
    56d8:	b009883a 	mov	r4,r22
    56dc:	880f883a 	mov	r7,r17
    56e0:	182f883a 	mov	r23,r3
    56e4:	17000044 	addi	fp,r2,1
    56e8:	000a5d40 	call	a5d4 <__gtdf2>
    56ec:	00804e16 	blt	zero,r2,5828 <_dtoa_r+0x1158>
    56f0:	d9801417 	ldw	r6,80(sp)
    56f4:	0005883a 	mov	r2,zero
    56f8:	00cffc34 	movhi	r3,16368
    56fc:	180b883a 	mov	r5,r3
    5700:	880f883a 	mov	r7,r17
    5704:	1009883a 	mov	r4,r2
    5708:	0009db40 	call	9db4 <__subdf3>
    570c:	d9401917 	ldw	r5,100(sp)
    5710:	180f883a 	mov	r7,r3
    5714:	b009883a 	mov	r4,r22
    5718:	100d883a 	mov	r6,r2
    571c:	000a5d40 	call	a5d4 <__gtdf2>
    5720:	00bda216 	blt	zero,r2,4dac <_dtoa_r+0x6dc>
    5724:	d8c00317 	ldw	r3,12(sp)
    5728:	00800044 	movi	r2,1
    572c:	10c01216 	blt	r2,r3,5778 <_dtoa_r+0x10a8>
    5730:	003d4506 	br	4c48 <_dtoa_r+0x578>
    5734:	d9801417 	ldw	r6,80(sp)
    5738:	0005883a 	mov	r2,zero
    573c:	00cffc34 	movhi	r3,16368
    5740:	180b883a 	mov	r5,r3
    5744:	880f883a 	mov	r7,r17
    5748:	1009883a 	mov	r4,r2
    574c:	0009db40 	call	9db4 <__subdf3>
    5750:	d9c01b17 	ldw	r7,108(sp)
    5754:	180b883a 	mov	r5,r3
    5758:	1009883a 	mov	r4,r2
    575c:	b00d883a 	mov	r6,r22
    5760:	000a6e40 	call	a6e4 <__ltdf2>
    5764:	103d9116 	blt	r2,zero,4dac <_dtoa_r+0x6dc>
    5768:	d9800517 	ldw	r6,20(sp)
    576c:	d9000317 	ldw	r4,12(sp)
    5770:	3105883a 	add	r2,r6,r4
    5774:	e0bd3426 	beq	fp,r2,4c48 <_dtoa_r+0x578>
    5778:	04500934 	movhi	r17,16420
    577c:	0021883a 	mov	r16,zero
    5780:	b80b883a 	mov	r5,r23
    5784:	b009883a 	mov	r4,r22
    5788:	800d883a 	mov	r6,r16
    578c:	880f883a 	mov	r7,r17
    5790:	0009ea80 	call	9ea8 <__muldf3>
    5794:	d9401517 	ldw	r5,84(sp)
    5798:	d9001417 	ldw	r4,80(sp)
    579c:	880f883a 	mov	r7,r17
    57a0:	000d883a 	mov	r6,zero
    57a4:	d8801a15 	stw	r2,104(sp)
    57a8:	d8c01b15 	stw	r3,108(sp)
    57ac:	0009ea80 	call	9ea8 <__muldf3>
    57b0:	180b883a 	mov	r5,r3
    57b4:	1009883a 	mov	r4,r2
    57b8:	1823883a 	mov	r17,r3
    57bc:	1021883a 	mov	r16,r2
    57c0:	000a8640 	call	a864 <__fixdfsi>
    57c4:	1009883a 	mov	r4,r2
    57c8:	102b883a 	mov	r21,r2
    57cc:	000a76c0 	call	a76c <__floatsidf>
    57d0:	880b883a 	mov	r5,r17
    57d4:	8009883a 	mov	r4,r16
    57d8:	180f883a 	mov	r7,r3
    57dc:	100d883a 	mov	r6,r2
    57e0:	0009db40 	call	9db4 <__subdf3>
    57e4:	1021883a 	mov	r16,r2
    57e8:	d9001b17 	ldw	r4,108(sp)
    57ec:	1823883a 	mov	r17,r3
    57f0:	dc001415 	stw	r16,80(sp)
    57f4:	ad400c04 	addi	r21,r21,48
    57f8:	dc401515 	stw	r17,84(sp)
    57fc:	d8801a17 	ldw	r2,104(sp)
    5800:	e5400005 	stb	r21,0(fp)
    5804:	202f883a 	mov	r23,r4
    5808:	d9c01b17 	ldw	r7,108(sp)
    580c:	d9001417 	ldw	r4,80(sp)
    5810:	880b883a 	mov	r5,r17
    5814:	100d883a 	mov	r6,r2
    5818:	102d883a 	mov	r22,r2
    581c:	e7000044 	addi	fp,fp,1
    5820:	000a6e40 	call	a6e4 <__ltdf2>
    5824:	103fc30e 	bge	r2,zero,5734 <_dtoa_r+0x1064>
    5828:	d9000417 	ldw	r4,16(sp)
    582c:	d9000d15 	stw	r4,52(sp)
    5830:	003d7106 	br	4df8 <_dtoa_r+0x728>
    5834:	d9801717 	ldw	r6,92(sp)
    5838:	00800084 	movi	r2,2
    583c:	11bde60e 	bge	r2,r6,4fd8 <_dtoa_r+0x908>
    5840:	203cfb1e 	bne	r4,zero,4c30 <_dtoa_r+0x560>
    5844:	d9001617 	ldw	r4,88(sp)
    5848:	900b883a 	mov	r5,r18
    584c:	01800144 	movi	r6,5
    5850:	000f883a 	mov	r7,zero
    5854:	0007dd80 	call	7dd8 <__multadd>
    5858:	d9000717 	ldw	r4,28(sp)
    585c:	100b883a 	mov	r5,r2
    5860:	1025883a 	mov	r18,r2
    5864:	00072800 	call	7280 <__mcmp>
    5868:	00bcf10e 	bge	zero,r2,4c30 <_dtoa_r+0x560>
    586c:	d8c00d17 	ldw	r3,52(sp)
    5870:	d9000517 	ldw	r4,20(sp)
    5874:	d8000615 	stw	zero,24(sp)
    5878:	18c00044 	addi	r3,r3,1
    587c:	d8c00d15 	stw	r3,52(sp)
    5880:	00800c44 	movi	r2,49
    5884:	27000044 	addi	fp,r4,1
    5888:	20800005 	stb	r2,0(r4)
    588c:	003e8906 	br	52b4 <_dtoa_r+0xbe4>
    5890:	d8c00517 	ldw	r3,20(sp)
    5894:	003bc206 	br	47a0 <_dtoa_r+0xd0>
    5898:	01800074 	movhi	r6,1
    589c:	31bcf104 	addi	r6,r6,-3132
    58a0:	30c00917 	ldw	r3,36(r6)
    58a4:	30800817 	ldw	r2,32(r6)
    58a8:	d9001217 	ldw	r4,72(sp)
    58ac:	d9401317 	ldw	r5,76(sp)
    58b0:	180f883a 	mov	r7,r3
    58b4:	100d883a 	mov	r6,r2
    58b8:	000a26c0 	call	a26c <__divdf3>
    58bc:	948003cc 	andi	r18,r18,15
    58c0:	058000c4 	movi	r22,3
    58c4:	1029883a 	mov	r20,r2
    58c8:	182b883a 	mov	r21,r3
    58cc:	003c8906 	br	4af4 <_dtoa_r+0x424>
    58d0:	d9001017 	ldw	r4,64(sp)
    58d4:	d9800917 	ldw	r6,36(sp)
    58d8:	0025883a 	mov	r18,zero
    58dc:	1105c83a 	sub	r2,r2,r4
    58e0:	2089883a 	add	r4,r4,r2
    58e4:	308d883a 	add	r6,r6,r2
    58e8:	d9001015 	stw	r4,64(sp)
    58ec:	d9800915 	stw	r6,36(sp)
    58f0:	003e3206 	br	51bc <_dtoa_r+0xaec>
    58f4:	28800044 	addi	r2,r5,1
    58f8:	27000044 	addi	fp,r4,1
    58fc:	20800005 	stb	r2,0(r4)
    5900:	003e6c06 	br	52b4 <_dtoa_r+0xbe4>
    5904:	d8800f17 	ldw	r2,60(sp)
    5908:	00bce016 	blt	zero,r2,4c8c <_dtoa_r+0x5bc>
    590c:	d9800f17 	ldw	r6,60(sp)
    5910:	303cc51e 	bne	r6,zero,4c28 <_dtoa_r+0x558>
    5914:	0005883a 	mov	r2,zero
    5918:	00d00534 	movhi	r3,16404
    591c:	980b883a 	mov	r5,r19
    5920:	180f883a 	mov	r7,r3
    5924:	9009883a 	mov	r4,r18
    5928:	100d883a 	mov	r6,r2
    592c:	0009ea80 	call	9ea8 <__muldf3>
    5930:	180b883a 	mov	r5,r3
    5934:	a80f883a 	mov	r7,r21
    5938:	1009883a 	mov	r4,r2
    593c:	a00d883a 	mov	r6,r20
    5940:	000a65c0 	call	a65c <__gedf2>
    5944:	103cb80e 	bge	r2,zero,4c28 <_dtoa_r+0x558>
    5948:	0027883a 	mov	r19,zero
    594c:	0025883a 	mov	r18,zero
    5950:	003fc606 	br	586c <_dtoa_r+0x119c>
    5954:	99400117 	ldw	r5,4(r19)
    5958:	d9001617 	ldw	r4,88(sp)
    595c:	00076a40 	call	76a4 <_Balloc>
    5960:	99800417 	ldw	r6,16(r19)
    5964:	11000304 	addi	r4,r2,12
    5968:	99400304 	addi	r5,r19,12
    596c:	318d883a 	add	r6,r6,r6
    5970:	318d883a 	add	r6,r6,r6
    5974:	31800204 	addi	r6,r6,8
    5978:	1023883a 	mov	r17,r2
    597c:	0006f0c0 	call	6f0c <memcpy>
    5980:	d9001617 	ldw	r4,88(sp)
    5984:	880b883a 	mov	r5,r17
    5988:	01800044 	movi	r6,1
    598c:	0007a680 	call	7a68 <__lshift>
    5990:	100b883a 	mov	r5,r2
    5994:	003d9c06 	br	5008 <_dtoa_r+0x938>
    5998:	00800e44 	movi	r2,57
    599c:	b8807026 	beq	r23,r2,5b60 <_dtoa_r+0x1490>
    59a0:	b8800044 	addi	r2,r23,1
    59a4:	b7000044 	addi	fp,r22,1
    59a8:	b0800005 	stb	r2,0(r22)
    59ac:	003e4106 	br	52b4 <_dtoa_r+0xbe4>
    59b0:	d8800317 	ldw	r2,12(sp)
    59b4:	01800074 	movhi	r6,1
    59b8:	31bcbf04 	addi	r6,r6,-3332
    59bc:	b009883a 	mov	r4,r22
    59c0:	100e90fa 	slli	r7,r2,3
    59c4:	b80b883a 	mov	r5,r23
    59c8:	398f883a 	add	r7,r7,r6
    59cc:	38bffe17 	ldw	r2,-8(r7)
    59d0:	d9800517 	ldw	r6,20(sp)
    59d4:	38ffff17 	ldw	r3,-4(r7)
    59d8:	37000044 	addi	fp,r6,1
    59dc:	180f883a 	mov	r7,r3
    59e0:	100d883a 	mov	r6,r2
    59e4:	0009ea80 	call	9ea8 <__muldf3>
    59e8:	a80b883a 	mov	r5,r21
    59ec:	a009883a 	mov	r4,r20
    59f0:	182f883a 	mov	r23,r3
    59f4:	102d883a 	mov	r22,r2
    59f8:	000a8640 	call	a864 <__fixdfsi>
    59fc:	1009883a 	mov	r4,r2
    5a00:	1027883a 	mov	r19,r2
    5a04:	000a76c0 	call	a76c <__floatsidf>
    5a08:	a80b883a 	mov	r5,r21
    5a0c:	a009883a 	mov	r4,r20
    5a10:	180f883a 	mov	r7,r3
    5a14:	100d883a 	mov	r6,r2
    5a18:	0009db40 	call	9db4 <__subdf3>
    5a1c:	180b883a 	mov	r5,r3
    5a20:	d8c00517 	ldw	r3,20(sp)
    5a24:	9cc00c04 	addi	r19,r19,48
    5a28:	1009883a 	mov	r4,r2
    5a2c:	1cc00005 	stb	r19,0(r3)
    5a30:	2021883a 	mov	r16,r4
    5a34:	d9000317 	ldw	r4,12(sp)
    5a38:	00800044 	movi	r2,1
    5a3c:	2823883a 	mov	r17,r5
    5a40:	20802226 	beq	r4,r2,5acc <_dtoa_r+0x13fc>
    5a44:	1029883a 	mov	r20,r2
    5a48:	0005883a 	mov	r2,zero
    5a4c:	00d00934 	movhi	r3,16420
    5a50:	180f883a 	mov	r7,r3
    5a54:	100d883a 	mov	r6,r2
    5a58:	880b883a 	mov	r5,r17
    5a5c:	8009883a 	mov	r4,r16
    5a60:	0009ea80 	call	9ea8 <__muldf3>
    5a64:	180b883a 	mov	r5,r3
    5a68:	1009883a 	mov	r4,r2
    5a6c:	1823883a 	mov	r17,r3
    5a70:	1021883a 	mov	r16,r2
    5a74:	000a8640 	call	a864 <__fixdfsi>
    5a78:	1009883a 	mov	r4,r2
    5a7c:	102b883a 	mov	r21,r2
    5a80:	000a76c0 	call	a76c <__floatsidf>
    5a84:	880b883a 	mov	r5,r17
    5a88:	8009883a 	mov	r4,r16
    5a8c:	180f883a 	mov	r7,r3
    5a90:	100d883a 	mov	r6,r2
    5a94:	0009db40 	call	9db4 <__subdf3>
    5a98:	180b883a 	mov	r5,r3
    5a9c:	d8c00517 	ldw	r3,20(sp)
    5aa0:	1009883a 	mov	r4,r2
    5aa4:	ad400c04 	addi	r21,r21,48
    5aa8:	1d05883a 	add	r2,r3,r20
    5aac:	15400005 	stb	r21,0(r2)
    5ab0:	2021883a 	mov	r16,r4
    5ab4:	d9000317 	ldw	r4,12(sp)
    5ab8:	a5000044 	addi	r20,r20,1
    5abc:	2823883a 	mov	r17,r5
    5ac0:	a13fe11e 	bne	r20,r4,5a48 <_dtoa_r+0x1378>
    5ac4:	e505883a 	add	r2,fp,r20
    5ac8:	173fffc4 	addi	fp,r2,-1
    5acc:	0025883a 	mov	r18,zero
    5ad0:	04cff834 	movhi	r19,16352
    5ad4:	b009883a 	mov	r4,r22
    5ad8:	b80b883a 	mov	r5,r23
    5adc:	900d883a 	mov	r6,r18
    5ae0:	980f883a 	mov	r7,r19
    5ae4:	0009e340 	call	9e34 <__adddf3>
    5ae8:	180b883a 	mov	r5,r3
    5aec:	1009883a 	mov	r4,r2
    5af0:	800d883a 	mov	r6,r16
    5af4:	880f883a 	mov	r7,r17
    5af8:	000a6e40 	call	a6e4 <__ltdf2>
    5afc:	103cab16 	blt	r2,zero,4dac <_dtoa_r+0x6dc>
    5b00:	0009883a 	mov	r4,zero
    5b04:	980b883a 	mov	r5,r19
    5b08:	b80f883a 	mov	r7,r23
    5b0c:	b00d883a 	mov	r6,r22
    5b10:	0009db40 	call	9db4 <__subdf3>
    5b14:	180b883a 	mov	r5,r3
    5b18:	880f883a 	mov	r7,r17
    5b1c:	1009883a 	mov	r4,r2
    5b20:	800d883a 	mov	r6,r16
    5b24:	000a5d40 	call	a5d4 <__gtdf2>
    5b28:	00bc470e 	bge	zero,r2,4c48 <_dtoa_r+0x578>
    5b2c:	00c00c04 	movi	r3,48
    5b30:	e73fffc4 	addi	fp,fp,-1
    5b34:	e0800007 	ldb	r2,0(fp)
    5b38:	10fffd26 	beq	r2,r3,5b30 <_dtoa_r+0x1460>
    5b3c:	d9800417 	ldw	r6,16(sp)
    5b40:	e7000044 	addi	fp,fp,1
    5b44:	d9800d15 	stw	r6,52(sp)
    5b48:	003cab06 	br	4df8 <_dtoa_r+0x728>
    5b4c:	d8c00f17 	ldw	r3,60(sp)
    5b50:	d9001117 	ldw	r4,68(sp)
    5b54:	20e1c83a 	sub	r16,r4,r3
    5b58:	0007883a 	mov	r3,zero
    5b5c:	003d9b06 	br	51cc <_dtoa_r+0xafc>
    5b60:	00800e44 	movi	r2,57
    5b64:	b0800005 	stb	r2,0(r22)
    5b68:	b5800044 	addi	r22,r22,1
    5b6c:	003dc106 	br	5274 <_dtoa_r+0xba4>
    5b70:	05800084 	movi	r22,2
    5b74:	003bf706 	br	4b54 <_dtoa_r+0x484>
    5b78:	d9000f17 	ldw	r4,60(sp)
    5b7c:	013c000e 	bge	zero,r4,4b80 <_dtoa_r+0x4b0>
    5b80:	d9800e17 	ldw	r6,56(sp)
    5b84:	01bc300e 	bge	zero,r6,4c48 <_dtoa_r+0x578>
    5b88:	0005883a 	mov	r2,zero
    5b8c:	00d00934 	movhi	r3,16420
    5b90:	a80b883a 	mov	r5,r21
    5b94:	180f883a 	mov	r7,r3
    5b98:	a009883a 	mov	r4,r20
    5b9c:	100d883a 	mov	r6,r2
    5ba0:	0009ea80 	call	9ea8 <__muldf3>
    5ba4:	b1000044 	addi	r4,r22,1
    5ba8:	1021883a 	mov	r16,r2
    5bac:	1823883a 	mov	r17,r3
    5bb0:	000a76c0 	call	a76c <__floatsidf>
    5bb4:	880b883a 	mov	r5,r17
    5bb8:	8009883a 	mov	r4,r16
    5bbc:	180f883a 	mov	r7,r3
    5bc0:	100d883a 	mov	r6,r2
    5bc4:	0009ea80 	call	9ea8 <__muldf3>
    5bc8:	0011883a 	mov	r8,zero
    5bcc:	02500734 	movhi	r9,16412
    5bd0:	180b883a 	mov	r5,r3
    5bd4:	480f883a 	mov	r7,r9
    5bd8:	1009883a 	mov	r4,r2
    5bdc:	400d883a 	mov	r6,r8
    5be0:	0009e340 	call	9e34 <__adddf3>
    5be4:	102d883a 	mov	r22,r2
    5be8:	00bf3034 	movhi	r2,64704
    5bec:	10ef883a 	add	r23,r2,r3
    5bf0:	d8800d17 	ldw	r2,52(sp)
    5bf4:	d8c00e17 	ldw	r3,56(sp)
    5bf8:	8029883a 	mov	r20,r16
    5bfc:	10bfffc4 	addi	r2,r2,-1
    5c00:	882b883a 	mov	r21,r17
    5c04:	d8800415 	stw	r2,16(sp)
    5c08:	d8c00315 	stw	r3,12(sp)
    5c0c:	003e8306 	br	561c <_dtoa_r+0xf4c>
    5c10:	d8800117 	ldw	r2,4(sp)
    5c14:	dc001117 	ldw	r16,68(sp)
    5c18:	dc801017 	ldw	r18,64(sp)
    5c1c:	00c00d84 	movi	r3,54
    5c20:	1887c83a 	sub	r3,r3,r2
    5c24:	003d6906 	br	51cc <_dtoa_r+0xafc>
    5c28:	01800044 	movi	r6,1
    5c2c:	3021883a 	mov	r16,r6
    5c30:	d9800f15 	stw	r6,60(sp)
    5c34:	d9802615 	stw	r6,152(sp)
    5c38:	d9800e15 	stw	r6,56(sp)
    5c3c:	003b9306 	br	4a8c <_dtoa_r+0x3bc>
    5c40:	b021883a 	mov	r16,r22
    5c44:	dd800f15 	stw	r22,60(sp)
    5c48:	003b9006 	br	4a8c <_dtoa_r+0x3bc>
    5c4c:	103e221e 	bne	r2,zero,54d8 <_dtoa_r+0xe08>
    5c50:	b880004c 	andi	r2,r23,1
    5c54:	1005003a 	cmpeq	r2,r2,zero
    5c58:	103e1f1e 	bne	r2,zero,54d8 <_dtoa_r+0xe08>
    5c5c:	003e1b06 	br	54cc <_dtoa_r+0xdfc>
    5c60:	d9001617 	ldw	r4,88(sp)
    5c64:	980b883a 	mov	r5,r19
    5c68:	01800284 	movi	r6,10
    5c6c:	000f883a 	mov	r7,zero
    5c70:	0007dd80 	call	7dd8 <__multadd>
    5c74:	d8c00e17 	ldw	r3,56(sp)
    5c78:	1027883a 	mov	r19,r2
    5c7c:	d8c00f15 	stw	r3,60(sp)
    5c80:	003cd306 	br	4fd0 <_dtoa_r+0x900>

00005c84 <_fflush_r>:
    5c84:	defffb04 	addi	sp,sp,-20
    5c88:	dcc00315 	stw	r19,12(sp)
    5c8c:	dc800215 	stw	r18,8(sp)
    5c90:	dfc00415 	stw	ra,16(sp)
    5c94:	dc400115 	stw	r17,4(sp)
    5c98:	dc000015 	stw	r16,0(sp)
    5c9c:	2027883a 	mov	r19,r4
    5ca0:	2825883a 	mov	r18,r5
    5ca4:	20000226 	beq	r4,zero,5cb0 <_fflush_r+0x2c>
    5ca8:	20800e17 	ldw	r2,56(r4)
    5cac:	10005626 	beq	r2,zero,5e08 <_fflush_r+0x184>
    5cb0:	9100030b 	ldhu	r4,12(r18)
    5cb4:	20ffffcc 	andi	r3,r4,65535
    5cb8:	18e0001c 	xori	r3,r3,32768
    5cbc:	18e00004 	addi	r3,r3,-32768
    5cc0:	1880020c 	andi	r2,r3,8
    5cc4:	1000261e 	bne	r2,zero,5d60 <_fflush_r+0xdc>
    5cc8:	90c00117 	ldw	r3,4(r18)
    5ccc:	20820014 	ori	r2,r4,2048
    5cd0:	9080030d 	sth	r2,12(r18)
    5cd4:	1009883a 	mov	r4,r2
    5cd8:	00c0400e 	bge	zero,r3,5ddc <_fflush_r+0x158>
    5cdc:	92000a17 	ldw	r8,40(r18)
    5ce0:	40004026 	beq	r8,zero,5de4 <_fflush_r+0x160>
    5ce4:	2084000c 	andi	r2,r4,4096
    5ce8:	10005326 	beq	r2,zero,5e38 <_fflush_r+0x1b4>
    5cec:	94001417 	ldw	r16,80(r18)
    5cf0:	9080030b 	ldhu	r2,12(r18)
    5cf4:	1080010c 	andi	r2,r2,4
    5cf8:	1000481e 	bne	r2,zero,5e1c <_fflush_r+0x198>
    5cfc:	91400717 	ldw	r5,28(r18)
    5d00:	9809883a 	mov	r4,r19
    5d04:	800d883a 	mov	r6,r16
    5d08:	000f883a 	mov	r7,zero
    5d0c:	403ee83a 	callr	r8
    5d10:	8080261e 	bne	r16,r2,5dac <_fflush_r+0x128>
    5d14:	9080030b 	ldhu	r2,12(r18)
    5d18:	91000417 	ldw	r4,16(r18)
    5d1c:	90000115 	stw	zero,4(r18)
    5d20:	10bdffcc 	andi	r2,r2,63487
    5d24:	10ffffcc 	andi	r3,r2,65535
    5d28:	18c4000c 	andi	r3,r3,4096
    5d2c:	9080030d 	sth	r2,12(r18)
    5d30:	91000015 	stw	r4,0(r18)
    5d34:	18002b26 	beq	r3,zero,5de4 <_fflush_r+0x160>
    5d38:	0007883a 	mov	r3,zero
    5d3c:	1805883a 	mov	r2,r3
    5d40:	94001415 	stw	r16,80(r18)
    5d44:	dfc00417 	ldw	ra,16(sp)
    5d48:	dcc00317 	ldw	r19,12(sp)
    5d4c:	dc800217 	ldw	r18,8(sp)
    5d50:	dc400117 	ldw	r17,4(sp)
    5d54:	dc000017 	ldw	r16,0(sp)
    5d58:	dec00504 	addi	sp,sp,20
    5d5c:	f800283a 	ret
    5d60:	94400417 	ldw	r17,16(r18)
    5d64:	88001f26 	beq	r17,zero,5de4 <_fflush_r+0x160>
    5d68:	90800017 	ldw	r2,0(r18)
    5d6c:	18c000cc 	andi	r3,r3,3
    5d70:	94400015 	stw	r17,0(r18)
    5d74:	1461c83a 	sub	r16,r2,r17
    5d78:	18002526 	beq	r3,zero,5e10 <_fflush_r+0x18c>
    5d7c:	0005883a 	mov	r2,zero
    5d80:	90800215 	stw	r2,8(r18)
    5d84:	0400170e 	bge	zero,r16,5de4 <_fflush_r+0x160>
    5d88:	90c00917 	ldw	r3,36(r18)
    5d8c:	91400717 	ldw	r5,28(r18)
    5d90:	880d883a 	mov	r6,r17
    5d94:	800f883a 	mov	r7,r16
    5d98:	9809883a 	mov	r4,r19
    5d9c:	183ee83a 	callr	r3
    5da0:	88a3883a 	add	r17,r17,r2
    5da4:	80a1c83a 	sub	r16,r16,r2
    5da8:	00bff616 	blt	zero,r2,5d84 <_fflush_r+0x100>
    5dac:	9080030b 	ldhu	r2,12(r18)
    5db0:	00ffffc4 	movi	r3,-1
    5db4:	10801014 	ori	r2,r2,64
    5db8:	9080030d 	sth	r2,12(r18)
    5dbc:	1805883a 	mov	r2,r3
    5dc0:	dfc00417 	ldw	ra,16(sp)
    5dc4:	dcc00317 	ldw	r19,12(sp)
    5dc8:	dc800217 	ldw	r18,8(sp)
    5dcc:	dc400117 	ldw	r17,4(sp)
    5dd0:	dc000017 	ldw	r16,0(sp)
    5dd4:	dec00504 	addi	sp,sp,20
    5dd8:	f800283a 	ret
    5ddc:	90800f17 	ldw	r2,60(r18)
    5de0:	00bfbe16 	blt	zero,r2,5cdc <_fflush_r+0x58>
    5de4:	0007883a 	mov	r3,zero
    5de8:	1805883a 	mov	r2,r3
    5dec:	dfc00417 	ldw	ra,16(sp)
    5df0:	dcc00317 	ldw	r19,12(sp)
    5df4:	dc800217 	ldw	r18,8(sp)
    5df8:	dc400117 	ldw	r17,4(sp)
    5dfc:	dc000017 	ldw	r16,0(sp)
    5e00:	dec00504 	addi	sp,sp,20
    5e04:	f800283a 	ret
    5e08:	0005f1c0 	call	5f1c <__sinit>
    5e0c:	003fa806 	br	5cb0 <_fflush_r+0x2c>
    5e10:	90800517 	ldw	r2,20(r18)
    5e14:	90800215 	stw	r2,8(r18)
    5e18:	003fda06 	br	5d84 <_fflush_r+0x100>
    5e1c:	90800117 	ldw	r2,4(r18)
    5e20:	90c00c17 	ldw	r3,48(r18)
    5e24:	80a1c83a 	sub	r16,r16,r2
    5e28:	183fb426 	beq	r3,zero,5cfc <_fflush_r+0x78>
    5e2c:	90800f17 	ldw	r2,60(r18)
    5e30:	80a1c83a 	sub	r16,r16,r2
    5e34:	003fb106 	br	5cfc <_fflush_r+0x78>
    5e38:	91400717 	ldw	r5,28(r18)
    5e3c:	9809883a 	mov	r4,r19
    5e40:	000d883a 	mov	r6,zero
    5e44:	01c00044 	movi	r7,1
    5e48:	403ee83a 	callr	r8
    5e4c:	1021883a 	mov	r16,r2
    5e50:	00bfffc4 	movi	r2,-1
    5e54:	80800226 	beq	r16,r2,5e60 <_fflush_r+0x1dc>
    5e58:	92000a17 	ldw	r8,40(r18)
    5e5c:	003fa406 	br	5cf0 <_fflush_r+0x6c>
    5e60:	98c00017 	ldw	r3,0(r19)
    5e64:	00800744 	movi	r2,29
    5e68:	18bfde26 	beq	r3,r2,5de4 <_fflush_r+0x160>
    5e6c:	9080030b 	ldhu	r2,12(r18)
    5e70:	8007883a 	mov	r3,r16
    5e74:	10801014 	ori	r2,r2,64
    5e78:	9080030d 	sth	r2,12(r18)
    5e7c:	003fcf06 	br	5dbc <_fflush_r+0x138>

00005e80 <fflush>:
    5e80:	01400034 	movhi	r5,0
    5e84:	29572104 	addi	r5,r5,23684
    5e88:	2007883a 	mov	r3,r4
    5e8c:	20000526 	beq	r4,zero,5ea4 <fflush+0x24>
    5e90:	00800074 	movhi	r2,1
    5e94:	10853a04 	addi	r2,r2,5352
    5e98:	11000017 	ldw	r4,0(r2)
    5e9c:	180b883a 	mov	r5,r3
    5ea0:	0005c841 	jmpi	5c84 <_fflush_r>
    5ea4:	00800074 	movhi	r2,1
    5ea8:	10853b04 	addi	r2,r2,5356
    5eac:	11000017 	ldw	r4,0(r2)
    5eb0:	0006a501 	jmpi	6a50 <_fwalk_reent>

00005eb4 <std>:
    5eb4:	00800074 	movhi	r2,1
    5eb8:	10a1df04 	addi	r2,r2,-30852
    5ebc:	20800b15 	stw	r2,44(r4)
    5ec0:	00800074 	movhi	r2,1
    5ec4:	10a21a04 	addi	r2,r2,-30616
    5ec8:	20800815 	stw	r2,32(r4)
    5ecc:	00c00074 	movhi	r3,1
    5ed0:	18e1fb04 	addi	r3,r3,-30740
    5ed4:	00800074 	movhi	r2,1
    5ed8:	10a1e104 	addi	r2,r2,-30844
    5edc:	2140030d 	sth	r5,12(r4)
    5ee0:	2180038d 	sth	r6,14(r4)
    5ee4:	20c00915 	stw	r3,36(r4)
    5ee8:	20800a15 	stw	r2,40(r4)
    5eec:	20000015 	stw	zero,0(r4)
    5ef0:	20000115 	stw	zero,4(r4)
    5ef4:	20000215 	stw	zero,8(r4)
    5ef8:	20000415 	stw	zero,16(r4)
    5efc:	20000515 	stw	zero,20(r4)
    5f00:	20000615 	stw	zero,24(r4)
    5f04:	21000715 	stw	r4,28(r4)
    5f08:	f800283a 	ret

00005f0c <__sfp_lock_acquire>:
    5f0c:	f800283a 	ret

00005f10 <__sfp_lock_release>:
    5f10:	f800283a 	ret

00005f14 <__sinit_lock_acquire>:
    5f14:	f800283a 	ret

00005f18 <__sinit_lock_release>:
    5f18:	f800283a 	ret

00005f1c <__sinit>:
    5f1c:	20800e17 	ldw	r2,56(r4)
    5f20:	defffd04 	addi	sp,sp,-12
    5f24:	dc400115 	stw	r17,4(sp)
    5f28:	dc000015 	stw	r16,0(sp)
    5f2c:	dfc00215 	stw	ra,8(sp)
    5f30:	04400044 	movi	r17,1
    5f34:	01400104 	movi	r5,4
    5f38:	000d883a 	mov	r6,zero
    5f3c:	2021883a 	mov	r16,r4
    5f40:	2200bb04 	addi	r8,r4,748
    5f44:	200f883a 	mov	r7,r4
    5f48:	10000526 	beq	r2,zero,5f60 <__sinit+0x44>
    5f4c:	dfc00217 	ldw	ra,8(sp)
    5f50:	dc400117 	ldw	r17,4(sp)
    5f54:	dc000017 	ldw	r16,0(sp)
    5f58:	dec00304 	addi	sp,sp,12
    5f5c:	f800283a 	ret
    5f60:	21000117 	ldw	r4,4(r4)
    5f64:	00800034 	movhi	r2,0
    5f68:	10980004 	addi	r2,r2,24576
    5f6c:	00c000c4 	movi	r3,3
    5f70:	80800f15 	stw	r2,60(r16)
    5f74:	80c0b915 	stw	r3,740(r16)
    5f78:	8200ba15 	stw	r8,744(r16)
    5f7c:	84400e15 	stw	r17,56(r16)
    5f80:	8000b815 	stw	zero,736(r16)
    5f84:	0005eb40 	call	5eb4 <std>
    5f88:	81000217 	ldw	r4,8(r16)
    5f8c:	880d883a 	mov	r6,r17
    5f90:	800f883a 	mov	r7,r16
    5f94:	01400284 	movi	r5,10
    5f98:	0005eb40 	call	5eb4 <std>
    5f9c:	81000317 	ldw	r4,12(r16)
    5fa0:	800f883a 	mov	r7,r16
    5fa4:	01400484 	movi	r5,18
    5fa8:	01800084 	movi	r6,2
    5fac:	dfc00217 	ldw	ra,8(sp)
    5fb0:	dc400117 	ldw	r17,4(sp)
    5fb4:	dc000017 	ldw	r16,0(sp)
    5fb8:	dec00304 	addi	sp,sp,12
    5fbc:	0005eb41 	jmpi	5eb4 <std>

00005fc0 <__fp_lock>:
    5fc0:	0005883a 	mov	r2,zero
    5fc4:	f800283a 	ret

00005fc8 <__fp_unlock>:
    5fc8:	0005883a 	mov	r2,zero
    5fcc:	f800283a 	ret

00005fd0 <__fp_unlock_all>:
    5fd0:	00800074 	movhi	r2,1
    5fd4:	10853a04 	addi	r2,r2,5352
    5fd8:	11000017 	ldw	r4,0(r2)
    5fdc:	01400034 	movhi	r5,0
    5fe0:	2957f204 	addi	r5,r5,24520
    5fe4:	0006b181 	jmpi	6b18 <_fwalk>

00005fe8 <__fp_lock_all>:
    5fe8:	00800074 	movhi	r2,1
    5fec:	10853a04 	addi	r2,r2,5352
    5ff0:	11000017 	ldw	r4,0(r2)
    5ff4:	01400034 	movhi	r5,0
    5ff8:	2957f004 	addi	r5,r5,24512
    5ffc:	0006b181 	jmpi	6b18 <_fwalk>

00006000 <_cleanup_r>:
    6000:	01400074 	movhi	r5,1
    6004:	29630c04 	addi	r5,r5,-29648
    6008:	0006b181 	jmpi	6b18 <_fwalk>

0000600c <_cleanup>:
    600c:	00800074 	movhi	r2,1
    6010:	10853b04 	addi	r2,r2,5356
    6014:	11000017 	ldw	r4,0(r2)
    6018:	00060001 	jmpi	6000 <_cleanup_r>

0000601c <__sfmoreglue>:
    601c:	defffc04 	addi	sp,sp,-16
    6020:	dc400115 	stw	r17,4(sp)
    6024:	2c401724 	muli	r17,r5,92
    6028:	dc800215 	stw	r18,8(sp)
    602c:	2825883a 	mov	r18,r5
    6030:	89400304 	addi	r5,r17,12
    6034:	dc000015 	stw	r16,0(sp)
    6038:	dfc00315 	stw	ra,12(sp)
    603c:	0001b040 	call	1b04 <_malloc_r>
    6040:	0021883a 	mov	r16,zero
    6044:	880d883a 	mov	r6,r17
    6048:	000b883a 	mov	r5,zero
    604c:	10000626 	beq	r2,zero,6068 <__sfmoreglue+0x4c>
    6050:	11000304 	addi	r4,r2,12
    6054:	14800115 	stw	r18,4(r2)
    6058:	10000015 	stw	zero,0(r2)
    605c:	11000215 	stw	r4,8(r2)
    6060:	1021883a 	mov	r16,r2
    6064:	000708c0 	call	708c <memset>
    6068:	8005883a 	mov	r2,r16
    606c:	dfc00317 	ldw	ra,12(sp)
    6070:	dc800217 	ldw	r18,8(sp)
    6074:	dc400117 	ldw	r17,4(sp)
    6078:	dc000017 	ldw	r16,0(sp)
    607c:	dec00404 	addi	sp,sp,16
    6080:	f800283a 	ret

00006084 <__sfp>:
    6084:	defffd04 	addi	sp,sp,-12
    6088:	00800074 	movhi	r2,1
    608c:	10853b04 	addi	r2,r2,5356
    6090:	dc000015 	stw	r16,0(sp)
    6094:	14000017 	ldw	r16,0(r2)
    6098:	dc400115 	stw	r17,4(sp)
    609c:	dfc00215 	stw	ra,8(sp)
    60a0:	80800e17 	ldw	r2,56(r16)
    60a4:	2023883a 	mov	r17,r4
    60a8:	10002626 	beq	r2,zero,6144 <__sfp+0xc0>
    60ac:	8400b804 	addi	r16,r16,736
    60b0:	80800117 	ldw	r2,4(r16)
    60b4:	81000217 	ldw	r4,8(r16)
    60b8:	10ffffc4 	addi	r3,r2,-1
    60bc:	18000916 	blt	r3,zero,60e4 <__sfp+0x60>
    60c0:	2080030f 	ldh	r2,12(r4)
    60c4:	10000b26 	beq	r2,zero,60f4 <__sfp+0x70>
    60c8:	017fffc4 	movi	r5,-1
    60cc:	00000206 	br	60d8 <__sfp+0x54>
    60d0:	2080030f 	ldh	r2,12(r4)
    60d4:	10000726 	beq	r2,zero,60f4 <__sfp+0x70>
    60d8:	18ffffc4 	addi	r3,r3,-1
    60dc:	21001704 	addi	r4,r4,92
    60e0:	197ffb1e 	bne	r3,r5,60d0 <__sfp+0x4c>
    60e4:	80800017 	ldw	r2,0(r16)
    60e8:	10001926 	beq	r2,zero,6150 <__sfp+0xcc>
    60ec:	1021883a 	mov	r16,r2
    60f0:	003fef06 	br	60b0 <__sfp+0x2c>
    60f4:	00bfffc4 	movi	r2,-1
    60f8:	00c00044 	movi	r3,1
    60fc:	2080038d 	sth	r2,14(r4)
    6100:	20c0030d 	sth	r3,12(r4)
    6104:	20000015 	stw	zero,0(r4)
    6108:	20000215 	stw	zero,8(r4)
    610c:	20000115 	stw	zero,4(r4)
    6110:	20000415 	stw	zero,16(r4)
    6114:	20000515 	stw	zero,20(r4)
    6118:	20000615 	stw	zero,24(r4)
    611c:	20000c15 	stw	zero,48(r4)
    6120:	20000d15 	stw	zero,52(r4)
    6124:	20001115 	stw	zero,68(r4)
    6128:	20001215 	stw	zero,72(r4)
    612c:	2005883a 	mov	r2,r4
    6130:	dfc00217 	ldw	ra,8(sp)
    6134:	dc400117 	ldw	r17,4(sp)
    6138:	dc000017 	ldw	r16,0(sp)
    613c:	dec00304 	addi	sp,sp,12
    6140:	f800283a 	ret
    6144:	8009883a 	mov	r4,r16
    6148:	0005f1c0 	call	5f1c <__sinit>
    614c:	003fd706 	br	60ac <__sfp+0x28>
    6150:	8809883a 	mov	r4,r17
    6154:	01400104 	movi	r5,4
    6158:	000601c0 	call	601c <__sfmoreglue>
    615c:	80800015 	stw	r2,0(r16)
    6160:	103fe21e 	bne	r2,zero,60ec <__sfp+0x68>
    6164:	00800304 	movi	r2,12
    6168:	0009883a 	mov	r4,zero
    616c:	88800015 	stw	r2,0(r17)
    6170:	003fee06 	br	612c <__sfp+0xa8>

00006174 <_malloc_trim_r>:
    6174:	defffb04 	addi	sp,sp,-20
    6178:	dcc00315 	stw	r19,12(sp)
    617c:	04c00074 	movhi	r19,1
    6180:	9cfe6904 	addi	r19,r19,-1628
    6184:	dc800215 	stw	r18,8(sp)
    6188:	dc400115 	stw	r17,4(sp)
    618c:	dc000015 	stw	r16,0(sp)
    6190:	2823883a 	mov	r17,r5
    6194:	2025883a 	mov	r18,r4
    6198:	dfc00415 	stw	ra,16(sp)
    619c:	000b7800 	call	b780 <__malloc_lock>
    61a0:	98800217 	ldw	r2,8(r19)
    61a4:	9009883a 	mov	r4,r18
    61a8:	000b883a 	mov	r5,zero
    61ac:	10c00117 	ldw	r3,4(r2)
    61b0:	00bfff04 	movi	r2,-4
    61b4:	18a0703a 	and	r16,r3,r2
    61b8:	8463c83a 	sub	r17,r16,r17
    61bc:	8c43fbc4 	addi	r17,r17,4079
    61c0:	8822d33a 	srli	r17,r17,12
    61c4:	0083ffc4 	movi	r2,4095
    61c8:	8c7fffc4 	addi	r17,r17,-1
    61cc:	8822933a 	slli	r17,r17,12
    61d0:	1440060e 	bge	r2,r17,61ec <_malloc_trim_r+0x78>
    61d4:	00023700 	call	2370 <_sbrk_r>
    61d8:	98c00217 	ldw	r3,8(r19)
    61dc:	9009883a 	mov	r4,r18
    61e0:	044bc83a 	sub	r5,zero,r17
    61e4:	80c7883a 	add	r3,r16,r3
    61e8:	10c00926 	beq	r2,r3,6210 <_malloc_trim_r+0x9c>
    61ec:	000b7a00 	call	b7a0 <__malloc_unlock>
    61f0:	0005883a 	mov	r2,zero
    61f4:	dfc00417 	ldw	ra,16(sp)
    61f8:	dcc00317 	ldw	r19,12(sp)
    61fc:	dc800217 	ldw	r18,8(sp)
    6200:	dc400117 	ldw	r17,4(sp)
    6204:	dc000017 	ldw	r16,0(sp)
    6208:	dec00504 	addi	sp,sp,20
    620c:	f800283a 	ret
    6210:	9009883a 	mov	r4,r18
    6214:	00023700 	call	2370 <_sbrk_r>
    6218:	844dc83a 	sub	r6,r16,r17
    621c:	00ffffc4 	movi	r3,-1
    6220:	9009883a 	mov	r4,r18
    6224:	000b883a 	mov	r5,zero
    6228:	01c00074 	movhi	r7,1
    622c:	39cca304 	addi	r7,r7,12940
    6230:	31800054 	ori	r6,r6,1
    6234:	10c00926 	beq	r2,r3,625c <_malloc_trim_r+0xe8>
    6238:	38800017 	ldw	r2,0(r7)
    623c:	98c00217 	ldw	r3,8(r19)
    6240:	9009883a 	mov	r4,r18
    6244:	1445c83a 	sub	r2,r2,r17
    6248:	38800015 	stw	r2,0(r7)
    624c:	19800115 	stw	r6,4(r3)
    6250:	000b7a00 	call	b7a0 <__malloc_unlock>
    6254:	00800044 	movi	r2,1
    6258:	003fe606 	br	61f4 <_malloc_trim_r+0x80>
    625c:	00023700 	call	2370 <_sbrk_r>
    6260:	99800217 	ldw	r6,8(r19)
    6264:	100f883a 	mov	r7,r2
    6268:	9009883a 	mov	r4,r18
    626c:	1187c83a 	sub	r3,r2,r6
    6270:	008003c4 	movi	r2,15
    6274:	19400054 	ori	r5,r3,1
    6278:	10ffdc0e 	bge	r2,r3,61ec <_malloc_trim_r+0x78>
    627c:	00800074 	movhi	r2,1
    6280:	10853904 	addi	r2,r2,5348
    6284:	10c00017 	ldw	r3,0(r2)
    6288:	00800074 	movhi	r2,1
    628c:	108ca304 	addi	r2,r2,12940
    6290:	31400115 	stw	r5,4(r6)
    6294:	38c7c83a 	sub	r3,r7,r3
    6298:	10c00015 	stw	r3,0(r2)
    629c:	003fd306 	br	61ec <_malloc_trim_r+0x78>

000062a0 <_free_r>:
    62a0:	defffd04 	addi	sp,sp,-12
    62a4:	dc400115 	stw	r17,4(sp)
    62a8:	dc000015 	stw	r16,0(sp)
    62ac:	dfc00215 	stw	ra,8(sp)
    62b0:	2821883a 	mov	r16,r5
    62b4:	2023883a 	mov	r17,r4
    62b8:	28005a26 	beq	r5,zero,6424 <_free_r+0x184>
    62bc:	000b7800 	call	b780 <__malloc_lock>
    62c0:	823ffe04 	addi	r8,r16,-8
    62c4:	41400117 	ldw	r5,4(r8)
    62c8:	00bfff84 	movi	r2,-2
    62cc:	02800074 	movhi	r10,1
    62d0:	52be6904 	addi	r10,r10,-1628
    62d4:	288e703a 	and	r7,r5,r2
    62d8:	41cd883a 	add	r6,r8,r7
    62dc:	30c00117 	ldw	r3,4(r6)
    62e0:	51000217 	ldw	r4,8(r10)
    62e4:	00bfff04 	movi	r2,-4
    62e8:	1892703a 	and	r9,r3,r2
    62ec:	5017883a 	mov	r11,r10
    62f0:	31006726 	beq	r6,r4,6490 <_free_r+0x1f0>
    62f4:	2880004c 	andi	r2,r5,1
    62f8:	1005003a 	cmpeq	r2,r2,zero
    62fc:	32400115 	stw	r9,4(r6)
    6300:	10001a1e 	bne	r2,zero,636c <_free_r+0xcc>
    6304:	000b883a 	mov	r5,zero
    6308:	3247883a 	add	r3,r6,r9
    630c:	18800117 	ldw	r2,4(r3)
    6310:	1080004c 	andi	r2,r2,1
    6314:	1000231e 	bne	r2,zero,63a4 <_free_r+0x104>
    6318:	280ac03a 	cmpne	r5,r5,zero
    631c:	3a4f883a 	add	r7,r7,r9
    6320:	2800451e 	bne	r5,zero,6438 <_free_r+0x198>
    6324:	31000217 	ldw	r4,8(r6)
    6328:	00800074 	movhi	r2,1
    632c:	10be6b04 	addi	r2,r2,-1620
    6330:	20807b26 	beq	r4,r2,6520 <_free_r+0x280>
    6334:	30800317 	ldw	r2,12(r6)
    6338:	3a07883a 	add	r3,r7,r8
    633c:	19c00015 	stw	r7,0(r3)
    6340:	11000215 	stw	r4,8(r2)
    6344:	20800315 	stw	r2,12(r4)
    6348:	38800054 	ori	r2,r7,1
    634c:	40800115 	stw	r2,4(r8)
    6350:	28001a26 	beq	r5,zero,63bc <_free_r+0x11c>
    6354:	8809883a 	mov	r4,r17
    6358:	dfc00217 	ldw	ra,8(sp)
    635c:	dc400117 	ldw	r17,4(sp)
    6360:	dc000017 	ldw	r16,0(sp)
    6364:	dec00304 	addi	sp,sp,12
    6368:	000b7a01 	jmpi	b7a0 <__malloc_unlock>
    636c:	80bffe17 	ldw	r2,-8(r16)
    6370:	50c00204 	addi	r3,r10,8
    6374:	4091c83a 	sub	r8,r8,r2
    6378:	41000217 	ldw	r4,8(r8)
    637c:	388f883a 	add	r7,r7,r2
    6380:	20c06126 	beq	r4,r3,6508 <_free_r+0x268>
    6384:	40800317 	ldw	r2,12(r8)
    6388:	3247883a 	add	r3,r6,r9
    638c:	000b883a 	mov	r5,zero
    6390:	11000215 	stw	r4,8(r2)
    6394:	20800315 	stw	r2,12(r4)
    6398:	18800117 	ldw	r2,4(r3)
    639c:	1080004c 	andi	r2,r2,1
    63a0:	103fdd26 	beq	r2,zero,6318 <_free_r+0x78>
    63a4:	38800054 	ori	r2,r7,1
    63a8:	3a07883a 	add	r3,r7,r8
    63ac:	280ac03a 	cmpne	r5,r5,zero
    63b0:	40800115 	stw	r2,4(r8)
    63b4:	19c00015 	stw	r7,0(r3)
    63b8:	283fe61e 	bne	r5,zero,6354 <_free_r+0xb4>
    63bc:	00807fc4 	movi	r2,511
    63c0:	11c01f2e 	bgeu	r2,r7,6440 <_free_r+0x1a0>
    63c4:	3806d27a 	srli	r3,r7,9
    63c8:	1800481e 	bne	r3,zero,64ec <_free_r+0x24c>
    63cc:	3804d0fa 	srli	r2,r7,3
    63d0:	100690fa 	slli	r3,r2,3
    63d4:	1acd883a 	add	r6,r3,r11
    63d8:	31400217 	ldw	r5,8(r6)
    63dc:	31405926 	beq	r6,r5,6544 <_free_r+0x2a4>
    63e0:	28800117 	ldw	r2,4(r5)
    63e4:	00ffff04 	movi	r3,-4
    63e8:	10c4703a 	and	r2,r2,r3
    63ec:	3880022e 	bgeu	r7,r2,63f8 <_free_r+0x158>
    63f0:	29400217 	ldw	r5,8(r5)
    63f4:	317ffa1e 	bne	r6,r5,63e0 <_free_r+0x140>
    63f8:	29800317 	ldw	r6,12(r5)
    63fc:	41800315 	stw	r6,12(r8)
    6400:	41400215 	stw	r5,8(r8)
    6404:	8809883a 	mov	r4,r17
    6408:	2a000315 	stw	r8,12(r5)
    640c:	32000215 	stw	r8,8(r6)
    6410:	dfc00217 	ldw	ra,8(sp)
    6414:	dc400117 	ldw	r17,4(sp)
    6418:	dc000017 	ldw	r16,0(sp)
    641c:	dec00304 	addi	sp,sp,12
    6420:	000b7a01 	jmpi	b7a0 <__malloc_unlock>
    6424:	dfc00217 	ldw	ra,8(sp)
    6428:	dc400117 	ldw	r17,4(sp)
    642c:	dc000017 	ldw	r16,0(sp)
    6430:	dec00304 	addi	sp,sp,12
    6434:	f800283a 	ret
    6438:	31000217 	ldw	r4,8(r6)
    643c:	003fbd06 	br	6334 <_free_r+0x94>
    6440:	3806d0fa 	srli	r3,r7,3
    6444:	00800044 	movi	r2,1
    6448:	51400117 	ldw	r5,4(r10)
    644c:	180890fa 	slli	r4,r3,3
    6450:	1807d0ba 	srai	r3,r3,2
    6454:	22c9883a 	add	r4,r4,r11
    6458:	21800217 	ldw	r6,8(r4)
    645c:	10c4983a 	sll	r2,r2,r3
    6460:	41000315 	stw	r4,12(r8)
    6464:	41800215 	stw	r6,8(r8)
    6468:	288ab03a 	or	r5,r5,r2
    646c:	22000215 	stw	r8,8(r4)
    6470:	8809883a 	mov	r4,r17
    6474:	51400115 	stw	r5,4(r10)
    6478:	32000315 	stw	r8,12(r6)
    647c:	dfc00217 	ldw	ra,8(sp)
    6480:	dc400117 	ldw	r17,4(sp)
    6484:	dc000017 	ldw	r16,0(sp)
    6488:	dec00304 	addi	sp,sp,12
    648c:	000b7a01 	jmpi	b7a0 <__malloc_unlock>
    6490:	2880004c 	andi	r2,r5,1
    6494:	3a4d883a 	add	r6,r7,r9
    6498:	1000071e 	bne	r2,zero,64b8 <_free_r+0x218>
    649c:	80bffe17 	ldw	r2,-8(r16)
    64a0:	4091c83a 	sub	r8,r8,r2
    64a4:	41000317 	ldw	r4,12(r8)
    64a8:	40c00217 	ldw	r3,8(r8)
    64ac:	308d883a 	add	r6,r6,r2
    64b0:	20c00215 	stw	r3,8(r4)
    64b4:	19000315 	stw	r4,12(r3)
    64b8:	00800074 	movhi	r2,1
    64bc:	10853804 	addi	r2,r2,5344
    64c0:	11000017 	ldw	r4,0(r2)
    64c4:	30c00054 	ori	r3,r6,1
    64c8:	52000215 	stw	r8,8(r10)
    64cc:	40c00115 	stw	r3,4(r8)
    64d0:	313fa036 	bltu	r6,r4,6354 <_free_r+0xb4>
    64d4:	00800074 	movhi	r2,1
    64d8:	108c9604 	addi	r2,r2,12888
    64dc:	11400017 	ldw	r5,0(r2)
    64e0:	8809883a 	mov	r4,r17
    64e4:	00061740 	call	6174 <_malloc_trim_r>
    64e8:	003f9a06 	br	6354 <_free_r+0xb4>
    64ec:	00800104 	movi	r2,4
    64f0:	10c0072e 	bgeu	r2,r3,6510 <_free_r+0x270>
    64f4:	00800504 	movi	r2,20
    64f8:	10c01936 	bltu	r2,r3,6560 <_free_r+0x2c0>
    64fc:	188016c4 	addi	r2,r3,91
    6500:	100690fa 	slli	r3,r2,3
    6504:	003fb306 	br	63d4 <_free_r+0x134>
    6508:	01400044 	movi	r5,1
    650c:	003f7e06 	br	6308 <_free_r+0x68>
    6510:	3804d1ba 	srli	r2,r7,6
    6514:	10800e04 	addi	r2,r2,56
    6518:	100690fa 	slli	r3,r2,3
    651c:	003fad06 	br	63d4 <_free_r+0x134>
    6520:	22000315 	stw	r8,12(r4)
    6524:	22000215 	stw	r8,8(r4)
    6528:	3a05883a 	add	r2,r7,r8
    652c:	38c00054 	ori	r3,r7,1
    6530:	11c00015 	stw	r7,0(r2)
    6534:	41000215 	stw	r4,8(r8)
    6538:	40c00115 	stw	r3,4(r8)
    653c:	41000315 	stw	r4,12(r8)
    6540:	003f8406 	br	6354 <_free_r+0xb4>
    6544:	1005d0ba 	srai	r2,r2,2
    6548:	00c00044 	movi	r3,1
    654c:	51000117 	ldw	r4,4(r10)
    6550:	1886983a 	sll	r3,r3,r2
    6554:	20c8b03a 	or	r4,r4,r3
    6558:	51000115 	stw	r4,4(r10)
    655c:	003fa706 	br	63fc <_free_r+0x15c>
    6560:	00801504 	movi	r2,84
    6564:	10c00436 	bltu	r2,r3,6578 <_free_r+0x2d8>
    6568:	3804d33a 	srli	r2,r7,12
    656c:	10801b84 	addi	r2,r2,110
    6570:	100690fa 	slli	r3,r2,3
    6574:	003f9706 	br	63d4 <_free_r+0x134>
    6578:	00805504 	movi	r2,340
    657c:	10c00436 	bltu	r2,r3,6590 <_free_r+0x2f0>
    6580:	3804d3fa 	srli	r2,r7,15
    6584:	10801dc4 	addi	r2,r2,119
    6588:	100690fa 	slli	r3,r2,3
    658c:	003f9106 	br	63d4 <_free_r+0x134>
    6590:	00815504 	movi	r2,1364
    6594:	10c0032e 	bgeu	r2,r3,65a4 <_free_r+0x304>
    6598:	00801f84 	movi	r2,126
    659c:	00c0fc04 	movi	r3,1008
    65a0:	003f8c06 	br	63d4 <_free_r+0x134>
    65a4:	3804d4ba 	srli	r2,r7,18
    65a8:	10801f04 	addi	r2,r2,124
    65ac:	100690fa 	slli	r3,r2,3
    65b0:	003f8806 	br	63d4 <_free_r+0x134>

000065b4 <__sfvwrite_r>:
    65b4:	30800217 	ldw	r2,8(r6)
    65b8:	defff504 	addi	sp,sp,-44
    65bc:	df000915 	stw	fp,36(sp)
    65c0:	dd800715 	stw	r22,28(sp)
    65c4:	dc800315 	stw	r18,12(sp)
    65c8:	dfc00a15 	stw	ra,40(sp)
    65cc:	ddc00815 	stw	r23,32(sp)
    65d0:	dd400615 	stw	r21,24(sp)
    65d4:	dd000515 	stw	r20,20(sp)
    65d8:	dcc00415 	stw	r19,16(sp)
    65dc:	dc400215 	stw	r17,8(sp)
    65e0:	dc000115 	stw	r16,4(sp)
    65e4:	302d883a 	mov	r22,r6
    65e8:	2039883a 	mov	fp,r4
    65ec:	2825883a 	mov	r18,r5
    65f0:	10001c26 	beq	r2,zero,6664 <__sfvwrite_r+0xb0>
    65f4:	29c0030b 	ldhu	r7,12(r5)
    65f8:	3880020c 	andi	r2,r7,8
    65fc:	10002726 	beq	r2,zero,669c <__sfvwrite_r+0xe8>
    6600:	28800417 	ldw	r2,16(r5)
    6604:	10002526 	beq	r2,zero,669c <__sfvwrite_r+0xe8>
    6608:	3880008c 	andi	r2,r7,2
    660c:	b5400017 	ldw	r21,0(r22)
    6610:	10002826 	beq	r2,zero,66b4 <__sfvwrite_r+0x100>
    6614:	0021883a 	mov	r16,zero
    6618:	0023883a 	mov	r17,zero
    661c:	880d883a 	mov	r6,r17
    6620:	e009883a 	mov	r4,fp
    6624:	00810004 	movi	r2,1024
    6628:	80006e26 	beq	r16,zero,67e4 <__sfvwrite_r+0x230>
    662c:	800f883a 	mov	r7,r16
    6630:	91400717 	ldw	r5,28(r18)
    6634:	1400012e 	bgeu	r2,r16,663c <__sfvwrite_r+0x88>
    6638:	100f883a 	mov	r7,r2
    663c:	90c00917 	ldw	r3,36(r18)
    6640:	183ee83a 	callr	r3
    6644:	1007883a 	mov	r3,r2
    6648:	80a1c83a 	sub	r16,r16,r2
    664c:	88a3883a 	add	r17,r17,r2
    6650:	00806d0e 	bge	zero,r2,6808 <__sfvwrite_r+0x254>
    6654:	b0800217 	ldw	r2,8(r22)
    6658:	10c5c83a 	sub	r2,r2,r3
    665c:	b0800215 	stw	r2,8(r22)
    6660:	103fee1e 	bne	r2,zero,661c <__sfvwrite_r+0x68>
    6664:	0009883a 	mov	r4,zero
    6668:	2005883a 	mov	r2,r4
    666c:	dfc00a17 	ldw	ra,40(sp)
    6670:	df000917 	ldw	fp,36(sp)
    6674:	ddc00817 	ldw	r23,32(sp)
    6678:	dd800717 	ldw	r22,28(sp)
    667c:	dd400617 	ldw	r21,24(sp)
    6680:	dd000517 	ldw	r20,20(sp)
    6684:	dcc00417 	ldw	r19,16(sp)
    6688:	dc800317 	ldw	r18,12(sp)
    668c:	dc400217 	ldw	r17,8(sp)
    6690:	dc000117 	ldw	r16,4(sp)
    6694:	dec00b04 	addi	sp,sp,44
    6698:	f800283a 	ret
    669c:	000437c0 	call	437c <__swsetup_r>
    66a0:	1000e41e 	bne	r2,zero,6a34 <__sfvwrite_r+0x480>
    66a4:	91c0030b 	ldhu	r7,12(r18)
    66a8:	b5400017 	ldw	r21,0(r22)
    66ac:	3880008c 	andi	r2,r7,2
    66b0:	103fd81e 	bne	r2,zero,6614 <__sfvwrite_r+0x60>
    66b4:	3880004c 	andi	r2,r7,1
    66b8:	1005003a 	cmpeq	r2,r2,zero
    66bc:	10005726 	beq	r2,zero,681c <__sfvwrite_r+0x268>
    66c0:	0029883a 	mov	r20,zero
    66c4:	002f883a 	mov	r23,zero
    66c8:	a0004226 	beq	r20,zero,67d4 <__sfvwrite_r+0x220>
    66cc:	3880800c 	andi	r2,r7,512
    66d0:	94000217 	ldw	r16,8(r18)
    66d4:	10008b26 	beq	r2,zero,6904 <__sfvwrite_r+0x350>
    66d8:	800d883a 	mov	r6,r16
    66dc:	a400a536 	bltu	r20,r16,6974 <__sfvwrite_r+0x3c0>
    66e0:	3881200c 	andi	r2,r7,1152
    66e4:	10002726 	beq	r2,zero,6784 <__sfvwrite_r+0x1d0>
    66e8:	90800517 	ldw	r2,20(r18)
    66ec:	92000417 	ldw	r8,16(r18)
    66f0:	91400017 	ldw	r5,0(r18)
    66f4:	1087883a 	add	r3,r2,r2
    66f8:	1887883a 	add	r3,r3,r2
    66fc:	1808d7fa 	srli	r4,r3,31
    6700:	2a21c83a 	sub	r16,r5,r8
    6704:	80800044 	addi	r2,r16,1
    6708:	20c9883a 	add	r4,r4,r3
    670c:	2027d07a 	srai	r19,r4,1
    6710:	a085883a 	add	r2,r20,r2
    6714:	980d883a 	mov	r6,r19
    6718:	9880022e 	bgeu	r19,r2,6724 <__sfvwrite_r+0x170>
    671c:	1027883a 	mov	r19,r2
    6720:	100d883a 	mov	r6,r2
    6724:	3881000c 	andi	r2,r7,1024
    6728:	1000b826 	beq	r2,zero,6a0c <__sfvwrite_r+0x458>
    672c:	300b883a 	mov	r5,r6
    6730:	e009883a 	mov	r4,fp
    6734:	0001b040 	call	1b04 <_malloc_r>
    6738:	10003126 	beq	r2,zero,6800 <__sfvwrite_r+0x24c>
    673c:	91400417 	ldw	r5,16(r18)
    6740:	1009883a 	mov	r4,r2
    6744:	800d883a 	mov	r6,r16
    6748:	1023883a 	mov	r17,r2
    674c:	0006f0c0 	call	6f0c <memcpy>
    6750:	90c0030b 	ldhu	r3,12(r18)
    6754:	00beffc4 	movi	r2,-1025
    6758:	1886703a 	and	r3,r3,r2
    675c:	18c02014 	ori	r3,r3,128
    6760:	90c0030d 	sth	r3,12(r18)
    6764:	9c07c83a 	sub	r3,r19,r16
    6768:	8c05883a 	add	r2,r17,r16
    676c:	a00d883a 	mov	r6,r20
    6770:	a021883a 	mov	r16,r20
    6774:	90800015 	stw	r2,0(r18)
    6778:	90c00215 	stw	r3,8(r18)
    677c:	94400415 	stw	r17,16(r18)
    6780:	94c00515 	stw	r19,20(r18)
    6784:	91000017 	ldw	r4,0(r18)
    6788:	b80b883a 	mov	r5,r23
    678c:	a023883a 	mov	r17,r20
    6790:	0006fac0 	call	6fac <memmove>
    6794:	90c00217 	ldw	r3,8(r18)
    6798:	90800017 	ldw	r2,0(r18)
    679c:	a027883a 	mov	r19,r20
    67a0:	1c07c83a 	sub	r3,r3,r16
    67a4:	1405883a 	add	r2,r2,r16
    67a8:	90c00215 	stw	r3,8(r18)
    67ac:	a021883a 	mov	r16,r20
    67b0:	90800015 	stw	r2,0(r18)
    67b4:	b0800217 	ldw	r2,8(r22)
    67b8:	1405c83a 	sub	r2,r2,r16
    67bc:	b0800215 	stw	r2,8(r22)
    67c0:	103fa826 	beq	r2,zero,6664 <__sfvwrite_r+0xb0>
    67c4:	a469c83a 	sub	r20,r20,r17
    67c8:	91c0030b 	ldhu	r7,12(r18)
    67cc:	bcef883a 	add	r23,r23,r19
    67d0:	a03fbe1e 	bne	r20,zero,66cc <__sfvwrite_r+0x118>
    67d4:	adc00017 	ldw	r23,0(r21)
    67d8:	ad000117 	ldw	r20,4(r21)
    67dc:	ad400204 	addi	r21,r21,8
    67e0:	003fb906 	br	66c8 <__sfvwrite_r+0x114>
    67e4:	ac400017 	ldw	r17,0(r21)
    67e8:	ac000117 	ldw	r16,4(r21)
    67ec:	ad400204 	addi	r21,r21,8
    67f0:	003f8a06 	br	661c <__sfvwrite_r+0x68>
    67f4:	91400417 	ldw	r5,16(r18)
    67f8:	e009883a 	mov	r4,fp
    67fc:	00062a00 	call	62a0 <_free_r>
    6800:	00800304 	movi	r2,12
    6804:	e0800015 	stw	r2,0(fp)
    6808:	9080030b 	ldhu	r2,12(r18)
    680c:	013fffc4 	movi	r4,-1
    6810:	10801014 	ori	r2,r2,64
    6814:	9080030d 	sth	r2,12(r18)
    6818:	003f9306 	br	6668 <__sfvwrite_r+0xb4>
    681c:	0027883a 	mov	r19,zero
    6820:	002f883a 	mov	r23,zero
    6824:	d8000015 	stw	zero,0(sp)
    6828:	0029883a 	mov	r20,zero
    682c:	98001e26 	beq	r19,zero,68a8 <__sfvwrite_r+0x2f4>
    6830:	d8c00017 	ldw	r3,0(sp)
    6834:	1804c03a 	cmpne	r2,r3,zero
    6838:	10005e26 	beq	r2,zero,69b4 <__sfvwrite_r+0x400>
    683c:	9821883a 	mov	r16,r19
    6840:	a4c0012e 	bgeu	r20,r19,6848 <__sfvwrite_r+0x294>
    6844:	a021883a 	mov	r16,r20
    6848:	91000017 	ldw	r4,0(r18)
    684c:	90800417 	ldw	r2,16(r18)
    6850:	91800217 	ldw	r6,8(r18)
    6854:	91c00517 	ldw	r7,20(r18)
    6858:	1100022e 	bgeu	r2,r4,6864 <__sfvwrite_r+0x2b0>
    685c:	31e3883a 	add	r17,r6,r7
    6860:	8c001616 	blt	r17,r16,68bc <__sfvwrite_r+0x308>
    6864:	81c03816 	blt	r16,r7,6948 <__sfvwrite_r+0x394>
    6868:	90c00917 	ldw	r3,36(r18)
    686c:	91400717 	ldw	r5,28(r18)
    6870:	e009883a 	mov	r4,fp
    6874:	b80d883a 	mov	r6,r23
    6878:	183ee83a 	callr	r3
    687c:	1023883a 	mov	r17,r2
    6880:	00bfe10e 	bge	zero,r2,6808 <__sfvwrite_r+0x254>
    6884:	a469c83a 	sub	r20,r20,r17
    6888:	a0001826 	beq	r20,zero,68ec <__sfvwrite_r+0x338>
    688c:	b0800217 	ldw	r2,8(r22)
    6890:	1445c83a 	sub	r2,r2,r17
    6894:	b0800215 	stw	r2,8(r22)
    6898:	103f7226 	beq	r2,zero,6664 <__sfvwrite_r+0xb0>
    689c:	9c67c83a 	sub	r19,r19,r17
    68a0:	bc6f883a 	add	r23,r23,r17
    68a4:	983fe21e 	bne	r19,zero,6830 <__sfvwrite_r+0x27c>
    68a8:	adc00017 	ldw	r23,0(r21)
    68ac:	acc00117 	ldw	r19,4(r21)
    68b0:	ad400204 	addi	r21,r21,8
    68b4:	d8000015 	stw	zero,0(sp)
    68b8:	003fdc06 	br	682c <__sfvwrite_r+0x278>
    68bc:	b80b883a 	mov	r5,r23
    68c0:	880d883a 	mov	r6,r17
    68c4:	0006fac0 	call	6fac <memmove>
    68c8:	90c00017 	ldw	r3,0(r18)
    68cc:	e009883a 	mov	r4,fp
    68d0:	900b883a 	mov	r5,r18
    68d4:	1c47883a 	add	r3,r3,r17
    68d8:	90c00015 	stw	r3,0(r18)
    68dc:	0005c840 	call	5c84 <_fflush_r>
    68e0:	103fc91e 	bne	r2,zero,6808 <__sfvwrite_r+0x254>
    68e4:	a469c83a 	sub	r20,r20,r17
    68e8:	a03fe81e 	bne	r20,zero,688c <__sfvwrite_r+0x2d8>
    68ec:	e009883a 	mov	r4,fp
    68f0:	900b883a 	mov	r5,r18
    68f4:	0005c840 	call	5c84 <_fflush_r>
    68f8:	103fc31e 	bne	r2,zero,6808 <__sfvwrite_r+0x254>
    68fc:	d8000015 	stw	zero,0(sp)
    6900:	003fe206 	br	688c <__sfvwrite_r+0x2d8>
    6904:	91000017 	ldw	r4,0(r18)
    6908:	90800417 	ldw	r2,16(r18)
    690c:	1100022e 	bgeu	r2,r4,6918 <__sfvwrite_r+0x364>
    6910:	8023883a 	mov	r17,r16
    6914:	85003136 	bltu	r16,r20,69dc <__sfvwrite_r+0x428>
    6918:	91c00517 	ldw	r7,20(r18)
    691c:	a1c01836 	bltu	r20,r7,6980 <__sfvwrite_r+0x3cc>
    6920:	90c00917 	ldw	r3,36(r18)
    6924:	91400717 	ldw	r5,28(r18)
    6928:	e009883a 	mov	r4,fp
    692c:	b80d883a 	mov	r6,r23
    6930:	183ee83a 	callr	r3
    6934:	1021883a 	mov	r16,r2
    6938:	00bfb30e 	bge	zero,r2,6808 <__sfvwrite_r+0x254>
    693c:	1023883a 	mov	r17,r2
    6940:	1027883a 	mov	r19,r2
    6944:	003f9b06 	br	67b4 <__sfvwrite_r+0x200>
    6948:	b80b883a 	mov	r5,r23
    694c:	800d883a 	mov	r6,r16
    6950:	0006fac0 	call	6fac <memmove>
    6954:	90c00217 	ldw	r3,8(r18)
    6958:	90800017 	ldw	r2,0(r18)
    695c:	8023883a 	mov	r17,r16
    6960:	1c07c83a 	sub	r3,r3,r16
    6964:	1405883a 	add	r2,r2,r16
    6968:	90c00215 	stw	r3,8(r18)
    696c:	90800015 	stw	r2,0(r18)
    6970:	003fc406 	br	6884 <__sfvwrite_r+0x2d0>
    6974:	a00d883a 	mov	r6,r20
    6978:	a021883a 	mov	r16,r20
    697c:	003f8106 	br	6784 <__sfvwrite_r+0x1d0>
    6980:	b80b883a 	mov	r5,r23
    6984:	a00d883a 	mov	r6,r20
    6988:	0006fac0 	call	6fac <memmove>
    698c:	90c00217 	ldw	r3,8(r18)
    6990:	90800017 	ldw	r2,0(r18)
    6994:	a021883a 	mov	r16,r20
    6998:	1d07c83a 	sub	r3,r3,r20
    699c:	1505883a 	add	r2,r2,r20
    69a0:	a023883a 	mov	r17,r20
    69a4:	a027883a 	mov	r19,r20
    69a8:	90c00215 	stw	r3,8(r18)
    69ac:	90800015 	stw	r2,0(r18)
    69b0:	003f8006 	br	67b4 <__sfvwrite_r+0x200>
    69b4:	b809883a 	mov	r4,r23
    69b8:	01400284 	movi	r5,10
    69bc:	980d883a 	mov	r6,r19
    69c0:	0006e280 	call	6e28 <memchr>
    69c4:	10001726 	beq	r2,zero,6a24 <__sfvwrite_r+0x470>
    69c8:	15c5c83a 	sub	r2,r2,r23
    69cc:	15000044 	addi	r20,r2,1
    69d0:	00800044 	movi	r2,1
    69d4:	d8800015 	stw	r2,0(sp)
    69d8:	003f9806 	br	683c <__sfvwrite_r+0x288>
    69dc:	b80b883a 	mov	r5,r23
    69e0:	800d883a 	mov	r6,r16
    69e4:	0006fac0 	call	6fac <memmove>
    69e8:	90c00017 	ldw	r3,0(r18)
    69ec:	e009883a 	mov	r4,fp
    69f0:	900b883a 	mov	r5,r18
    69f4:	1c07883a 	add	r3,r3,r16
    69f8:	90c00015 	stw	r3,0(r18)
    69fc:	8027883a 	mov	r19,r16
    6a00:	0005c840 	call	5c84 <_fflush_r>
    6a04:	103f6b26 	beq	r2,zero,67b4 <__sfvwrite_r+0x200>
    6a08:	003f7f06 	br	6808 <__sfvwrite_r+0x254>
    6a0c:	400b883a 	mov	r5,r8
    6a10:	e009883a 	mov	r4,fp
    6a14:	00081180 	call	8118 <_realloc_r>
    6a18:	103f7626 	beq	r2,zero,67f4 <__sfvwrite_r+0x240>
    6a1c:	1023883a 	mov	r17,r2
    6a20:	003f5006 	br	6764 <__sfvwrite_r+0x1b0>
    6a24:	00c00044 	movi	r3,1
    6a28:	9d000044 	addi	r20,r19,1
    6a2c:	d8c00015 	stw	r3,0(sp)
    6a30:	003f8206 	br	683c <__sfvwrite_r+0x288>
    6a34:	9080030b 	ldhu	r2,12(r18)
    6a38:	00c00244 	movi	r3,9
    6a3c:	013fffc4 	movi	r4,-1
    6a40:	10801014 	ori	r2,r2,64
    6a44:	9080030d 	sth	r2,12(r18)
    6a48:	e0c00015 	stw	r3,0(fp)
    6a4c:	003f0606 	br	6668 <__sfvwrite_r+0xb4>

00006a50 <_fwalk_reent>:
    6a50:	defff704 	addi	sp,sp,-36
    6a54:	dcc00315 	stw	r19,12(sp)
    6a58:	24c0b804 	addi	r19,r4,736
    6a5c:	dd800615 	stw	r22,24(sp)
    6a60:	dd400515 	stw	r21,20(sp)
    6a64:	dfc00815 	stw	ra,32(sp)
    6a68:	ddc00715 	stw	r23,28(sp)
    6a6c:	dd000415 	stw	r20,16(sp)
    6a70:	dc800215 	stw	r18,8(sp)
    6a74:	dc400115 	stw	r17,4(sp)
    6a78:	dc000015 	stw	r16,0(sp)
    6a7c:	202b883a 	mov	r21,r4
    6a80:	282d883a 	mov	r22,r5
    6a84:	0005f0c0 	call	5f0c <__sfp_lock_acquire>
    6a88:	98002126 	beq	r19,zero,6b10 <_fwalk_reent+0xc0>
    6a8c:	002f883a 	mov	r23,zero
    6a90:	9c800117 	ldw	r18,4(r19)
    6a94:	9c000217 	ldw	r16,8(r19)
    6a98:	90bfffc4 	addi	r2,r18,-1
    6a9c:	10000d16 	blt	r2,zero,6ad4 <_fwalk_reent+0x84>
    6aa0:	0023883a 	mov	r17,zero
    6aa4:	053fffc4 	movi	r20,-1
    6aa8:	8080030f 	ldh	r2,12(r16)
    6aac:	8c400044 	addi	r17,r17,1
    6ab0:	10000626 	beq	r2,zero,6acc <_fwalk_reent+0x7c>
    6ab4:	8080038f 	ldh	r2,14(r16)
    6ab8:	800b883a 	mov	r5,r16
    6abc:	a809883a 	mov	r4,r21
    6ac0:	15000226 	beq	r2,r20,6acc <_fwalk_reent+0x7c>
    6ac4:	b03ee83a 	callr	r22
    6ac8:	b8aeb03a 	or	r23,r23,r2
    6acc:	84001704 	addi	r16,r16,92
    6ad0:	947ff51e 	bne	r18,r17,6aa8 <_fwalk_reent+0x58>
    6ad4:	9cc00017 	ldw	r19,0(r19)
    6ad8:	983fed1e 	bne	r19,zero,6a90 <_fwalk_reent+0x40>
    6adc:	0005f100 	call	5f10 <__sfp_lock_release>
    6ae0:	b805883a 	mov	r2,r23
    6ae4:	dfc00817 	ldw	ra,32(sp)
    6ae8:	ddc00717 	ldw	r23,28(sp)
    6aec:	dd800617 	ldw	r22,24(sp)
    6af0:	dd400517 	ldw	r21,20(sp)
    6af4:	dd000417 	ldw	r20,16(sp)
    6af8:	dcc00317 	ldw	r19,12(sp)
    6afc:	dc800217 	ldw	r18,8(sp)
    6b00:	dc400117 	ldw	r17,4(sp)
    6b04:	dc000017 	ldw	r16,0(sp)
    6b08:	dec00904 	addi	sp,sp,36
    6b0c:	f800283a 	ret
    6b10:	002f883a 	mov	r23,zero
    6b14:	003ff106 	br	6adc <_fwalk_reent+0x8c>

00006b18 <_fwalk>:
    6b18:	defff804 	addi	sp,sp,-32
    6b1c:	dcc00315 	stw	r19,12(sp)
    6b20:	24c0b804 	addi	r19,r4,736
    6b24:	dd400515 	stw	r21,20(sp)
    6b28:	dfc00715 	stw	ra,28(sp)
    6b2c:	dd800615 	stw	r22,24(sp)
    6b30:	dd000415 	stw	r20,16(sp)
    6b34:	dc800215 	stw	r18,8(sp)
    6b38:	dc400115 	stw	r17,4(sp)
    6b3c:	dc000015 	stw	r16,0(sp)
    6b40:	282b883a 	mov	r21,r5
    6b44:	0005f0c0 	call	5f0c <__sfp_lock_acquire>
    6b48:	98001f26 	beq	r19,zero,6bc8 <_fwalk+0xb0>
    6b4c:	002d883a 	mov	r22,zero
    6b50:	9c800117 	ldw	r18,4(r19)
    6b54:	9c000217 	ldw	r16,8(r19)
    6b58:	90bfffc4 	addi	r2,r18,-1
    6b5c:	10000c16 	blt	r2,zero,6b90 <_fwalk+0x78>
    6b60:	0023883a 	mov	r17,zero
    6b64:	053fffc4 	movi	r20,-1
    6b68:	8080030f 	ldh	r2,12(r16)
    6b6c:	8c400044 	addi	r17,r17,1
    6b70:	10000526 	beq	r2,zero,6b88 <_fwalk+0x70>
    6b74:	8080038f 	ldh	r2,14(r16)
    6b78:	8009883a 	mov	r4,r16
    6b7c:	15000226 	beq	r2,r20,6b88 <_fwalk+0x70>
    6b80:	a83ee83a 	callr	r21
    6b84:	b0acb03a 	or	r22,r22,r2
    6b88:	84001704 	addi	r16,r16,92
    6b8c:	947ff61e 	bne	r18,r17,6b68 <_fwalk+0x50>
    6b90:	9cc00017 	ldw	r19,0(r19)
    6b94:	983fee1e 	bne	r19,zero,6b50 <_fwalk+0x38>
    6b98:	0005f100 	call	5f10 <__sfp_lock_release>
    6b9c:	b005883a 	mov	r2,r22
    6ba0:	dfc00717 	ldw	ra,28(sp)
    6ba4:	dd800617 	ldw	r22,24(sp)
    6ba8:	dd400517 	ldw	r21,20(sp)
    6bac:	dd000417 	ldw	r20,16(sp)
    6bb0:	dcc00317 	ldw	r19,12(sp)
    6bb4:	dc800217 	ldw	r18,8(sp)
    6bb8:	dc400117 	ldw	r17,4(sp)
    6bbc:	dc000017 	ldw	r16,0(sp)
    6bc0:	dec00804 	addi	sp,sp,32
    6bc4:	f800283a 	ret
    6bc8:	002d883a 	mov	r22,zero
    6bcc:	003ff206 	br	6b98 <_fwalk+0x80>

00006bd0 <__locale_charset>:
    6bd0:	d0a00517 	ldw	r2,-32748(gp)
    6bd4:	f800283a 	ret

00006bd8 <_localeconv_r>:
    6bd8:	00800074 	movhi	r2,1
    6bdc:	10bcb304 	addi	r2,r2,-3380
    6be0:	f800283a 	ret

00006be4 <localeconv>:
    6be4:	00800074 	movhi	r2,1
    6be8:	10853a04 	addi	r2,r2,5352
    6bec:	11000017 	ldw	r4,0(r2)
    6bf0:	0006bd81 	jmpi	6bd8 <_localeconv_r>

00006bf4 <_setlocale_r>:
    6bf4:	defffc04 	addi	sp,sp,-16
    6bf8:	00c00074 	movhi	r3,1
    6bfc:	18fcae04 	addi	r3,r3,-3400
    6c00:	dc800215 	stw	r18,8(sp)
    6c04:	dc400115 	stw	r17,4(sp)
    6c08:	dc000015 	stw	r16,0(sp)
    6c0c:	2023883a 	mov	r17,r4
    6c10:	2825883a 	mov	r18,r5
    6c14:	dfc00315 	stw	ra,12(sp)
    6c18:	3021883a 	mov	r16,r6
    6c1c:	3009883a 	mov	r4,r6
    6c20:	180b883a 	mov	r5,r3
    6c24:	30000926 	beq	r6,zero,6c4c <_setlocale_r+0x58>
    6c28:	00088c80 	call	88c8 <strcmp>
    6c2c:	8009883a 	mov	r4,r16
    6c30:	01400074 	movhi	r5,1
    6c34:	297c9904 	addi	r5,r5,-3484
    6c38:	10000b1e 	bne	r2,zero,6c68 <_setlocale_r+0x74>
    6c3c:	8c000d15 	stw	r16,52(r17)
    6c40:	8c800c15 	stw	r18,48(r17)
    6c44:	00c00074 	movhi	r3,1
    6c48:	18fcae04 	addi	r3,r3,-3400
    6c4c:	1805883a 	mov	r2,r3
    6c50:	dfc00317 	ldw	ra,12(sp)
    6c54:	dc800217 	ldw	r18,8(sp)
    6c58:	dc400117 	ldw	r17,4(sp)
    6c5c:	dc000017 	ldw	r16,0(sp)
    6c60:	dec00404 	addi	sp,sp,16
    6c64:	f800283a 	ret
    6c68:	00088c80 	call	88c8 <strcmp>
    6c6c:	0007883a 	mov	r3,zero
    6c70:	103ff226 	beq	r2,zero,6c3c <_setlocale_r+0x48>
    6c74:	003ff506 	br	6c4c <_setlocale_r+0x58>

00006c78 <setlocale>:
    6c78:	01800074 	movhi	r6,1
    6c7c:	31853a04 	addi	r6,r6,5352
    6c80:	2007883a 	mov	r3,r4
    6c84:	31000017 	ldw	r4,0(r6)
    6c88:	280d883a 	mov	r6,r5
    6c8c:	180b883a 	mov	r5,r3
    6c90:	0006bf41 	jmpi	6bf4 <_setlocale_r>

00006c94 <__smakebuf_r>:
    6c94:	2880030b 	ldhu	r2,12(r5)
    6c98:	deffed04 	addi	sp,sp,-76
    6c9c:	dc401015 	stw	r17,64(sp)
    6ca0:	1080008c 	andi	r2,r2,2
    6ca4:	dc000f15 	stw	r16,60(sp)
    6ca8:	dfc01215 	stw	ra,72(sp)
    6cac:	dc801115 	stw	r18,68(sp)
    6cb0:	2821883a 	mov	r16,r5
    6cb4:	2023883a 	mov	r17,r4
    6cb8:	10000b26 	beq	r2,zero,6ce8 <__smakebuf_r+0x54>
    6cbc:	28c010c4 	addi	r3,r5,67
    6cc0:	00800044 	movi	r2,1
    6cc4:	28800515 	stw	r2,20(r5)
    6cc8:	28c00415 	stw	r3,16(r5)
    6ccc:	28c00015 	stw	r3,0(r5)
    6cd0:	dfc01217 	ldw	ra,72(sp)
    6cd4:	dc801117 	ldw	r18,68(sp)
    6cd8:	dc401017 	ldw	r17,64(sp)
    6cdc:	dc000f17 	ldw	r16,60(sp)
    6ce0:	dec01304 	addi	sp,sp,76
    6ce4:	f800283a 	ret
    6ce8:	2940038f 	ldh	r5,14(r5)
    6cec:	28002116 	blt	r5,zero,6d74 <__smakebuf_r+0xe0>
    6cf0:	d80d883a 	mov	r6,sp
    6cf4:	0008c440 	call	8c44 <_fstat_r>
    6cf8:	10001e16 	blt	r2,zero,6d74 <__smakebuf_r+0xe0>
    6cfc:	d8800117 	ldw	r2,4(sp)
    6d00:	00e00014 	movui	r3,32768
    6d04:	113c000c 	andi	r4,r2,61440
    6d08:	20c03126 	beq	r4,r3,6dd0 <__smakebuf_r+0x13c>
    6d0c:	8080030b 	ldhu	r2,12(r16)
    6d10:	00c80004 	movi	r3,8192
    6d14:	10820014 	ori	r2,r2,2048
    6d18:	8080030d 	sth	r2,12(r16)
    6d1c:	20c01e26 	beq	r4,r3,6d98 <__smakebuf_r+0x104>
    6d20:	04810004 	movi	r18,1024
    6d24:	8809883a 	mov	r4,r17
    6d28:	900b883a 	mov	r5,r18
    6d2c:	0001b040 	call	1b04 <_malloc_r>
    6d30:	1009883a 	mov	r4,r2
    6d34:	10003126 	beq	r2,zero,6dfc <__smakebuf_r+0x168>
    6d38:	80c0030b 	ldhu	r3,12(r16)
    6d3c:	00800034 	movhi	r2,0
    6d40:	10980004 	addi	r2,r2,24576
    6d44:	88800f15 	stw	r2,60(r17)
    6d48:	18c02014 	ori	r3,r3,128
    6d4c:	84800515 	stw	r18,20(r16)
    6d50:	80c0030d 	sth	r3,12(r16)
    6d54:	81000415 	stw	r4,16(r16)
    6d58:	81000015 	stw	r4,0(r16)
    6d5c:	dfc01217 	ldw	ra,72(sp)
    6d60:	dc801117 	ldw	r18,68(sp)
    6d64:	dc401017 	ldw	r17,64(sp)
    6d68:	dc000f17 	ldw	r16,60(sp)
    6d6c:	dec01304 	addi	sp,sp,76
    6d70:	f800283a 	ret
    6d74:	80c0030b 	ldhu	r3,12(r16)
    6d78:	1880200c 	andi	r2,r3,128
    6d7c:	10000426 	beq	r2,zero,6d90 <__smakebuf_r+0xfc>
    6d80:	04801004 	movi	r18,64
    6d84:	18820014 	ori	r2,r3,2048
    6d88:	8080030d 	sth	r2,12(r16)
    6d8c:	003fe506 	br	6d24 <__smakebuf_r+0x90>
    6d90:	04810004 	movi	r18,1024
    6d94:	003ffb06 	br	6d84 <__smakebuf_r+0xf0>
    6d98:	8140038f 	ldh	r5,14(r16)
    6d9c:	8809883a 	mov	r4,r17
    6da0:	0008cb80 	call	8cb8 <_isatty_r>
    6da4:	103fde26 	beq	r2,zero,6d20 <__smakebuf_r+0x8c>
    6da8:	8080030b 	ldhu	r2,12(r16)
    6dac:	80c010c4 	addi	r3,r16,67
    6db0:	04810004 	movi	r18,1024
    6db4:	10800054 	ori	r2,r2,1
    6db8:	8080030d 	sth	r2,12(r16)
    6dbc:	00800044 	movi	r2,1
    6dc0:	80c00415 	stw	r3,16(r16)
    6dc4:	80800515 	stw	r2,20(r16)
    6dc8:	80c00015 	stw	r3,0(r16)
    6dcc:	003fd506 	br	6d24 <__smakebuf_r+0x90>
    6dd0:	80c00a17 	ldw	r3,40(r16)
    6dd4:	00800074 	movhi	r2,1
    6dd8:	10a1e104 	addi	r2,r2,-30844
    6ddc:	18bfcb1e 	bne	r3,r2,6d0c <__smakebuf_r+0x78>
    6de0:	8080030b 	ldhu	r2,12(r16)
    6de4:	00c10004 	movi	r3,1024
    6de8:	1825883a 	mov	r18,r3
    6dec:	10c4b03a 	or	r2,r2,r3
    6df0:	8080030d 	sth	r2,12(r16)
    6df4:	80c01315 	stw	r3,76(r16)
    6df8:	003fca06 	br	6d24 <__smakebuf_r+0x90>
    6dfc:	8100030b 	ldhu	r4,12(r16)
    6e00:	2080800c 	andi	r2,r4,512
    6e04:	103fb21e 	bne	r2,zero,6cd0 <__smakebuf_r+0x3c>
    6e08:	80c010c4 	addi	r3,r16,67
    6e0c:	21000094 	ori	r4,r4,2
    6e10:	00800044 	movi	r2,1
    6e14:	80800515 	stw	r2,20(r16)
    6e18:	8100030d 	sth	r4,12(r16)
    6e1c:	80c00415 	stw	r3,16(r16)
    6e20:	80c00015 	stw	r3,0(r16)
    6e24:	003faa06 	br	6cd0 <__smakebuf_r+0x3c>

00006e28 <memchr>:
    6e28:	008000c4 	movi	r2,3
    6e2c:	29403fcc 	andi	r5,r5,255
    6e30:	2007883a 	mov	r3,r4
    6e34:	1180022e 	bgeu	r2,r6,6e40 <memchr+0x18>
    6e38:	2084703a 	and	r2,r4,r2
    6e3c:	10000b26 	beq	r2,zero,6e6c <memchr+0x44>
    6e40:	313fffc4 	addi	r4,r6,-1
    6e44:	3000051e 	bne	r6,zero,6e5c <memchr+0x34>
    6e48:	00002c06 	br	6efc <memchr+0xd4>
    6e4c:	213fffc4 	addi	r4,r4,-1
    6e50:	00bfffc4 	movi	r2,-1
    6e54:	18c00044 	addi	r3,r3,1
    6e58:	20802826 	beq	r4,r2,6efc <memchr+0xd4>
    6e5c:	18800003 	ldbu	r2,0(r3)
    6e60:	28bffa1e 	bne	r5,r2,6e4c <memchr+0x24>
    6e64:	1805883a 	mov	r2,r3
    6e68:	f800283a 	ret
    6e6c:	0011883a 	mov	r8,zero
    6e70:	0007883a 	mov	r3,zero
    6e74:	01c00104 	movi	r7,4
    6e78:	4004923a 	slli	r2,r8,8
    6e7c:	18c00044 	addi	r3,r3,1
    6e80:	1151883a 	add	r8,r2,r5
    6e84:	19fffc1e 	bne	r3,r7,6e78 <memchr+0x50>
    6e88:	02bfbff4 	movhi	r10,65279
    6e8c:	52bfbfc4 	addi	r10,r10,-257
    6e90:	02602074 	movhi	r9,32897
    6e94:	4a602004 	addi	r9,r9,-32640
    6e98:	02c000c4 	movi	r11,3
    6e9c:	20800017 	ldw	r2,0(r4)
    6ea0:	31bfff04 	addi	r6,r6,-4
    6ea4:	200f883a 	mov	r7,r4
    6ea8:	1204f03a 	xor	r2,r2,r8
    6eac:	1287883a 	add	r3,r2,r10
    6eb0:	1a46703a 	and	r3,r3,r9
    6eb4:	0084303a 	nor	r2,zero,r2
    6eb8:	10c4703a 	and	r2,r2,r3
    6ebc:	10000b26 	beq	r2,zero,6eec <memchr+0xc4>
    6ec0:	20800003 	ldbu	r2,0(r4)
    6ec4:	28800f26 	beq	r5,r2,6f04 <memchr+0xdc>
    6ec8:	20800043 	ldbu	r2,1(r4)
    6ecc:	21c00044 	addi	r7,r4,1
    6ed0:	28800c26 	beq	r5,r2,6f04 <memchr+0xdc>
    6ed4:	20800083 	ldbu	r2,2(r4)
    6ed8:	21c00084 	addi	r7,r4,2
    6edc:	28800926 	beq	r5,r2,6f04 <memchr+0xdc>
    6ee0:	208000c3 	ldbu	r2,3(r4)
    6ee4:	21c000c4 	addi	r7,r4,3
    6ee8:	28800626 	beq	r5,r2,6f04 <memchr+0xdc>
    6eec:	21000104 	addi	r4,r4,4
    6ef0:	59bfea36 	bltu	r11,r6,6e9c <memchr+0x74>
    6ef4:	2007883a 	mov	r3,r4
    6ef8:	003fd106 	br	6e40 <memchr+0x18>
    6efc:	0005883a 	mov	r2,zero
    6f00:	f800283a 	ret
    6f04:	3805883a 	mov	r2,r7
    6f08:	f800283a 	ret

00006f0c <memcpy>:
    6f0c:	01c003c4 	movi	r7,15
    6f10:	2007883a 	mov	r3,r4
    6f14:	3980032e 	bgeu	r7,r6,6f24 <memcpy+0x18>
    6f18:	2904b03a 	or	r2,r5,r4
    6f1c:	108000cc 	andi	r2,r2,3
    6f20:	10000926 	beq	r2,zero,6f48 <memcpy+0x3c>
    6f24:	30000626 	beq	r6,zero,6f40 <memcpy+0x34>
    6f28:	30cd883a 	add	r6,r6,r3
    6f2c:	28800003 	ldbu	r2,0(r5)
    6f30:	29400044 	addi	r5,r5,1
    6f34:	18800005 	stb	r2,0(r3)
    6f38:	18c00044 	addi	r3,r3,1
    6f3c:	30fffb1e 	bne	r6,r3,6f2c <memcpy+0x20>
    6f40:	2005883a 	mov	r2,r4
    6f44:	f800283a 	ret
    6f48:	3811883a 	mov	r8,r7
    6f4c:	200f883a 	mov	r7,r4
    6f50:	28c00017 	ldw	r3,0(r5)
    6f54:	31bffc04 	addi	r6,r6,-16
    6f58:	38c00015 	stw	r3,0(r7)
    6f5c:	28800117 	ldw	r2,4(r5)
    6f60:	38800115 	stw	r2,4(r7)
    6f64:	28c00217 	ldw	r3,8(r5)
    6f68:	38c00215 	stw	r3,8(r7)
    6f6c:	28800317 	ldw	r2,12(r5)
    6f70:	29400404 	addi	r5,r5,16
    6f74:	38800315 	stw	r2,12(r7)
    6f78:	39c00404 	addi	r7,r7,16
    6f7c:	41bff436 	bltu	r8,r6,6f50 <memcpy+0x44>
    6f80:	008000c4 	movi	r2,3
    6f84:	1180072e 	bgeu	r2,r6,6fa4 <memcpy+0x98>
    6f88:	1007883a 	mov	r3,r2
    6f8c:	28800017 	ldw	r2,0(r5)
    6f90:	31bfff04 	addi	r6,r6,-4
    6f94:	29400104 	addi	r5,r5,4
    6f98:	38800015 	stw	r2,0(r7)
    6f9c:	39c00104 	addi	r7,r7,4
    6fa0:	19bffa36 	bltu	r3,r6,6f8c <memcpy+0x80>
    6fa4:	3807883a 	mov	r3,r7
    6fa8:	003fde06 	br	6f24 <memcpy+0x18>

00006fac <memmove>:
    6fac:	2807883a 	mov	r3,r5
    6fb0:	2011883a 	mov	r8,r4
    6fb4:	29000c2e 	bgeu	r5,r4,6fe8 <memmove+0x3c>
    6fb8:	298f883a 	add	r7,r5,r6
    6fbc:	21c00a2e 	bgeu	r4,r7,6fe8 <memmove+0x3c>
    6fc0:	30000726 	beq	r6,zero,6fe0 <memmove+0x34>
    6fc4:	2187883a 	add	r3,r4,r6
    6fc8:	198dc83a 	sub	r6,r3,r6
    6fcc:	39ffffc4 	addi	r7,r7,-1
    6fd0:	38800003 	ldbu	r2,0(r7)
    6fd4:	18ffffc4 	addi	r3,r3,-1
    6fd8:	18800005 	stb	r2,0(r3)
    6fdc:	19bffb1e 	bne	r3,r6,6fcc <memmove+0x20>
    6fe0:	2005883a 	mov	r2,r4
    6fe4:	f800283a 	ret
    6fe8:	01c003c4 	movi	r7,15
    6fec:	39800a36 	bltu	r7,r6,7018 <memmove+0x6c>
    6ff0:	303ffb26 	beq	r6,zero,6fe0 <memmove+0x34>
    6ff4:	400f883a 	mov	r7,r8
    6ff8:	320d883a 	add	r6,r6,r8
    6ffc:	28800003 	ldbu	r2,0(r5)
    7000:	29400044 	addi	r5,r5,1
    7004:	38800005 	stb	r2,0(r7)
    7008:	39c00044 	addi	r7,r7,1
    700c:	39bffb1e 	bne	r7,r6,6ffc <memmove+0x50>
    7010:	2005883a 	mov	r2,r4
    7014:	f800283a 	ret
    7018:	1904b03a 	or	r2,r3,r4
    701c:	108000cc 	andi	r2,r2,3
    7020:	103ff31e 	bne	r2,zero,6ff0 <memmove+0x44>
    7024:	3811883a 	mov	r8,r7
    7028:	180b883a 	mov	r5,r3
    702c:	200f883a 	mov	r7,r4
    7030:	28c00017 	ldw	r3,0(r5)
    7034:	31bffc04 	addi	r6,r6,-16
    7038:	38c00015 	stw	r3,0(r7)
    703c:	28800117 	ldw	r2,4(r5)
    7040:	38800115 	stw	r2,4(r7)
    7044:	28c00217 	ldw	r3,8(r5)
    7048:	38c00215 	stw	r3,8(r7)
    704c:	28800317 	ldw	r2,12(r5)
    7050:	29400404 	addi	r5,r5,16
    7054:	38800315 	stw	r2,12(r7)
    7058:	39c00404 	addi	r7,r7,16
    705c:	41bff436 	bltu	r8,r6,7030 <memmove+0x84>
    7060:	008000c4 	movi	r2,3
    7064:	1180072e 	bgeu	r2,r6,7084 <memmove+0xd8>
    7068:	1007883a 	mov	r3,r2
    706c:	28800017 	ldw	r2,0(r5)
    7070:	31bfff04 	addi	r6,r6,-4
    7074:	29400104 	addi	r5,r5,4
    7078:	38800015 	stw	r2,0(r7)
    707c:	39c00104 	addi	r7,r7,4
    7080:	19bffa36 	bltu	r3,r6,706c <memmove+0xc0>
    7084:	3811883a 	mov	r8,r7
    7088:	003fd906 	br	6ff0 <memmove+0x44>

0000708c <memset>:
    708c:	008000c4 	movi	r2,3
    7090:	29403fcc 	andi	r5,r5,255
    7094:	2007883a 	mov	r3,r4
    7098:	1180022e 	bgeu	r2,r6,70a4 <memset+0x18>
    709c:	2084703a 	and	r2,r4,r2
    70a0:	10000826 	beq	r2,zero,70c4 <memset+0x38>
    70a4:	30000526 	beq	r6,zero,70bc <memset+0x30>
    70a8:	2805883a 	mov	r2,r5
    70ac:	30cd883a 	add	r6,r6,r3
    70b0:	18800005 	stb	r2,0(r3)
    70b4:	18c00044 	addi	r3,r3,1
    70b8:	19bffd1e 	bne	r3,r6,70b0 <memset+0x24>
    70bc:	2005883a 	mov	r2,r4
    70c0:	f800283a 	ret
    70c4:	2804923a 	slli	r2,r5,8
    70c8:	020003c4 	movi	r8,15
    70cc:	200f883a 	mov	r7,r4
    70d0:	2884b03a 	or	r2,r5,r2
    70d4:	1006943a 	slli	r3,r2,16
    70d8:	10c6b03a 	or	r3,r2,r3
    70dc:	41800a2e 	bgeu	r8,r6,7108 <memset+0x7c>
    70e0:	4005883a 	mov	r2,r8
    70e4:	31bffc04 	addi	r6,r6,-16
    70e8:	38c00015 	stw	r3,0(r7)
    70ec:	38c00115 	stw	r3,4(r7)
    70f0:	38c00215 	stw	r3,8(r7)
    70f4:	38c00315 	stw	r3,12(r7)
    70f8:	39c00404 	addi	r7,r7,16
    70fc:	11bff936 	bltu	r2,r6,70e4 <memset+0x58>
    7100:	008000c4 	movi	r2,3
    7104:	1180052e 	bgeu	r2,r6,711c <memset+0x90>
    7108:	31bfff04 	addi	r6,r6,-4
    710c:	008000c4 	movi	r2,3
    7110:	38c00015 	stw	r3,0(r7)
    7114:	39c00104 	addi	r7,r7,4
    7118:	11bffb36 	bltu	r2,r6,7108 <memset+0x7c>
    711c:	3807883a 	mov	r3,r7
    7120:	003fe006 	br	70a4 <memset+0x18>

00007124 <_Bfree>:
    7124:	28000826 	beq	r5,zero,7148 <_Bfree+0x24>
    7128:	28800117 	ldw	r2,4(r5)
    712c:	21001317 	ldw	r4,76(r4)
    7130:	1085883a 	add	r2,r2,r2
    7134:	1085883a 	add	r2,r2,r2
    7138:	1105883a 	add	r2,r2,r4
    713c:	10c00017 	ldw	r3,0(r2)
    7140:	28c00015 	stw	r3,0(r5)
    7144:	11400015 	stw	r5,0(r2)
    7148:	f800283a 	ret

0000714c <__hi0bits>:
    714c:	20bfffec 	andhi	r2,r4,65535
    7150:	10001426 	beq	r2,zero,71a4 <__hi0bits+0x58>
    7154:	0007883a 	mov	r3,zero
    7158:	20bfc02c 	andhi	r2,r4,65280
    715c:	1000021e 	bne	r2,zero,7168 <__hi0bits+0x1c>
    7160:	2008923a 	slli	r4,r4,8
    7164:	18c00204 	addi	r3,r3,8
    7168:	20bc002c 	andhi	r2,r4,61440
    716c:	1000021e 	bne	r2,zero,7178 <__hi0bits+0x2c>
    7170:	2008913a 	slli	r4,r4,4
    7174:	18c00104 	addi	r3,r3,4
    7178:	20b0002c 	andhi	r2,r4,49152
    717c:	1000031e 	bne	r2,zero,718c <__hi0bits+0x40>
    7180:	2105883a 	add	r2,r4,r4
    7184:	18c00084 	addi	r3,r3,2
    7188:	1089883a 	add	r4,r2,r2
    718c:	20000316 	blt	r4,zero,719c <__hi0bits+0x50>
    7190:	2090002c 	andhi	r2,r4,16384
    7194:	10000626 	beq	r2,zero,71b0 <__hi0bits+0x64>
    7198:	18c00044 	addi	r3,r3,1
    719c:	1805883a 	mov	r2,r3
    71a0:	f800283a 	ret
    71a4:	2008943a 	slli	r4,r4,16
    71a8:	00c00404 	movi	r3,16
    71ac:	003fea06 	br	7158 <__hi0bits+0xc>
    71b0:	00c00804 	movi	r3,32
    71b4:	1805883a 	mov	r2,r3
    71b8:	f800283a 	ret

000071bc <__lo0bits>:
    71bc:	20c00017 	ldw	r3,0(r4)
    71c0:	188001cc 	andi	r2,r3,7
    71c4:	10000a26 	beq	r2,zero,71f0 <__lo0bits+0x34>
    71c8:	1880004c 	andi	r2,r3,1
    71cc:	1005003a 	cmpeq	r2,r2,zero
    71d0:	10002126 	beq	r2,zero,7258 <__lo0bits+0x9c>
    71d4:	1880008c 	andi	r2,r3,2
    71d8:	1000251e 	bne	r2,zero,7270 <__lo0bits+0xb4>
    71dc:	1804d0ba 	srli	r2,r3,2
    71e0:	01400084 	movi	r5,2
    71e4:	20800015 	stw	r2,0(r4)
    71e8:	2805883a 	mov	r2,r5
    71ec:	f800283a 	ret
    71f0:	18bfffcc 	andi	r2,r3,65535
    71f4:	10001526 	beq	r2,zero,724c <__lo0bits+0x90>
    71f8:	000b883a 	mov	r5,zero
    71fc:	18803fcc 	andi	r2,r3,255
    7200:	1000021e 	bne	r2,zero,720c <__lo0bits+0x50>
    7204:	1806d23a 	srli	r3,r3,8
    7208:	29400204 	addi	r5,r5,8
    720c:	188003cc 	andi	r2,r3,15
    7210:	1000021e 	bne	r2,zero,721c <__lo0bits+0x60>
    7214:	1806d13a 	srli	r3,r3,4
    7218:	29400104 	addi	r5,r5,4
    721c:	188000cc 	andi	r2,r3,3
    7220:	1000021e 	bne	r2,zero,722c <__lo0bits+0x70>
    7224:	1806d0ba 	srli	r3,r3,2
    7228:	29400084 	addi	r5,r5,2
    722c:	1880004c 	andi	r2,r3,1
    7230:	1000031e 	bne	r2,zero,7240 <__lo0bits+0x84>
    7234:	1806d07a 	srli	r3,r3,1
    7238:	18000a26 	beq	r3,zero,7264 <__lo0bits+0xa8>
    723c:	29400044 	addi	r5,r5,1
    7240:	2805883a 	mov	r2,r5
    7244:	20c00015 	stw	r3,0(r4)
    7248:	f800283a 	ret
    724c:	1806d43a 	srli	r3,r3,16
    7250:	01400404 	movi	r5,16
    7254:	003fe906 	br	71fc <__lo0bits+0x40>
    7258:	000b883a 	mov	r5,zero
    725c:	2805883a 	mov	r2,r5
    7260:	f800283a 	ret
    7264:	01400804 	movi	r5,32
    7268:	2805883a 	mov	r2,r5
    726c:	f800283a 	ret
    7270:	1804d07a 	srli	r2,r3,1
    7274:	01400044 	movi	r5,1
    7278:	20800015 	stw	r2,0(r4)
    727c:	003fda06 	br	71e8 <__lo0bits+0x2c>

00007280 <__mcmp>:
    7280:	20800417 	ldw	r2,16(r4)
    7284:	28c00417 	ldw	r3,16(r5)
    7288:	10cfc83a 	sub	r7,r2,r3
    728c:	38000c1e 	bne	r7,zero,72c0 <__mcmp+0x40>
    7290:	18c5883a 	add	r2,r3,r3
    7294:	1085883a 	add	r2,r2,r2
    7298:	10c00504 	addi	r3,r2,20
    729c:	21000504 	addi	r4,r4,20
    72a0:	28cb883a 	add	r5,r5,r3
    72a4:	2085883a 	add	r2,r4,r2
    72a8:	10bfff04 	addi	r2,r2,-4
    72ac:	297fff04 	addi	r5,r5,-4
    72b0:	11800017 	ldw	r6,0(r2)
    72b4:	28c00017 	ldw	r3,0(r5)
    72b8:	30c0031e 	bne	r6,r3,72c8 <__mcmp+0x48>
    72bc:	20bffa36 	bltu	r4,r2,72a8 <__mcmp+0x28>
    72c0:	3805883a 	mov	r2,r7
    72c4:	f800283a 	ret
    72c8:	30c00336 	bltu	r6,r3,72d8 <__mcmp+0x58>
    72cc:	01c00044 	movi	r7,1
    72d0:	3805883a 	mov	r2,r7
    72d4:	f800283a 	ret
    72d8:	01ffffc4 	movi	r7,-1
    72dc:	003ff806 	br	72c0 <__mcmp+0x40>

000072e0 <__ulp>:
    72e0:	295ffc2c 	andhi	r5,r5,32752
    72e4:	013f3034 	movhi	r4,64704
    72e8:	290b883a 	add	r5,r5,r4
    72ec:	0145c83a 	sub	r2,zero,r5
    72f0:	1007d53a 	srai	r3,r2,20
    72f4:	000d883a 	mov	r6,zero
    72f8:	0140040e 	bge	zero,r5,730c <__ulp+0x2c>
    72fc:	280f883a 	mov	r7,r5
    7300:	3807883a 	mov	r3,r7
    7304:	3005883a 	mov	r2,r6
    7308:	f800283a 	ret
    730c:	008004c4 	movi	r2,19
    7310:	193ffb04 	addi	r4,r3,-20
    7314:	10c00c0e 	bge	r2,r3,7348 <__ulp+0x68>
    7318:	008007c4 	movi	r2,31
    731c:	1107c83a 	sub	r3,r2,r4
    7320:	00800784 	movi	r2,30
    7324:	01400044 	movi	r5,1
    7328:	11000216 	blt	r2,r4,7334 <__ulp+0x54>
    732c:	00800044 	movi	r2,1
    7330:	10ca983a 	sll	r5,r2,r3
    7334:	000f883a 	mov	r7,zero
    7338:	280d883a 	mov	r6,r5
    733c:	3807883a 	mov	r3,r7
    7340:	3005883a 	mov	r2,r6
    7344:	f800283a 	ret
    7348:	00800234 	movhi	r2,8
    734c:	10cfd83a 	sra	r7,r2,r3
    7350:	000d883a 	mov	r6,zero
    7354:	3005883a 	mov	r2,r6
    7358:	3807883a 	mov	r3,r7
    735c:	f800283a 	ret

00007360 <__b2d>:
    7360:	20800417 	ldw	r2,16(r4)
    7364:	defff904 	addi	sp,sp,-28
    7368:	dd000415 	stw	r20,16(sp)
    736c:	1085883a 	add	r2,r2,r2
    7370:	25000504 	addi	r20,r4,20
    7374:	1085883a 	add	r2,r2,r2
    7378:	dc000015 	stw	r16,0(sp)
    737c:	a0a1883a 	add	r16,r20,r2
    7380:	dd400515 	stw	r21,20(sp)
    7384:	857fff17 	ldw	r21,-4(r16)
    7388:	dc400115 	stw	r17,4(sp)
    738c:	dfc00615 	stw	ra,24(sp)
    7390:	a809883a 	mov	r4,r21
    7394:	2823883a 	mov	r17,r5
    7398:	dcc00315 	stw	r19,12(sp)
    739c:	dc800215 	stw	r18,8(sp)
    73a0:	000714c0 	call	714c <__hi0bits>
    73a4:	100b883a 	mov	r5,r2
    73a8:	00800804 	movi	r2,32
    73ac:	1145c83a 	sub	r2,r2,r5
    73b0:	88800015 	stw	r2,0(r17)
    73b4:	00800284 	movi	r2,10
    73b8:	80ffff04 	addi	r3,r16,-4
    73bc:	11401416 	blt	r2,r5,7410 <__b2d+0xb0>
    73c0:	008002c4 	movi	r2,11
    73c4:	1149c83a 	sub	r4,r2,r5
    73c8:	a0c02736 	bltu	r20,r3,7468 <__b2d+0x108>
    73cc:	000d883a 	mov	r6,zero
    73d0:	28800544 	addi	r2,r5,21
    73d4:	a906d83a 	srl	r3,r21,r4
    73d8:	a884983a 	sll	r2,r21,r2
    73dc:	1ccffc34 	orhi	r19,r3,16368
    73e0:	11a4b03a 	or	r18,r2,r6
    73e4:	9005883a 	mov	r2,r18
    73e8:	9807883a 	mov	r3,r19
    73ec:	dfc00617 	ldw	ra,24(sp)
    73f0:	dd400517 	ldw	r21,20(sp)
    73f4:	dd000417 	ldw	r20,16(sp)
    73f8:	dcc00317 	ldw	r19,12(sp)
    73fc:	dc800217 	ldw	r18,8(sp)
    7400:	dc400117 	ldw	r17,4(sp)
    7404:	dc000017 	ldw	r16,0(sp)
    7408:	dec00704 	addi	sp,sp,28
    740c:	f800283a 	ret
    7410:	a0c00e36 	bltu	r20,r3,744c <__b2d+0xec>
    7414:	293ffd44 	addi	r4,r5,-11
    7418:	000d883a 	mov	r6,zero
    741c:	20000f26 	beq	r4,zero,745c <__b2d+0xfc>
    7420:	00800804 	movi	r2,32
    7424:	110bc83a 	sub	r5,r2,r4
    7428:	a0c01236 	bltu	r20,r3,7474 <__b2d+0x114>
    742c:	000f883a 	mov	r7,zero
    7430:	a904983a 	sll	r2,r21,r4
    7434:	3146d83a 	srl	r3,r6,r5
    7438:	3108983a 	sll	r4,r6,r4
    743c:	108ffc34 	orhi	r2,r2,16368
    7440:	18a6b03a 	or	r19,r3,r2
    7444:	3924b03a 	or	r18,r7,r4
    7448:	003fe606 	br	73e4 <__b2d+0x84>
    744c:	293ffd44 	addi	r4,r5,-11
    7450:	81bffe17 	ldw	r6,-8(r16)
    7454:	80fffe04 	addi	r3,r16,-8
    7458:	203ff11e 	bne	r4,zero,7420 <__b2d+0xc0>
    745c:	accffc34 	orhi	r19,r21,16368
    7460:	3025883a 	mov	r18,r6
    7464:	003fdf06 	br	73e4 <__b2d+0x84>
    7468:	18bfff17 	ldw	r2,-4(r3)
    746c:	110cd83a 	srl	r6,r2,r4
    7470:	003fd706 	br	73d0 <__b2d+0x70>
    7474:	18bfff17 	ldw	r2,-4(r3)
    7478:	114ed83a 	srl	r7,r2,r5
    747c:	003fec06 	br	7430 <__b2d+0xd0>

00007480 <__ratio>:
    7480:	defff904 	addi	sp,sp,-28
    7484:	dc400215 	stw	r17,8(sp)
    7488:	2823883a 	mov	r17,r5
    748c:	d80b883a 	mov	r5,sp
    7490:	dfc00615 	stw	ra,24(sp)
    7494:	dd000515 	stw	r20,20(sp)
    7498:	dcc00415 	stw	r19,16(sp)
    749c:	dc800315 	stw	r18,12(sp)
    74a0:	2025883a 	mov	r18,r4
    74a4:	00073600 	call	7360 <__b2d>
    74a8:	8809883a 	mov	r4,r17
    74ac:	d9400104 	addi	r5,sp,4
    74b0:	1027883a 	mov	r19,r2
    74b4:	1829883a 	mov	r20,r3
    74b8:	00073600 	call	7360 <__b2d>
    74bc:	89000417 	ldw	r4,16(r17)
    74c0:	91c00417 	ldw	r7,16(r18)
    74c4:	d9800117 	ldw	r6,4(sp)
    74c8:	180b883a 	mov	r5,r3
    74cc:	390fc83a 	sub	r7,r7,r4
    74d0:	1009883a 	mov	r4,r2
    74d4:	d8800017 	ldw	r2,0(sp)
    74d8:	380e917a 	slli	r7,r7,5
    74dc:	2011883a 	mov	r8,r4
    74e0:	1185c83a 	sub	r2,r2,r6
    74e4:	11c5883a 	add	r2,r2,r7
    74e8:	1006953a 	slli	r3,r2,20
    74ec:	2813883a 	mov	r9,r5
    74f0:	00800d0e 	bge	zero,r2,7528 <__ratio+0xa8>
    74f4:	1d29883a 	add	r20,r3,r20
    74f8:	a00b883a 	mov	r5,r20
    74fc:	480f883a 	mov	r7,r9
    7500:	9809883a 	mov	r4,r19
    7504:	400d883a 	mov	r6,r8
    7508:	000a26c0 	call	a26c <__divdf3>
    750c:	dfc00617 	ldw	ra,24(sp)
    7510:	dd000517 	ldw	r20,20(sp)
    7514:	dcc00417 	ldw	r19,16(sp)
    7518:	dc800317 	ldw	r18,12(sp)
    751c:	dc400217 	ldw	r17,8(sp)
    7520:	dec00704 	addi	sp,sp,28
    7524:	f800283a 	ret
    7528:	28d3c83a 	sub	r9,r5,r3
    752c:	003ff206 	br	74f8 <__ratio+0x78>

00007530 <_mprec_log10>:
    7530:	defffe04 	addi	sp,sp,-8
    7534:	008005c4 	movi	r2,23
    7538:	dc000015 	stw	r16,0(sp)
    753c:	dfc00115 	stw	ra,4(sp)
    7540:	2021883a 	mov	r16,r4
    7544:	11000c16 	blt	r2,r4,7578 <_mprec_log10+0x48>
    7548:	200490fa 	slli	r2,r4,3
    754c:	00c00074 	movhi	r3,1
    7550:	18fcbf04 	addi	r3,r3,-3332
    7554:	10c5883a 	add	r2,r2,r3
    7558:	12400117 	ldw	r9,4(r2)
    755c:	12000017 	ldw	r8,0(r2)
    7560:	4807883a 	mov	r3,r9
    7564:	4005883a 	mov	r2,r8
    7568:	dfc00117 	ldw	ra,4(sp)
    756c:	dc000017 	ldw	r16,0(sp)
    7570:	dec00204 	addi	sp,sp,8
    7574:	f800283a 	ret
    7578:	0011883a 	mov	r8,zero
    757c:	024ffc34 	movhi	r9,16368
    7580:	0005883a 	mov	r2,zero
    7584:	00d00934 	movhi	r3,16420
    7588:	480b883a 	mov	r5,r9
    758c:	4009883a 	mov	r4,r8
    7590:	180f883a 	mov	r7,r3
    7594:	100d883a 	mov	r6,r2
    7598:	0009ea80 	call	9ea8 <__muldf3>
    759c:	843fffc4 	addi	r16,r16,-1
    75a0:	1011883a 	mov	r8,r2
    75a4:	1813883a 	mov	r9,r3
    75a8:	803ff51e 	bne	r16,zero,7580 <_mprec_log10+0x50>
    75ac:	4005883a 	mov	r2,r8
    75b0:	4807883a 	mov	r3,r9
    75b4:	dfc00117 	ldw	ra,4(sp)
    75b8:	dc000017 	ldw	r16,0(sp)
    75bc:	dec00204 	addi	sp,sp,8
    75c0:	f800283a 	ret

000075c4 <__copybits>:
    75c4:	297fffc4 	addi	r5,r5,-1
    75c8:	30800417 	ldw	r2,16(r6)
    75cc:	280bd17a 	srai	r5,r5,5
    75d0:	31800504 	addi	r6,r6,20
    75d4:	1085883a 	add	r2,r2,r2
    75d8:	294b883a 	add	r5,r5,r5
    75dc:	294b883a 	add	r5,r5,r5
    75e0:	1085883a 	add	r2,r2,r2
    75e4:	290b883a 	add	r5,r5,r4
    75e8:	3087883a 	add	r3,r6,r2
    75ec:	29400104 	addi	r5,r5,4
    75f0:	30c0052e 	bgeu	r6,r3,7608 <__copybits+0x44>
    75f4:	30800017 	ldw	r2,0(r6)
    75f8:	31800104 	addi	r6,r6,4
    75fc:	20800015 	stw	r2,0(r4)
    7600:	21000104 	addi	r4,r4,4
    7604:	30fffb36 	bltu	r6,r3,75f4 <__copybits+0x30>
    7608:	2140032e 	bgeu	r4,r5,7618 <__copybits+0x54>
    760c:	20000015 	stw	zero,0(r4)
    7610:	21000104 	addi	r4,r4,4
    7614:	217ffd36 	bltu	r4,r5,760c <__copybits+0x48>
    7618:	f800283a 	ret

0000761c <__any_on>:
    761c:	20800417 	ldw	r2,16(r4)
    7620:	2807d17a 	srai	r3,r5,5
    7624:	21000504 	addi	r4,r4,20
    7628:	10c00d0e 	bge	r2,r3,7660 <__any_on+0x44>
    762c:	1085883a 	add	r2,r2,r2
    7630:	1085883a 	add	r2,r2,r2
    7634:	208d883a 	add	r6,r4,r2
    7638:	2180182e 	bgeu	r4,r6,769c <__any_on+0x80>
    763c:	30bfff17 	ldw	r2,-4(r6)
    7640:	30ffff04 	addi	r3,r6,-4
    7644:	1000041e 	bne	r2,zero,7658 <__any_on+0x3c>
    7648:	20c0142e 	bgeu	r4,r3,769c <__any_on+0x80>
    764c:	18ffff04 	addi	r3,r3,-4
    7650:	18800017 	ldw	r2,0(r3)
    7654:	103ffc26 	beq	r2,zero,7648 <__any_on+0x2c>
    7658:	00800044 	movi	r2,1
    765c:	f800283a 	ret
    7660:	18800a0e 	bge	r3,r2,768c <__any_on+0x70>
    7664:	294007cc 	andi	r5,r5,31
    7668:	28000826 	beq	r5,zero,768c <__any_on+0x70>
    766c:	18c5883a 	add	r2,r3,r3
    7670:	1085883a 	add	r2,r2,r2
    7674:	208d883a 	add	r6,r4,r2
    7678:	30c00017 	ldw	r3,0(r6)
    767c:	1944d83a 	srl	r2,r3,r5
    7680:	1144983a 	sll	r2,r2,r5
    7684:	18bff41e 	bne	r3,r2,7658 <__any_on+0x3c>
    7688:	003feb06 	br	7638 <__any_on+0x1c>
    768c:	18c5883a 	add	r2,r3,r3
    7690:	1085883a 	add	r2,r2,r2
    7694:	208d883a 	add	r6,r4,r2
    7698:	003fe706 	br	7638 <__any_on+0x1c>
    769c:	0005883a 	mov	r2,zero
    76a0:	f800283a 	ret

000076a4 <_Balloc>:
    76a4:	20c01317 	ldw	r3,76(r4)
    76a8:	defffb04 	addi	sp,sp,-20
    76ac:	dcc00315 	stw	r19,12(sp)
    76b0:	dc800215 	stw	r18,8(sp)
    76b4:	dfc00415 	stw	ra,16(sp)
    76b8:	2825883a 	mov	r18,r5
    76bc:	dc400115 	stw	r17,4(sp)
    76c0:	dc000015 	stw	r16,0(sp)
    76c4:	2027883a 	mov	r19,r4
    76c8:	01800404 	movi	r6,16
    76cc:	01400104 	movi	r5,4
    76d0:	18001726 	beq	r3,zero,7730 <_Balloc+0x8c>
    76d4:	01400044 	movi	r5,1
    76d8:	9485883a 	add	r2,r18,r18
    76dc:	2ca2983a 	sll	r17,r5,r18
    76e0:	1085883a 	add	r2,r2,r2
    76e4:	10c7883a 	add	r3,r2,r3
    76e8:	1c000017 	ldw	r16,0(r3)
    76ec:	8c4d883a 	add	r6,r17,r17
    76f0:	318d883a 	add	r6,r6,r6
    76f4:	9809883a 	mov	r4,r19
    76f8:	31800504 	addi	r6,r6,20
    76fc:	80001226 	beq	r16,zero,7748 <_Balloc+0xa4>
    7700:	80800017 	ldw	r2,0(r16)
    7704:	18800015 	stw	r2,0(r3)
    7708:	80000415 	stw	zero,16(r16)
    770c:	80000315 	stw	zero,12(r16)
    7710:	8005883a 	mov	r2,r16
    7714:	dfc00417 	ldw	ra,16(sp)
    7718:	dcc00317 	ldw	r19,12(sp)
    771c:	dc800217 	ldw	r18,8(sp)
    7720:	dc400117 	ldw	r17,4(sp)
    7724:	dc000017 	ldw	r16,0(sp)
    7728:	dec00504 	addi	sp,sp,20
    772c:	f800283a 	ret
    7730:	00089fc0 	call	89fc <_calloc_r>
    7734:	1007883a 	mov	r3,r2
    7738:	0021883a 	mov	r16,zero
    773c:	98801315 	stw	r2,76(r19)
    7740:	103fe41e 	bne	r2,zero,76d4 <_Balloc+0x30>
    7744:	003ff206 	br	7710 <_Balloc+0x6c>
    7748:	00089fc0 	call	89fc <_calloc_r>
    774c:	103ff026 	beq	r2,zero,7710 <_Balloc+0x6c>
    7750:	1021883a 	mov	r16,r2
    7754:	14800115 	stw	r18,4(r2)
    7758:	14400215 	stw	r17,8(r2)
    775c:	003fea06 	br	7708 <_Balloc+0x64>

00007760 <__d2b>:
    7760:	defff504 	addi	sp,sp,-44
    7764:	dcc00515 	stw	r19,20(sp)
    7768:	04c00044 	movi	r19,1
    776c:	dc000215 	stw	r16,8(sp)
    7770:	2821883a 	mov	r16,r5
    7774:	980b883a 	mov	r5,r19
    7778:	ddc00915 	stw	r23,36(sp)
    777c:	dd800815 	stw	r22,32(sp)
    7780:	dd400715 	stw	r21,28(sp)
    7784:	dd000615 	stw	r20,24(sp)
    7788:	dc800415 	stw	r18,16(sp)
    778c:	dc400315 	stw	r17,12(sp)
    7790:	dfc00a15 	stw	ra,40(sp)
    7794:	3023883a 	mov	r17,r6
    7798:	382d883a 	mov	r22,r7
    779c:	ddc00b17 	ldw	r23,44(sp)
    77a0:	00076a40 	call	76a4 <_Balloc>
    77a4:	1025883a 	mov	r18,r2
    77a8:	00a00034 	movhi	r2,32768
    77ac:	10bfffc4 	addi	r2,r2,-1
    77b0:	8888703a 	and	r4,r17,r2
    77b4:	202ad53a 	srli	r21,r4,20
    77b8:	00800434 	movhi	r2,16
    77bc:	10bfffc4 	addi	r2,r2,-1
    77c0:	8886703a 	and	r3,r17,r2
    77c4:	a829003a 	cmpeq	r20,r21,zero
    77c8:	800b883a 	mov	r5,r16
    77cc:	d8c00115 	stw	r3,4(sp)
    77d0:	94000504 	addi	r16,r18,20
    77d4:	a000021e 	bne	r20,zero,77e0 <__d2b+0x80>
    77d8:	18c00434 	orhi	r3,r3,16
    77dc:	d8c00115 	stw	r3,4(sp)
    77e0:	28002726 	beq	r5,zero,7880 <__d2b+0x120>
    77e4:	d809883a 	mov	r4,sp
    77e8:	d9400015 	stw	r5,0(sp)
    77ec:	00071bc0 	call	71bc <__lo0bits>
    77f0:	100d883a 	mov	r6,r2
    77f4:	10003526 	beq	r2,zero,78cc <__d2b+0x16c>
    77f8:	d8c00117 	ldw	r3,4(sp)
    77fc:	00800804 	movi	r2,32
    7800:	1185c83a 	sub	r2,r2,r6
    7804:	d9000017 	ldw	r4,0(sp)
    7808:	1886983a 	sll	r3,r3,r2
    780c:	1906b03a 	or	r3,r3,r4
    7810:	90c00515 	stw	r3,20(r18)
    7814:	d8c00117 	ldw	r3,4(sp)
    7818:	1986d83a 	srl	r3,r3,r6
    781c:	d8c00115 	stw	r3,4(sp)
    7820:	180b003a 	cmpeq	r5,r3,zero
    7824:	00800084 	movi	r2,2
    7828:	114bc83a 	sub	r5,r2,r5
    782c:	80c00115 	stw	r3,4(r16)
    7830:	91400415 	stw	r5,16(r18)
    7834:	a0001a1e 	bne	r20,zero,78a0 <__d2b+0x140>
    7838:	3545883a 	add	r2,r6,r21
    783c:	10bef344 	addi	r2,r2,-1075
    7840:	00c00d44 	movi	r3,53
    7844:	b0800015 	stw	r2,0(r22)
    7848:	1987c83a 	sub	r3,r3,r6
    784c:	b8c00015 	stw	r3,0(r23)
    7850:	9005883a 	mov	r2,r18
    7854:	dfc00a17 	ldw	ra,40(sp)
    7858:	ddc00917 	ldw	r23,36(sp)
    785c:	dd800817 	ldw	r22,32(sp)
    7860:	dd400717 	ldw	r21,28(sp)
    7864:	dd000617 	ldw	r20,24(sp)
    7868:	dcc00517 	ldw	r19,20(sp)
    786c:	dc800417 	ldw	r18,16(sp)
    7870:	dc400317 	ldw	r17,12(sp)
    7874:	dc000217 	ldw	r16,8(sp)
    7878:	dec00b04 	addi	sp,sp,44
    787c:	f800283a 	ret
    7880:	d9000104 	addi	r4,sp,4
    7884:	00071bc0 	call	71bc <__lo0bits>
    7888:	11800804 	addi	r6,r2,32
    788c:	d8800117 	ldw	r2,4(sp)
    7890:	94c00415 	stw	r19,16(r18)
    7894:	980b883a 	mov	r5,r19
    7898:	90800515 	stw	r2,20(r18)
    789c:	a03fe626 	beq	r20,zero,7838 <__d2b+0xd8>
    78a0:	2945883a 	add	r2,r5,r5
    78a4:	1085883a 	add	r2,r2,r2
    78a8:	1405883a 	add	r2,r2,r16
    78ac:	113fff17 	ldw	r4,-4(r2)
    78b0:	30fef384 	addi	r3,r6,-1074
    78b4:	2820917a 	slli	r16,r5,5
    78b8:	b0c00015 	stw	r3,0(r22)
    78bc:	000714c0 	call	714c <__hi0bits>
    78c0:	80a1c83a 	sub	r16,r16,r2
    78c4:	bc000015 	stw	r16,0(r23)
    78c8:	003fe106 	br	7850 <__d2b+0xf0>
    78cc:	d8800017 	ldw	r2,0(sp)
    78d0:	90800515 	stw	r2,20(r18)
    78d4:	d8c00117 	ldw	r3,4(sp)
    78d8:	003fd106 	br	7820 <__d2b+0xc0>

000078dc <__mdiff>:
    78dc:	defffb04 	addi	sp,sp,-20
    78e0:	dc000015 	stw	r16,0(sp)
    78e4:	2821883a 	mov	r16,r5
    78e8:	dc800215 	stw	r18,8(sp)
    78ec:	300b883a 	mov	r5,r6
    78f0:	2025883a 	mov	r18,r4
    78f4:	8009883a 	mov	r4,r16
    78f8:	dc400115 	stw	r17,4(sp)
    78fc:	dfc00415 	stw	ra,16(sp)
    7900:	dcc00315 	stw	r19,12(sp)
    7904:	3023883a 	mov	r17,r6
    7908:	00072800 	call	7280 <__mcmp>
    790c:	10004226 	beq	r2,zero,7a18 <__mdiff+0x13c>
    7910:	10005016 	blt	r2,zero,7a54 <__mdiff+0x178>
    7914:	0027883a 	mov	r19,zero
    7918:	81400117 	ldw	r5,4(r16)
    791c:	9009883a 	mov	r4,r18
    7920:	00076a40 	call	76a4 <_Balloc>
    7924:	1019883a 	mov	r12,r2
    7928:	82800417 	ldw	r10,16(r16)
    792c:	88800417 	ldw	r2,16(r17)
    7930:	81800504 	addi	r6,r16,20
    7934:	5287883a 	add	r3,r10,r10
    7938:	1085883a 	add	r2,r2,r2
    793c:	18c7883a 	add	r3,r3,r3
    7940:	1085883a 	add	r2,r2,r2
    7944:	8a000504 	addi	r8,r17,20
    7948:	64c00315 	stw	r19,12(r12)
    794c:	30db883a 	add	r13,r6,r3
    7950:	4097883a 	add	r11,r8,r2
    7954:	61c00504 	addi	r7,r12,20
    7958:	0013883a 	mov	r9,zero
    795c:	31000017 	ldw	r4,0(r6)
    7960:	41400017 	ldw	r5,0(r8)
    7964:	42000104 	addi	r8,r8,4
    7968:	20bfffcc 	andi	r2,r4,65535
    796c:	28ffffcc 	andi	r3,r5,65535
    7970:	10c5c83a 	sub	r2,r2,r3
    7974:	1245883a 	add	r2,r2,r9
    7978:	2008d43a 	srli	r4,r4,16
    797c:	280ad43a 	srli	r5,r5,16
    7980:	1007d43a 	srai	r3,r2,16
    7984:	3880000d 	sth	r2,0(r7)
    7988:	2149c83a 	sub	r4,r4,r5
    798c:	20c9883a 	add	r4,r4,r3
    7990:	3900008d 	sth	r4,2(r7)
    7994:	31800104 	addi	r6,r6,4
    7998:	39c00104 	addi	r7,r7,4
    799c:	2013d43a 	srai	r9,r4,16
    79a0:	42ffee36 	bltu	r8,r11,795c <__mdiff+0x80>
    79a4:	33400c2e 	bgeu	r6,r13,79d8 <__mdiff+0xfc>
    79a8:	30800017 	ldw	r2,0(r6)
    79ac:	31800104 	addi	r6,r6,4
    79b0:	10ffffcc 	andi	r3,r2,65535
    79b4:	1a47883a 	add	r3,r3,r9
    79b8:	1004d43a 	srli	r2,r2,16
    79bc:	1809d43a 	srai	r4,r3,16
    79c0:	38c0000d 	sth	r3,0(r7)
    79c4:	1105883a 	add	r2,r2,r4
    79c8:	3880008d 	sth	r2,2(r7)
    79cc:	1013d43a 	srai	r9,r2,16
    79d0:	39c00104 	addi	r7,r7,4
    79d4:	337ff436 	bltu	r6,r13,79a8 <__mdiff+0xcc>
    79d8:	38bfff17 	ldw	r2,-4(r7)
    79dc:	38ffff04 	addi	r3,r7,-4
    79e0:	1000041e 	bne	r2,zero,79f4 <__mdiff+0x118>
    79e4:	18ffff04 	addi	r3,r3,-4
    79e8:	18800017 	ldw	r2,0(r3)
    79ec:	52bfffc4 	addi	r10,r10,-1
    79f0:	103ffc26 	beq	r2,zero,79e4 <__mdiff+0x108>
    79f4:	6005883a 	mov	r2,r12
    79f8:	62800415 	stw	r10,16(r12)
    79fc:	dfc00417 	ldw	ra,16(sp)
    7a00:	dcc00317 	ldw	r19,12(sp)
    7a04:	dc800217 	ldw	r18,8(sp)
    7a08:	dc400117 	ldw	r17,4(sp)
    7a0c:	dc000017 	ldw	r16,0(sp)
    7a10:	dec00504 	addi	sp,sp,20
    7a14:	f800283a 	ret
    7a18:	9009883a 	mov	r4,r18
    7a1c:	000b883a 	mov	r5,zero
    7a20:	00076a40 	call	76a4 <_Balloc>
    7a24:	1019883a 	mov	r12,r2
    7a28:	00800044 	movi	r2,1
    7a2c:	60800415 	stw	r2,16(r12)
    7a30:	6005883a 	mov	r2,r12
    7a34:	60000515 	stw	zero,20(r12)
    7a38:	dfc00417 	ldw	ra,16(sp)
    7a3c:	dcc00317 	ldw	r19,12(sp)
    7a40:	dc800217 	ldw	r18,8(sp)
    7a44:	dc400117 	ldw	r17,4(sp)
    7a48:	dc000017 	ldw	r16,0(sp)
    7a4c:	dec00504 	addi	sp,sp,20
    7a50:	f800283a 	ret
    7a54:	880d883a 	mov	r6,r17
    7a58:	04c00044 	movi	r19,1
    7a5c:	8023883a 	mov	r17,r16
    7a60:	3021883a 	mov	r16,r6
    7a64:	003fac06 	br	7918 <__mdiff+0x3c>

00007a68 <__lshift>:
    7a68:	defff904 	addi	sp,sp,-28
    7a6c:	28800417 	ldw	r2,16(r5)
    7a70:	dc000015 	stw	r16,0(sp)
    7a74:	3021d17a 	srai	r16,r6,5
    7a78:	28c00217 	ldw	r3,8(r5)
    7a7c:	10800044 	addi	r2,r2,1
    7a80:	dc400115 	stw	r17,4(sp)
    7a84:	80a3883a 	add	r17,r16,r2
    7a88:	dd400515 	stw	r21,20(sp)
    7a8c:	dd000415 	stw	r20,16(sp)
    7a90:	dc800215 	stw	r18,8(sp)
    7a94:	dfc00615 	stw	ra,24(sp)
    7a98:	2825883a 	mov	r18,r5
    7a9c:	dcc00315 	stw	r19,12(sp)
    7aa0:	3029883a 	mov	r20,r6
    7aa4:	202b883a 	mov	r21,r4
    7aa8:	29400117 	ldw	r5,4(r5)
    7aac:	1c40030e 	bge	r3,r17,7abc <__lshift+0x54>
    7ab0:	18c7883a 	add	r3,r3,r3
    7ab4:	29400044 	addi	r5,r5,1
    7ab8:	1c7ffd16 	blt	r3,r17,7ab0 <__lshift+0x48>
    7abc:	a809883a 	mov	r4,r21
    7ac0:	00076a40 	call	76a4 <_Balloc>
    7ac4:	1027883a 	mov	r19,r2
    7ac8:	11400504 	addi	r5,r2,20
    7acc:	0400090e 	bge	zero,r16,7af4 <__lshift+0x8c>
    7ad0:	2805883a 	mov	r2,r5
    7ad4:	0007883a 	mov	r3,zero
    7ad8:	18c00044 	addi	r3,r3,1
    7adc:	10000015 	stw	zero,0(r2)
    7ae0:	10800104 	addi	r2,r2,4
    7ae4:	80fffc1e 	bne	r16,r3,7ad8 <__lshift+0x70>
    7ae8:	8405883a 	add	r2,r16,r16
    7aec:	1085883a 	add	r2,r2,r2
    7af0:	288b883a 	add	r5,r5,r2
    7af4:	90800417 	ldw	r2,16(r18)
    7af8:	91000504 	addi	r4,r18,20
    7afc:	a18007cc 	andi	r6,r20,31
    7b00:	1085883a 	add	r2,r2,r2
    7b04:	1085883a 	add	r2,r2,r2
    7b08:	208f883a 	add	r7,r4,r2
    7b0c:	30001e26 	beq	r6,zero,7b88 <__lshift+0x120>
    7b10:	00800804 	movi	r2,32
    7b14:	1191c83a 	sub	r8,r2,r6
    7b18:	0007883a 	mov	r3,zero
    7b1c:	20800017 	ldw	r2,0(r4)
    7b20:	1184983a 	sll	r2,r2,r6
    7b24:	1884b03a 	or	r2,r3,r2
    7b28:	28800015 	stw	r2,0(r5)
    7b2c:	20c00017 	ldw	r3,0(r4)
    7b30:	21000104 	addi	r4,r4,4
    7b34:	29400104 	addi	r5,r5,4
    7b38:	1a06d83a 	srl	r3,r3,r8
    7b3c:	21fff736 	bltu	r4,r7,7b1c <__lshift+0xb4>
    7b40:	28c00015 	stw	r3,0(r5)
    7b44:	18000126 	beq	r3,zero,7b4c <__lshift+0xe4>
    7b48:	8c400044 	addi	r17,r17,1
    7b4c:	88bfffc4 	addi	r2,r17,-1
    7b50:	98800415 	stw	r2,16(r19)
    7b54:	a809883a 	mov	r4,r21
    7b58:	900b883a 	mov	r5,r18
    7b5c:	00071240 	call	7124 <_Bfree>
    7b60:	9805883a 	mov	r2,r19
    7b64:	dfc00617 	ldw	ra,24(sp)
    7b68:	dd400517 	ldw	r21,20(sp)
    7b6c:	dd000417 	ldw	r20,16(sp)
    7b70:	dcc00317 	ldw	r19,12(sp)
    7b74:	dc800217 	ldw	r18,8(sp)
    7b78:	dc400117 	ldw	r17,4(sp)
    7b7c:	dc000017 	ldw	r16,0(sp)
    7b80:	dec00704 	addi	sp,sp,28
    7b84:	f800283a 	ret
    7b88:	20800017 	ldw	r2,0(r4)
    7b8c:	21000104 	addi	r4,r4,4
    7b90:	28800015 	stw	r2,0(r5)
    7b94:	29400104 	addi	r5,r5,4
    7b98:	21ffec2e 	bgeu	r4,r7,7b4c <__lshift+0xe4>
    7b9c:	20800017 	ldw	r2,0(r4)
    7ba0:	21000104 	addi	r4,r4,4
    7ba4:	28800015 	stw	r2,0(r5)
    7ba8:	29400104 	addi	r5,r5,4
    7bac:	21fff636 	bltu	r4,r7,7b88 <__lshift+0x120>
    7bb0:	003fe606 	br	7b4c <__lshift+0xe4>

00007bb4 <__multiply>:
    7bb4:	defff904 	addi	sp,sp,-28
    7bb8:	dcc00315 	stw	r19,12(sp)
    7bbc:	dc800215 	stw	r18,8(sp)
    7bc0:	2cc00417 	ldw	r19,16(r5)
    7bc4:	34800417 	ldw	r18,16(r6)
    7bc8:	dd000415 	stw	r20,16(sp)
    7bcc:	dc400115 	stw	r17,4(sp)
    7bd0:	dfc00615 	stw	ra,24(sp)
    7bd4:	dd400515 	stw	r21,20(sp)
    7bd8:	dc000015 	stw	r16,0(sp)
    7bdc:	2823883a 	mov	r17,r5
    7be0:	3029883a 	mov	r20,r6
    7be4:	9c80040e 	bge	r19,r18,7bf8 <__multiply+0x44>
    7be8:	9027883a 	mov	r19,r18
    7bec:	2c800417 	ldw	r18,16(r5)
    7bf0:	2829883a 	mov	r20,r5
    7bf4:	3023883a 	mov	r17,r6
    7bf8:	88800217 	ldw	r2,8(r17)
    7bfc:	9ca1883a 	add	r16,r19,r18
    7c00:	89400117 	ldw	r5,4(r17)
    7c04:	1400010e 	bge	r2,r16,7c0c <__multiply+0x58>
    7c08:	29400044 	addi	r5,r5,1
    7c0c:	00076a40 	call	76a4 <_Balloc>
    7c10:	102b883a 	mov	r21,r2
    7c14:	8405883a 	add	r2,r16,r16
    7c18:	1085883a 	add	r2,r2,r2
    7c1c:	a9000504 	addi	r4,r21,20
    7c20:	209d883a 	add	r14,r4,r2
    7c24:	2380042e 	bgeu	r4,r14,7c38 <__multiply+0x84>
    7c28:	2005883a 	mov	r2,r4
    7c2c:	10000015 	stw	zero,0(r2)
    7c30:	10800104 	addi	r2,r2,4
    7c34:	13bffd36 	bltu	r2,r14,7c2c <__multiply+0x78>
    7c38:	9485883a 	add	r2,r18,r18
    7c3c:	9cc7883a 	add	r3,r19,r19
    7c40:	a1800504 	addi	r6,r20,20
    7c44:	1085883a 	add	r2,r2,r2
    7c48:	8b400504 	addi	r13,r17,20
    7c4c:	18c7883a 	add	r3,r3,r3
    7c50:	309f883a 	add	r15,r6,r2
    7c54:	68d7883a 	add	r11,r13,r3
    7c58:	33c03b2e 	bgeu	r6,r15,7d48 <__multiply+0x194>
    7c5c:	2019883a 	mov	r12,r4
    7c60:	30800017 	ldw	r2,0(r6)
    7c64:	127fffcc 	andi	r9,r2,65535
    7c68:	48001826 	beq	r9,zero,7ccc <__multiply+0x118>
    7c6c:	6811883a 	mov	r8,r13
    7c70:	600f883a 	mov	r7,r12
    7c74:	0015883a 	mov	r10,zero
    7c78:	40c00017 	ldw	r3,0(r8)
    7c7c:	39400017 	ldw	r5,0(r7)
    7c80:	42000104 	addi	r8,r8,4
    7c84:	193fffcc 	andi	r4,r3,65535
    7c88:	4909383a 	mul	r4,r9,r4
    7c8c:	1806d43a 	srli	r3,r3,16
    7c90:	28bfffcc 	andi	r2,r5,65535
    7c94:	5085883a 	add	r2,r10,r2
    7c98:	2089883a 	add	r4,r4,r2
    7c9c:	48c7383a 	mul	r3,r9,r3
    7ca0:	280ad43a 	srli	r5,r5,16
    7ca4:	2004d43a 	srli	r2,r4,16
    7ca8:	3900000d 	sth	r4,0(r7)
    7cac:	1947883a 	add	r3,r3,r5
    7cb0:	10c5883a 	add	r2,r2,r3
    7cb4:	3880008d 	sth	r2,2(r7)
    7cb8:	1014d43a 	srli	r10,r2,16
    7cbc:	39c00104 	addi	r7,r7,4
    7cc0:	42ffed36 	bltu	r8,r11,7c78 <__multiply+0xc4>
    7cc4:	3a800015 	stw	r10,0(r7)
    7cc8:	30800017 	ldw	r2,0(r6)
    7ccc:	1012d43a 	srli	r9,r2,16
    7cd0:	48001926 	beq	r9,zero,7d38 <__multiply+0x184>
    7cd4:	60800017 	ldw	r2,0(r12)
    7cd8:	6811883a 	mov	r8,r13
    7cdc:	600f883a 	mov	r7,r12
    7ce0:	0015883a 	mov	r10,zero
    7ce4:	100b883a 	mov	r5,r2
    7ce8:	41000017 	ldw	r4,0(r8)
    7cec:	2806d43a 	srli	r3,r5,16
    7cf0:	3880000d 	sth	r2,0(r7)
    7cf4:	20bfffcc 	andi	r2,r4,65535
    7cf8:	4885383a 	mul	r2,r9,r2
    7cfc:	50c7883a 	add	r3,r10,r3
    7d00:	2008d43a 	srli	r4,r4,16
    7d04:	10c5883a 	add	r2,r2,r3
    7d08:	3880008d 	sth	r2,2(r7)
    7d0c:	39c00104 	addi	r7,r7,4
    7d10:	39400017 	ldw	r5,0(r7)
    7d14:	4909383a 	mul	r4,r9,r4
    7d18:	1004d43a 	srli	r2,r2,16
    7d1c:	28ffffcc 	andi	r3,r5,65535
    7d20:	20c9883a 	add	r4,r4,r3
    7d24:	1105883a 	add	r2,r2,r4
    7d28:	42000104 	addi	r8,r8,4
    7d2c:	1014d43a 	srli	r10,r2,16
    7d30:	42ffed36 	bltu	r8,r11,7ce8 <__multiply+0x134>
    7d34:	38800015 	stw	r2,0(r7)
    7d38:	31800104 	addi	r6,r6,4
    7d3c:	33c0022e 	bgeu	r6,r15,7d48 <__multiply+0x194>
    7d40:	63000104 	addi	r12,r12,4
    7d44:	003fc606 	br	7c60 <__multiply+0xac>
    7d48:	0400090e 	bge	zero,r16,7d70 <__multiply+0x1bc>
    7d4c:	70bfff17 	ldw	r2,-4(r14)
    7d50:	70ffff04 	addi	r3,r14,-4
    7d54:	10000326 	beq	r2,zero,7d64 <__multiply+0x1b0>
    7d58:	00000506 	br	7d70 <__multiply+0x1bc>
    7d5c:	18800017 	ldw	r2,0(r3)
    7d60:	1000031e 	bne	r2,zero,7d70 <__multiply+0x1bc>
    7d64:	843fffc4 	addi	r16,r16,-1
    7d68:	18ffff04 	addi	r3,r3,-4
    7d6c:	803ffb1e 	bne	r16,zero,7d5c <__multiply+0x1a8>
    7d70:	a805883a 	mov	r2,r21
    7d74:	ac000415 	stw	r16,16(r21)
    7d78:	dfc00617 	ldw	ra,24(sp)
    7d7c:	dd400517 	ldw	r21,20(sp)
    7d80:	dd000417 	ldw	r20,16(sp)
    7d84:	dcc00317 	ldw	r19,12(sp)
    7d88:	dc800217 	ldw	r18,8(sp)
    7d8c:	dc400117 	ldw	r17,4(sp)
    7d90:	dc000017 	ldw	r16,0(sp)
    7d94:	dec00704 	addi	sp,sp,28
    7d98:	f800283a 	ret

00007d9c <__i2b>:
    7d9c:	defffd04 	addi	sp,sp,-12
    7da0:	dc000015 	stw	r16,0(sp)
    7da4:	04000044 	movi	r16,1
    7da8:	dc800115 	stw	r18,4(sp)
    7dac:	2825883a 	mov	r18,r5
    7db0:	800b883a 	mov	r5,r16
    7db4:	dfc00215 	stw	ra,8(sp)
    7db8:	00076a40 	call	76a4 <_Balloc>
    7dbc:	14000415 	stw	r16,16(r2)
    7dc0:	14800515 	stw	r18,20(r2)
    7dc4:	dfc00217 	ldw	ra,8(sp)
    7dc8:	dc800117 	ldw	r18,4(sp)
    7dcc:	dc000017 	ldw	r16,0(sp)
    7dd0:	dec00304 	addi	sp,sp,12
    7dd4:	f800283a 	ret

00007dd8 <__multadd>:
    7dd8:	defffa04 	addi	sp,sp,-24
    7ddc:	dc800215 	stw	r18,8(sp)
    7de0:	2c800417 	ldw	r18,16(r5)
    7de4:	dd000415 	stw	r20,16(sp)
    7de8:	dcc00315 	stw	r19,12(sp)
    7dec:	dc000015 	stw	r16,0(sp)
    7df0:	dfc00515 	stw	ra,20(sp)
    7df4:	3821883a 	mov	r16,r7
    7df8:	dc400115 	stw	r17,4(sp)
    7dfc:	2827883a 	mov	r19,r5
    7e00:	2029883a 	mov	r20,r4
    7e04:	2a000504 	addi	r8,r5,20
    7e08:	000f883a 	mov	r7,zero
    7e0c:	40800017 	ldw	r2,0(r8)
    7e10:	39c00044 	addi	r7,r7,1
    7e14:	10ffffcc 	andi	r3,r2,65535
    7e18:	1987383a 	mul	r3,r3,r6
    7e1c:	1004d43a 	srli	r2,r2,16
    7e20:	1c07883a 	add	r3,r3,r16
    7e24:	180ad43a 	srli	r5,r3,16
    7e28:	1185383a 	mul	r2,r2,r6
    7e2c:	18ffffcc 	andi	r3,r3,65535
    7e30:	1145883a 	add	r2,r2,r5
    7e34:	1008943a 	slli	r4,r2,16
    7e38:	1020d43a 	srli	r16,r2,16
    7e3c:	20c9883a 	add	r4,r4,r3
    7e40:	41000015 	stw	r4,0(r8)
    7e44:	42000104 	addi	r8,r8,4
    7e48:	3cbff016 	blt	r7,r18,7e0c <__multadd+0x34>
    7e4c:	80000826 	beq	r16,zero,7e70 <__multadd+0x98>
    7e50:	98800217 	ldw	r2,8(r19)
    7e54:	90800f0e 	bge	r18,r2,7e94 <__multadd+0xbc>
    7e58:	9485883a 	add	r2,r18,r18
    7e5c:	1085883a 	add	r2,r2,r2
    7e60:	14c5883a 	add	r2,r2,r19
    7e64:	90c00044 	addi	r3,r18,1
    7e68:	14000515 	stw	r16,20(r2)
    7e6c:	98c00415 	stw	r3,16(r19)
    7e70:	9805883a 	mov	r2,r19
    7e74:	dfc00517 	ldw	ra,20(sp)
    7e78:	dd000417 	ldw	r20,16(sp)
    7e7c:	dcc00317 	ldw	r19,12(sp)
    7e80:	dc800217 	ldw	r18,8(sp)
    7e84:	dc400117 	ldw	r17,4(sp)
    7e88:	dc000017 	ldw	r16,0(sp)
    7e8c:	dec00604 	addi	sp,sp,24
    7e90:	f800283a 	ret
    7e94:	99400117 	ldw	r5,4(r19)
    7e98:	a009883a 	mov	r4,r20
    7e9c:	29400044 	addi	r5,r5,1
    7ea0:	00076a40 	call	76a4 <_Balloc>
    7ea4:	99800417 	ldw	r6,16(r19)
    7ea8:	99400304 	addi	r5,r19,12
    7eac:	11000304 	addi	r4,r2,12
    7eb0:	318d883a 	add	r6,r6,r6
    7eb4:	318d883a 	add	r6,r6,r6
    7eb8:	31800204 	addi	r6,r6,8
    7ebc:	1023883a 	mov	r17,r2
    7ec0:	0006f0c0 	call	6f0c <memcpy>
    7ec4:	980b883a 	mov	r5,r19
    7ec8:	a009883a 	mov	r4,r20
    7ecc:	00071240 	call	7124 <_Bfree>
    7ed0:	8827883a 	mov	r19,r17
    7ed4:	003fe006 	br	7e58 <__multadd+0x80>

00007ed8 <__pow5mult>:
    7ed8:	defffa04 	addi	sp,sp,-24
    7edc:	308000cc 	andi	r2,r6,3
    7ee0:	dd000415 	stw	r20,16(sp)
    7ee4:	dcc00315 	stw	r19,12(sp)
    7ee8:	dc000015 	stw	r16,0(sp)
    7eec:	dfc00515 	stw	ra,20(sp)
    7ef0:	dc800215 	stw	r18,8(sp)
    7ef4:	dc400115 	stw	r17,4(sp)
    7ef8:	3021883a 	mov	r16,r6
    7efc:	2027883a 	mov	r19,r4
    7f00:	2829883a 	mov	r20,r5
    7f04:	10002b1e 	bne	r2,zero,7fb4 <__pow5mult+0xdc>
    7f08:	8025d0ba 	srai	r18,r16,2
    7f0c:	90001b26 	beq	r18,zero,7f7c <__pow5mult+0xa4>
    7f10:	9c001217 	ldw	r16,72(r19)
    7f14:	8000081e 	bne	r16,zero,7f38 <__pow5mult+0x60>
    7f18:	00003006 	br	7fdc <__pow5mult+0x104>
    7f1c:	800b883a 	mov	r5,r16
    7f20:	800d883a 	mov	r6,r16
    7f24:	9809883a 	mov	r4,r19
    7f28:	90001426 	beq	r18,zero,7f7c <__pow5mult+0xa4>
    7f2c:	80800017 	ldw	r2,0(r16)
    7f30:	10001b26 	beq	r2,zero,7fa0 <__pow5mult+0xc8>
    7f34:	1021883a 	mov	r16,r2
    7f38:	9080004c 	andi	r2,r18,1
    7f3c:	1005003a 	cmpeq	r2,r2,zero
    7f40:	9025d07a 	srai	r18,r18,1
    7f44:	800d883a 	mov	r6,r16
    7f48:	9809883a 	mov	r4,r19
    7f4c:	a00b883a 	mov	r5,r20
    7f50:	103ff21e 	bne	r2,zero,7f1c <__pow5mult+0x44>
    7f54:	0007bb40 	call	7bb4 <__multiply>
    7f58:	a00b883a 	mov	r5,r20
    7f5c:	9809883a 	mov	r4,r19
    7f60:	1023883a 	mov	r17,r2
    7f64:	00071240 	call	7124 <_Bfree>
    7f68:	8829883a 	mov	r20,r17
    7f6c:	800b883a 	mov	r5,r16
    7f70:	800d883a 	mov	r6,r16
    7f74:	9809883a 	mov	r4,r19
    7f78:	903fec1e 	bne	r18,zero,7f2c <__pow5mult+0x54>
    7f7c:	a005883a 	mov	r2,r20
    7f80:	dfc00517 	ldw	ra,20(sp)
    7f84:	dd000417 	ldw	r20,16(sp)
    7f88:	dcc00317 	ldw	r19,12(sp)
    7f8c:	dc800217 	ldw	r18,8(sp)
    7f90:	dc400117 	ldw	r17,4(sp)
    7f94:	dc000017 	ldw	r16,0(sp)
    7f98:	dec00604 	addi	sp,sp,24
    7f9c:	f800283a 	ret
    7fa0:	0007bb40 	call	7bb4 <__multiply>
    7fa4:	80800015 	stw	r2,0(r16)
    7fa8:	1021883a 	mov	r16,r2
    7fac:	10000015 	stw	zero,0(r2)
    7fb0:	003fe106 	br	7f38 <__pow5mult+0x60>
    7fb4:	1085883a 	add	r2,r2,r2
    7fb8:	00c00074 	movhi	r3,1
    7fbc:	18fd0504 	addi	r3,r3,-3052
    7fc0:	1085883a 	add	r2,r2,r2
    7fc4:	10c5883a 	add	r2,r2,r3
    7fc8:	11bfff17 	ldw	r6,-4(r2)
    7fcc:	000f883a 	mov	r7,zero
    7fd0:	0007dd80 	call	7dd8 <__multadd>
    7fd4:	1029883a 	mov	r20,r2
    7fd8:	003fcb06 	br	7f08 <__pow5mult+0x30>
    7fdc:	9809883a 	mov	r4,r19
    7fe0:	01409c44 	movi	r5,625
    7fe4:	0007d9c0 	call	7d9c <__i2b>
    7fe8:	98801215 	stw	r2,72(r19)
    7fec:	1021883a 	mov	r16,r2
    7ff0:	10000015 	stw	zero,0(r2)
    7ff4:	003fd006 	br	7f38 <__pow5mult+0x60>

00007ff8 <__s2b>:
    7ff8:	defff904 	addi	sp,sp,-28
    7ffc:	dcc00315 	stw	r19,12(sp)
    8000:	dc800215 	stw	r18,8(sp)
    8004:	2827883a 	mov	r19,r5
    8008:	2025883a 	mov	r18,r4
    800c:	01400244 	movi	r5,9
    8010:	39000204 	addi	r4,r7,8
    8014:	dd000415 	stw	r20,16(sp)
    8018:	dc400115 	stw	r17,4(sp)
    801c:	dfc00615 	stw	ra,24(sp)
    8020:	dd400515 	stw	r21,20(sp)
    8024:	dc000015 	stw	r16,0(sp)
    8028:	3829883a 	mov	r20,r7
    802c:	3023883a 	mov	r17,r6
    8030:	0001a0c0 	call	1a0c <__divsi3>
    8034:	00c00044 	movi	r3,1
    8038:	1880350e 	bge	r3,r2,8110 <__s2b+0x118>
    803c:	000b883a 	mov	r5,zero
    8040:	18c7883a 	add	r3,r3,r3
    8044:	29400044 	addi	r5,r5,1
    8048:	18bffd16 	blt	r3,r2,8040 <__s2b+0x48>
    804c:	9009883a 	mov	r4,r18
    8050:	00076a40 	call	76a4 <_Balloc>
    8054:	1011883a 	mov	r8,r2
    8058:	d8800717 	ldw	r2,28(sp)
    805c:	00c00044 	movi	r3,1
    8060:	01800244 	movi	r6,9
    8064:	40800515 	stw	r2,20(r8)
    8068:	40c00415 	stw	r3,16(r8)
    806c:	3440260e 	bge	r6,r17,8108 <__s2b+0x110>
    8070:	3021883a 	mov	r16,r6
    8074:	99ab883a 	add	r21,r19,r6
    8078:	9c05883a 	add	r2,r19,r16
    807c:	11c00007 	ldb	r7,0(r2)
    8080:	400b883a 	mov	r5,r8
    8084:	9009883a 	mov	r4,r18
    8088:	39fff404 	addi	r7,r7,-48
    808c:	01800284 	movi	r6,10
    8090:	0007dd80 	call	7dd8 <__multadd>
    8094:	84000044 	addi	r16,r16,1
    8098:	1011883a 	mov	r8,r2
    809c:	8c3ff61e 	bne	r17,r16,8078 <__s2b+0x80>
    80a0:	ac45883a 	add	r2,r21,r17
    80a4:	117ffe04 	addi	r5,r2,-8
    80a8:	880d883a 	mov	r6,r17
    80ac:	35000c0e 	bge	r6,r20,80e0 <__s2b+0xe8>
    80b0:	a185c83a 	sub	r2,r20,r6
    80b4:	2821883a 	mov	r16,r5
    80b8:	28a3883a 	add	r17,r5,r2
    80bc:	81c00007 	ldb	r7,0(r16)
    80c0:	400b883a 	mov	r5,r8
    80c4:	9009883a 	mov	r4,r18
    80c8:	39fff404 	addi	r7,r7,-48
    80cc:	01800284 	movi	r6,10
    80d0:	0007dd80 	call	7dd8 <__multadd>
    80d4:	84000044 	addi	r16,r16,1
    80d8:	1011883a 	mov	r8,r2
    80dc:	847ff71e 	bne	r16,r17,80bc <__s2b+0xc4>
    80e0:	4005883a 	mov	r2,r8
    80e4:	dfc00617 	ldw	ra,24(sp)
    80e8:	dd400517 	ldw	r21,20(sp)
    80ec:	dd000417 	ldw	r20,16(sp)
    80f0:	dcc00317 	ldw	r19,12(sp)
    80f4:	dc800217 	ldw	r18,8(sp)
    80f8:	dc400117 	ldw	r17,4(sp)
    80fc:	dc000017 	ldw	r16,0(sp)
    8100:	dec00704 	addi	sp,sp,28
    8104:	f800283a 	ret
    8108:	99400284 	addi	r5,r19,10
    810c:	003fe706 	br	80ac <__s2b+0xb4>
    8110:	000b883a 	mov	r5,zero
    8114:	003fcd06 	br	804c <__s2b+0x54>

00008118 <_realloc_r>:
    8118:	defff404 	addi	sp,sp,-48
    811c:	dd800815 	stw	r22,32(sp)
    8120:	dc800415 	stw	r18,16(sp)
    8124:	dc400315 	stw	r17,12(sp)
    8128:	dfc00b15 	stw	ra,44(sp)
    812c:	df000a15 	stw	fp,40(sp)
    8130:	ddc00915 	stw	r23,36(sp)
    8134:	dd400715 	stw	r21,28(sp)
    8138:	dd000615 	stw	r20,24(sp)
    813c:	dcc00515 	stw	r19,20(sp)
    8140:	dc000215 	stw	r16,8(sp)
    8144:	2825883a 	mov	r18,r5
    8148:	3023883a 	mov	r17,r6
    814c:	202d883a 	mov	r22,r4
    8150:	2800c926 	beq	r5,zero,8478 <_realloc_r+0x360>
    8154:	000b7800 	call	b780 <__malloc_lock>
    8158:	943ffe04 	addi	r16,r18,-8
    815c:	88c002c4 	addi	r3,r17,11
    8160:	00800584 	movi	r2,22
    8164:	82000117 	ldw	r8,4(r16)
    8168:	10c01b2e 	bgeu	r2,r3,81d8 <_realloc_r+0xc0>
    816c:	00bffe04 	movi	r2,-8
    8170:	188e703a 	and	r7,r3,r2
    8174:	3839883a 	mov	fp,r7
    8178:	38001a16 	blt	r7,zero,81e4 <_realloc_r+0xcc>
    817c:	e4401936 	bltu	fp,r17,81e4 <_realloc_r+0xcc>
    8180:	013fff04 	movi	r4,-4
    8184:	4126703a 	and	r19,r8,r4
    8188:	99c02616 	blt	r19,r7,8224 <_realloc_r+0x10c>
    818c:	802b883a 	mov	r21,r16
    8190:	9829883a 	mov	r20,r19
    8194:	84000204 	addi	r16,r16,8
    8198:	a80f883a 	mov	r7,r21
    819c:	a70dc83a 	sub	r6,r20,fp
    81a0:	008003c4 	movi	r2,15
    81a4:	1180c136 	bltu	r2,r6,84ac <_realloc_r+0x394>
    81a8:	38800117 	ldw	r2,4(r7)
    81ac:	a549883a 	add	r4,r20,r21
    81b0:	1080004c 	andi	r2,r2,1
    81b4:	a084b03a 	or	r2,r20,r2
    81b8:	38800115 	stw	r2,4(r7)
    81bc:	20c00117 	ldw	r3,4(r4)
    81c0:	18c00054 	ori	r3,r3,1
    81c4:	20c00115 	stw	r3,4(r4)
    81c8:	b009883a 	mov	r4,r22
    81cc:	000b7a00 	call	b7a0 <__malloc_unlock>
    81d0:	8023883a 	mov	r17,r16
    81d4:	00000606 	br	81f0 <_realloc_r+0xd8>
    81d8:	01c00404 	movi	r7,16
    81dc:	3839883a 	mov	fp,r7
    81e0:	e47fe72e 	bgeu	fp,r17,8180 <_realloc_r+0x68>
    81e4:	00800304 	movi	r2,12
    81e8:	0023883a 	mov	r17,zero
    81ec:	b0800015 	stw	r2,0(r22)
    81f0:	8805883a 	mov	r2,r17
    81f4:	dfc00b17 	ldw	ra,44(sp)
    81f8:	df000a17 	ldw	fp,40(sp)
    81fc:	ddc00917 	ldw	r23,36(sp)
    8200:	dd800817 	ldw	r22,32(sp)
    8204:	dd400717 	ldw	r21,28(sp)
    8208:	dd000617 	ldw	r20,24(sp)
    820c:	dcc00517 	ldw	r19,20(sp)
    8210:	dc800417 	ldw	r18,16(sp)
    8214:	dc400317 	ldw	r17,12(sp)
    8218:	dc000217 	ldw	r16,8(sp)
    821c:	dec00c04 	addi	sp,sp,48
    8220:	f800283a 	ret
    8224:	00800074 	movhi	r2,1
    8228:	10be6904 	addi	r2,r2,-1628
    822c:	12400217 	ldw	r9,8(r2)
    8230:	84cd883a 	add	r6,r16,r19
    8234:	802b883a 	mov	r21,r16
    8238:	3240b926 	beq	r6,r9,8520 <_realloc_r+0x408>
    823c:	31400117 	ldw	r5,4(r6)
    8240:	00bfff84 	movi	r2,-2
    8244:	2884703a 	and	r2,r5,r2
    8248:	1185883a 	add	r2,r2,r6
    824c:	10c00117 	ldw	r3,4(r2)
    8250:	18c0004c 	andi	r3,r3,1
    8254:	1807003a 	cmpeq	r3,r3,zero
    8258:	1800a326 	beq	r3,zero,84e8 <_realloc_r+0x3d0>
    825c:	2908703a 	and	r4,r5,r4
    8260:	9929883a 	add	r20,r19,r4
    8264:	a1c0a30e 	bge	r20,r7,84f4 <_realloc_r+0x3dc>
    8268:	4080004c 	andi	r2,r8,1
    826c:	1000551e 	bne	r2,zero,83c4 <_realloc_r+0x2ac>
    8270:	80800017 	ldw	r2,0(r16)
    8274:	80afc83a 	sub	r23,r16,r2
    8278:	b8c00117 	ldw	r3,4(r23)
    827c:	00bfff04 	movi	r2,-4
    8280:	1884703a 	and	r2,r3,r2
    8284:	30002e26 	beq	r6,zero,8340 <_realloc_r+0x228>
    8288:	3240b926 	beq	r6,r9,8570 <_realloc_r+0x458>
    828c:	98a9883a 	add	r20,r19,r2
    8290:	2509883a 	add	r4,r4,r20
    8294:	d9000015 	stw	r4,0(sp)
    8298:	21c02a16 	blt	r4,r7,8344 <_realloc_r+0x22c>
    829c:	30800317 	ldw	r2,12(r6)
    82a0:	30c00217 	ldw	r3,8(r6)
    82a4:	01400904 	movi	r5,36
    82a8:	99bfff04 	addi	r6,r19,-4
    82ac:	18800315 	stw	r2,12(r3)
    82b0:	10c00215 	stw	r3,8(r2)
    82b4:	b9000317 	ldw	r4,12(r23)
    82b8:	b8800217 	ldw	r2,8(r23)
    82bc:	b82b883a 	mov	r21,r23
    82c0:	bc000204 	addi	r16,r23,8
    82c4:	20800215 	stw	r2,8(r4)
    82c8:	11000315 	stw	r4,12(r2)
    82cc:	2980e436 	bltu	r5,r6,8660 <_realloc_r+0x548>
    82d0:	008004c4 	movi	r2,19
    82d4:	9009883a 	mov	r4,r18
    82d8:	8011883a 	mov	r8,r16
    82dc:	11800f2e 	bgeu	r2,r6,831c <_realloc_r+0x204>
    82e0:	90800017 	ldw	r2,0(r18)
    82e4:	ba000404 	addi	r8,r23,16
    82e8:	91000204 	addi	r4,r18,8
    82ec:	b8800215 	stw	r2,8(r23)
    82f0:	90c00117 	ldw	r3,4(r18)
    82f4:	008006c4 	movi	r2,27
    82f8:	b8c00315 	stw	r3,12(r23)
    82fc:	1180072e 	bgeu	r2,r6,831c <_realloc_r+0x204>
    8300:	90c00217 	ldw	r3,8(r18)
    8304:	ba000604 	addi	r8,r23,24
    8308:	91000404 	addi	r4,r18,16
    830c:	b8c00415 	stw	r3,16(r23)
    8310:	90800317 	ldw	r2,12(r18)
    8314:	b8800515 	stw	r2,20(r23)
    8318:	3140e726 	beq	r6,r5,86b8 <_realloc_r+0x5a0>
    831c:	20800017 	ldw	r2,0(r4)
    8320:	dd000017 	ldw	r20,0(sp)
    8324:	b80f883a 	mov	r7,r23
    8328:	40800015 	stw	r2,0(r8)
    832c:	20c00117 	ldw	r3,4(r4)
    8330:	40c00115 	stw	r3,4(r8)
    8334:	20800217 	ldw	r2,8(r4)
    8338:	40800215 	stw	r2,8(r8)
    833c:	003f9706 	br	819c <_realloc_r+0x84>
    8340:	98a9883a 	add	r20,r19,r2
    8344:	a1c01f16 	blt	r20,r7,83c4 <_realloc_r+0x2ac>
    8348:	b8c00317 	ldw	r3,12(r23)
    834c:	b8800217 	ldw	r2,8(r23)
    8350:	99bfff04 	addi	r6,r19,-4
    8354:	01400904 	movi	r5,36
    8358:	b82b883a 	mov	r21,r23
    835c:	18800215 	stw	r2,8(r3)
    8360:	10c00315 	stw	r3,12(r2)
    8364:	bc000204 	addi	r16,r23,8
    8368:	2980c336 	bltu	r5,r6,8678 <_realloc_r+0x560>
    836c:	008004c4 	movi	r2,19
    8370:	9009883a 	mov	r4,r18
    8374:	8011883a 	mov	r8,r16
    8378:	11800f2e 	bgeu	r2,r6,83b8 <_realloc_r+0x2a0>
    837c:	90800017 	ldw	r2,0(r18)
    8380:	ba000404 	addi	r8,r23,16
    8384:	91000204 	addi	r4,r18,8
    8388:	b8800215 	stw	r2,8(r23)
    838c:	90c00117 	ldw	r3,4(r18)
    8390:	008006c4 	movi	r2,27
    8394:	b8c00315 	stw	r3,12(r23)
    8398:	1180072e 	bgeu	r2,r6,83b8 <_realloc_r+0x2a0>
    839c:	90c00217 	ldw	r3,8(r18)
    83a0:	ba000604 	addi	r8,r23,24
    83a4:	91000404 	addi	r4,r18,16
    83a8:	b8c00415 	stw	r3,16(r23)
    83ac:	90800317 	ldw	r2,12(r18)
    83b0:	b8800515 	stw	r2,20(r23)
    83b4:	3140c726 	beq	r6,r5,86d4 <_realloc_r+0x5bc>
    83b8:	20800017 	ldw	r2,0(r4)
    83bc:	b80f883a 	mov	r7,r23
    83c0:	003fd906 	br	8328 <_realloc_r+0x210>
    83c4:	880b883a 	mov	r5,r17
    83c8:	b009883a 	mov	r4,r22
    83cc:	0001b040 	call	1b04 <_malloc_r>
    83d0:	1023883a 	mov	r17,r2
    83d4:	10002526 	beq	r2,zero,846c <_realloc_r+0x354>
    83d8:	80800117 	ldw	r2,4(r16)
    83dc:	00ffff84 	movi	r3,-2
    83e0:	893ffe04 	addi	r4,r17,-8
    83e4:	10c4703a 	and	r2,r2,r3
    83e8:	8085883a 	add	r2,r16,r2
    83ec:	20809526 	beq	r4,r2,8644 <_realloc_r+0x52c>
    83f0:	99bfff04 	addi	r6,r19,-4
    83f4:	01c00904 	movi	r7,36
    83f8:	39804536 	bltu	r7,r6,8510 <_realloc_r+0x3f8>
    83fc:	008004c4 	movi	r2,19
    8400:	9009883a 	mov	r4,r18
    8404:	880b883a 	mov	r5,r17
    8408:	11800f2e 	bgeu	r2,r6,8448 <_realloc_r+0x330>
    840c:	90800017 	ldw	r2,0(r18)
    8410:	89400204 	addi	r5,r17,8
    8414:	91000204 	addi	r4,r18,8
    8418:	88800015 	stw	r2,0(r17)
    841c:	90c00117 	ldw	r3,4(r18)
    8420:	008006c4 	movi	r2,27
    8424:	88c00115 	stw	r3,4(r17)
    8428:	1180072e 	bgeu	r2,r6,8448 <_realloc_r+0x330>
    842c:	90c00217 	ldw	r3,8(r18)
    8430:	89400404 	addi	r5,r17,16
    8434:	91000404 	addi	r4,r18,16
    8438:	88c00215 	stw	r3,8(r17)
    843c:	90800317 	ldw	r2,12(r18)
    8440:	88800315 	stw	r2,12(r17)
    8444:	31c09126 	beq	r6,r7,868c <_realloc_r+0x574>
    8448:	20800017 	ldw	r2,0(r4)
    844c:	28800015 	stw	r2,0(r5)
    8450:	20c00117 	ldw	r3,4(r4)
    8454:	28c00115 	stw	r3,4(r5)
    8458:	20800217 	ldw	r2,8(r4)
    845c:	28800215 	stw	r2,8(r5)
    8460:	900b883a 	mov	r5,r18
    8464:	b009883a 	mov	r4,r22
    8468:	00062a00 	call	62a0 <_free_r>
    846c:	b009883a 	mov	r4,r22
    8470:	000b7a00 	call	b7a0 <__malloc_unlock>
    8474:	003f5e06 	br	81f0 <_realloc_r+0xd8>
    8478:	300b883a 	mov	r5,r6
    847c:	dfc00b17 	ldw	ra,44(sp)
    8480:	df000a17 	ldw	fp,40(sp)
    8484:	ddc00917 	ldw	r23,36(sp)
    8488:	dd800817 	ldw	r22,32(sp)
    848c:	dd400717 	ldw	r21,28(sp)
    8490:	dd000617 	ldw	r20,24(sp)
    8494:	dcc00517 	ldw	r19,20(sp)
    8498:	dc800417 	ldw	r18,16(sp)
    849c:	dc400317 	ldw	r17,12(sp)
    84a0:	dc000217 	ldw	r16,8(sp)
    84a4:	dec00c04 	addi	sp,sp,48
    84a8:	0001b041 	jmpi	1b04 <_malloc_r>
    84ac:	38800117 	ldw	r2,4(r7)
    84b0:	e54b883a 	add	r5,fp,r21
    84b4:	31000054 	ori	r4,r6,1
    84b8:	1080004c 	andi	r2,r2,1
    84bc:	1704b03a 	or	r2,r2,fp
    84c0:	38800115 	stw	r2,4(r7)
    84c4:	29000115 	stw	r4,4(r5)
    84c8:	2987883a 	add	r3,r5,r6
    84cc:	18800117 	ldw	r2,4(r3)
    84d0:	29400204 	addi	r5,r5,8
    84d4:	b009883a 	mov	r4,r22
    84d8:	10800054 	ori	r2,r2,1
    84dc:	18800115 	stw	r2,4(r3)
    84e0:	00062a00 	call	62a0 <_free_r>
    84e4:	003f3806 	br	81c8 <_realloc_r+0xb0>
    84e8:	000d883a 	mov	r6,zero
    84ec:	0009883a 	mov	r4,zero
    84f0:	003f5d06 	br	8268 <_realloc_r+0x150>
    84f4:	30c00217 	ldw	r3,8(r6)
    84f8:	30800317 	ldw	r2,12(r6)
    84fc:	800f883a 	mov	r7,r16
    8500:	84000204 	addi	r16,r16,8
    8504:	10c00215 	stw	r3,8(r2)
    8508:	18800315 	stw	r2,12(r3)
    850c:	003f2306 	br	819c <_realloc_r+0x84>
    8510:	8809883a 	mov	r4,r17
    8514:	900b883a 	mov	r5,r18
    8518:	0006fac0 	call	6fac <memmove>
    851c:	003fd006 	br	8460 <_realloc_r+0x348>
    8520:	30800117 	ldw	r2,4(r6)
    8524:	e0c00404 	addi	r3,fp,16
    8528:	1108703a 	and	r4,r2,r4
    852c:	9905883a 	add	r2,r19,r4
    8530:	10ff4d16 	blt	r2,r3,8268 <_realloc_r+0x150>
    8534:	1705c83a 	sub	r2,r2,fp
    8538:	870b883a 	add	r5,r16,fp
    853c:	10800054 	ori	r2,r2,1
    8540:	28800115 	stw	r2,4(r5)
    8544:	80c00117 	ldw	r3,4(r16)
    8548:	00800074 	movhi	r2,1
    854c:	10be6904 	addi	r2,r2,-1628
    8550:	b009883a 	mov	r4,r22
    8554:	18c0004c 	andi	r3,r3,1
    8558:	e0c6b03a 	or	r3,fp,r3
    855c:	11400215 	stw	r5,8(r2)
    8560:	80c00115 	stw	r3,4(r16)
    8564:	000b7a00 	call	b7a0 <__malloc_unlock>
    8568:	84400204 	addi	r17,r16,8
    856c:	003f2006 	br	81f0 <_realloc_r+0xd8>
    8570:	98a9883a 	add	r20,r19,r2
    8574:	2509883a 	add	r4,r4,r20
    8578:	e0800404 	addi	r2,fp,16
    857c:	d9000115 	stw	r4,4(sp)
    8580:	20bf7016 	blt	r4,r2,8344 <_realloc_r+0x22c>
    8584:	b8c00317 	ldw	r3,12(r23)
    8588:	b8800217 	ldw	r2,8(r23)
    858c:	99bfff04 	addi	r6,r19,-4
    8590:	01400904 	movi	r5,36
    8594:	18800215 	stw	r2,8(r3)
    8598:	10c00315 	stw	r3,12(r2)
    859c:	bc400204 	addi	r17,r23,8
    85a0:	29804136 	bltu	r5,r6,86a8 <_realloc_r+0x590>
    85a4:	008004c4 	movi	r2,19
    85a8:	9009883a 	mov	r4,r18
    85ac:	880f883a 	mov	r7,r17
    85b0:	11800f2e 	bgeu	r2,r6,85f0 <_realloc_r+0x4d8>
    85b4:	90800017 	ldw	r2,0(r18)
    85b8:	b9c00404 	addi	r7,r23,16
    85bc:	91000204 	addi	r4,r18,8
    85c0:	b8800215 	stw	r2,8(r23)
    85c4:	90c00117 	ldw	r3,4(r18)
    85c8:	008006c4 	movi	r2,27
    85cc:	b8c00315 	stw	r3,12(r23)
    85d0:	1180072e 	bgeu	r2,r6,85f0 <_realloc_r+0x4d8>
    85d4:	90c00217 	ldw	r3,8(r18)
    85d8:	b9c00604 	addi	r7,r23,24
    85dc:	91000404 	addi	r4,r18,16
    85e0:	b8c00415 	stw	r3,16(r23)
    85e4:	90800317 	ldw	r2,12(r18)
    85e8:	b8800515 	stw	r2,20(r23)
    85ec:	31404026 	beq	r6,r5,86f0 <_realloc_r+0x5d8>
    85f0:	20800017 	ldw	r2,0(r4)
    85f4:	38800015 	stw	r2,0(r7)
    85f8:	20c00117 	ldw	r3,4(r4)
    85fc:	38c00115 	stw	r3,4(r7)
    8600:	20800217 	ldw	r2,8(r4)
    8604:	38800215 	stw	r2,8(r7)
    8608:	d8c00117 	ldw	r3,4(sp)
    860c:	bf0b883a 	add	r5,r23,fp
    8610:	b009883a 	mov	r4,r22
    8614:	1f05c83a 	sub	r2,r3,fp
    8618:	10800054 	ori	r2,r2,1
    861c:	28800115 	stw	r2,4(r5)
    8620:	b8c00117 	ldw	r3,4(r23)
    8624:	00800074 	movhi	r2,1
    8628:	10be6904 	addi	r2,r2,-1628
    862c:	11400215 	stw	r5,8(r2)
    8630:	18c0004c 	andi	r3,r3,1
    8634:	e0c6b03a 	or	r3,fp,r3
    8638:	b8c00115 	stw	r3,4(r23)
    863c:	000b7a00 	call	b7a0 <__malloc_unlock>
    8640:	003eeb06 	br	81f0 <_realloc_r+0xd8>
    8644:	20800117 	ldw	r2,4(r4)
    8648:	00ffff04 	movi	r3,-4
    864c:	800f883a 	mov	r7,r16
    8650:	10c4703a 	and	r2,r2,r3
    8654:	98a9883a 	add	r20,r19,r2
    8658:	84000204 	addi	r16,r16,8
    865c:	003ecf06 	br	819c <_realloc_r+0x84>
    8660:	900b883a 	mov	r5,r18
    8664:	8009883a 	mov	r4,r16
    8668:	0006fac0 	call	6fac <memmove>
    866c:	dd000017 	ldw	r20,0(sp)
    8670:	b80f883a 	mov	r7,r23
    8674:	003ec906 	br	819c <_realloc_r+0x84>
    8678:	900b883a 	mov	r5,r18
    867c:	8009883a 	mov	r4,r16
    8680:	0006fac0 	call	6fac <memmove>
    8684:	b80f883a 	mov	r7,r23
    8688:	003ec406 	br	819c <_realloc_r+0x84>
    868c:	90c00417 	ldw	r3,16(r18)
    8690:	89400604 	addi	r5,r17,24
    8694:	91000604 	addi	r4,r18,24
    8698:	88c00415 	stw	r3,16(r17)
    869c:	90800517 	ldw	r2,20(r18)
    86a0:	88800515 	stw	r2,20(r17)
    86a4:	003f6806 	br	8448 <_realloc_r+0x330>
    86a8:	900b883a 	mov	r5,r18
    86ac:	8809883a 	mov	r4,r17
    86b0:	0006fac0 	call	6fac <memmove>
    86b4:	003fd406 	br	8608 <_realloc_r+0x4f0>
    86b8:	90c00417 	ldw	r3,16(r18)
    86bc:	91000604 	addi	r4,r18,24
    86c0:	ba000804 	addi	r8,r23,32
    86c4:	b8c00615 	stw	r3,24(r23)
    86c8:	90800517 	ldw	r2,20(r18)
    86cc:	b8800715 	stw	r2,28(r23)
    86d0:	003f1206 	br	831c <_realloc_r+0x204>
    86d4:	90c00417 	ldw	r3,16(r18)
    86d8:	91000604 	addi	r4,r18,24
    86dc:	ba000804 	addi	r8,r23,32
    86e0:	b8c00615 	stw	r3,24(r23)
    86e4:	90800517 	ldw	r2,20(r18)
    86e8:	b8800715 	stw	r2,28(r23)
    86ec:	003f3206 	br	83b8 <_realloc_r+0x2a0>
    86f0:	90c00417 	ldw	r3,16(r18)
    86f4:	91000604 	addi	r4,r18,24
    86f8:	b9c00804 	addi	r7,r23,32
    86fc:	b8c00615 	stw	r3,24(r23)
    8700:	90800517 	ldw	r2,20(r18)
    8704:	b8800715 	stw	r2,28(r23)
    8708:	003fb906 	br	85f0 <_realloc_r+0x4d8>

0000870c <__isinfd>:
    870c:	200d883a 	mov	r6,r4
    8710:	0109c83a 	sub	r4,zero,r4
    8714:	2188b03a 	or	r4,r4,r6
    8718:	2008d7fa 	srli	r4,r4,31
    871c:	00a00034 	movhi	r2,32768
    8720:	10bfffc4 	addi	r2,r2,-1
    8724:	1144703a 	and	r2,r2,r5
    8728:	2088b03a 	or	r4,r4,r2
    872c:	009ffc34 	movhi	r2,32752
    8730:	1105c83a 	sub	r2,r2,r4
    8734:	0087c83a 	sub	r3,zero,r2
    8738:	10c4b03a 	or	r2,r2,r3
    873c:	1004d7fa 	srli	r2,r2,31
    8740:	00c00044 	movi	r3,1
    8744:	1885c83a 	sub	r2,r3,r2
    8748:	f800283a 	ret

0000874c <__isnand>:
    874c:	200d883a 	mov	r6,r4
    8750:	0109c83a 	sub	r4,zero,r4
    8754:	2188b03a 	or	r4,r4,r6
    8758:	2008d7fa 	srli	r4,r4,31
    875c:	00a00034 	movhi	r2,32768
    8760:	10bfffc4 	addi	r2,r2,-1
    8764:	1144703a 	and	r2,r2,r5
    8768:	2088b03a 	or	r4,r4,r2
    876c:	009ffc34 	movhi	r2,32752
    8770:	1105c83a 	sub	r2,r2,r4
    8774:	1004d7fa 	srli	r2,r2,31
    8778:	f800283a 	ret

0000877c <__sclose>:
    877c:	2940038f 	ldh	r5,14(r5)
    8780:	0008ab01 	jmpi	8ab0 <_close_r>

00008784 <__sseek>:
    8784:	defffe04 	addi	sp,sp,-8
    8788:	dc000015 	stw	r16,0(sp)
    878c:	2821883a 	mov	r16,r5
    8790:	2940038f 	ldh	r5,14(r5)
    8794:	dfc00115 	stw	ra,4(sp)
    8798:	0008d280 	call	8d28 <_lseek_r>
    879c:	1007883a 	mov	r3,r2
    87a0:	00bfffc4 	movi	r2,-1
    87a4:	18800926 	beq	r3,r2,87cc <__sseek+0x48>
    87a8:	8080030b 	ldhu	r2,12(r16)
    87ac:	80c01415 	stw	r3,80(r16)
    87b0:	10840014 	ori	r2,r2,4096
    87b4:	8080030d 	sth	r2,12(r16)
    87b8:	1805883a 	mov	r2,r3
    87bc:	dfc00117 	ldw	ra,4(sp)
    87c0:	dc000017 	ldw	r16,0(sp)
    87c4:	dec00204 	addi	sp,sp,8
    87c8:	f800283a 	ret
    87cc:	8080030b 	ldhu	r2,12(r16)
    87d0:	10bbffcc 	andi	r2,r2,61439
    87d4:	8080030d 	sth	r2,12(r16)
    87d8:	1805883a 	mov	r2,r3
    87dc:	dfc00117 	ldw	ra,4(sp)
    87e0:	dc000017 	ldw	r16,0(sp)
    87e4:	dec00204 	addi	sp,sp,8
    87e8:	f800283a 	ret

000087ec <__swrite>:
    87ec:	2880030b 	ldhu	r2,12(r5)
    87f0:	defffb04 	addi	sp,sp,-20
    87f4:	dcc00315 	stw	r19,12(sp)
    87f8:	1080400c 	andi	r2,r2,256
    87fc:	dc800215 	stw	r18,8(sp)
    8800:	dc400115 	stw	r17,4(sp)
    8804:	dc000015 	stw	r16,0(sp)
    8808:	3027883a 	mov	r19,r6
    880c:	3825883a 	mov	r18,r7
    8810:	dfc00415 	stw	ra,16(sp)
    8814:	2821883a 	mov	r16,r5
    8818:	000d883a 	mov	r6,zero
    881c:	01c00084 	movi	r7,2
    8820:	2023883a 	mov	r17,r4
    8824:	10000226 	beq	r2,zero,8830 <__swrite+0x44>
    8828:	2940038f 	ldh	r5,14(r5)
    882c:	0008d280 	call	8d28 <_lseek_r>
    8830:	8080030b 	ldhu	r2,12(r16)
    8834:	8140038f 	ldh	r5,14(r16)
    8838:	8809883a 	mov	r4,r17
    883c:	10bbffcc 	andi	r2,r2,61439
    8840:	980d883a 	mov	r6,r19
    8844:	900f883a 	mov	r7,r18
    8848:	8080030d 	sth	r2,12(r16)
    884c:	dfc00417 	ldw	ra,16(sp)
    8850:	dcc00317 	ldw	r19,12(sp)
    8854:	dc800217 	ldw	r18,8(sp)
    8858:	dc400117 	ldw	r17,4(sp)
    885c:	dc000017 	ldw	r16,0(sp)
    8860:	dec00504 	addi	sp,sp,20
    8864:	00089841 	jmpi	8984 <_write_r>

00008868 <__sread>:
    8868:	defffe04 	addi	sp,sp,-8
    886c:	dc000015 	stw	r16,0(sp)
    8870:	2821883a 	mov	r16,r5
    8874:	2940038f 	ldh	r5,14(r5)
    8878:	dfc00115 	stw	ra,4(sp)
    887c:	0008da00 	call	8da0 <_read_r>
    8880:	1007883a 	mov	r3,r2
    8884:	10000816 	blt	r2,zero,88a8 <__sread+0x40>
    8888:	80801417 	ldw	r2,80(r16)
    888c:	10c5883a 	add	r2,r2,r3
    8890:	80801415 	stw	r2,80(r16)
    8894:	1805883a 	mov	r2,r3
    8898:	dfc00117 	ldw	ra,4(sp)
    889c:	dc000017 	ldw	r16,0(sp)
    88a0:	dec00204 	addi	sp,sp,8
    88a4:	f800283a 	ret
    88a8:	8080030b 	ldhu	r2,12(r16)
    88ac:	10bbffcc 	andi	r2,r2,61439
    88b0:	8080030d 	sth	r2,12(r16)
    88b4:	1805883a 	mov	r2,r3
    88b8:	dfc00117 	ldw	ra,4(sp)
    88bc:	dc000017 	ldw	r16,0(sp)
    88c0:	dec00204 	addi	sp,sp,8
    88c4:	f800283a 	ret

000088c8 <strcmp>:
    88c8:	2144b03a 	or	r2,r4,r5
    88cc:	108000cc 	andi	r2,r2,3
    88d0:	10001d1e 	bne	r2,zero,8948 <strcmp+0x80>
    88d4:	200f883a 	mov	r7,r4
    88d8:	28800017 	ldw	r2,0(r5)
    88dc:	21000017 	ldw	r4,0(r4)
    88e0:	280d883a 	mov	r6,r5
    88e4:	2080161e 	bne	r4,r2,8940 <strcmp+0x78>
    88e8:	023fbff4 	movhi	r8,65279
    88ec:	423fbfc4 	addi	r8,r8,-257
    88f0:	2207883a 	add	r3,r4,r8
    88f4:	01602074 	movhi	r5,32897
    88f8:	29602004 	addi	r5,r5,-32640
    88fc:	1946703a 	and	r3,r3,r5
    8900:	0104303a 	nor	r2,zero,r4
    8904:	10c4703a 	and	r2,r2,r3
    8908:	10001c1e 	bne	r2,zero,897c <strcmp+0xb4>
    890c:	4013883a 	mov	r9,r8
    8910:	2811883a 	mov	r8,r5
    8914:	00000106 	br	891c <strcmp+0x54>
    8918:	1800181e 	bne	r3,zero,897c <strcmp+0xb4>
    891c:	39c00104 	addi	r7,r7,4
    8920:	39000017 	ldw	r4,0(r7)
    8924:	31800104 	addi	r6,r6,4
    8928:	31400017 	ldw	r5,0(r6)
    892c:	2245883a 	add	r2,r4,r9
    8930:	1204703a 	and	r2,r2,r8
    8934:	0106303a 	nor	r3,zero,r4
    8938:	1886703a 	and	r3,r3,r2
    893c:	217ff626 	beq	r4,r5,8918 <strcmp+0x50>
    8940:	3809883a 	mov	r4,r7
    8944:	300b883a 	mov	r5,r6
    8948:	20c00007 	ldb	r3,0(r4)
    894c:	1800051e 	bne	r3,zero,8964 <strcmp+0x9c>
    8950:	00000606 	br	896c <strcmp+0xa4>
    8954:	21000044 	addi	r4,r4,1
    8958:	20c00007 	ldb	r3,0(r4)
    895c:	29400044 	addi	r5,r5,1
    8960:	18000226 	beq	r3,zero,896c <strcmp+0xa4>
    8964:	28800007 	ldb	r2,0(r5)
    8968:	18bffa26 	beq	r3,r2,8954 <strcmp+0x8c>
    896c:	20c00003 	ldbu	r3,0(r4)
    8970:	28800003 	ldbu	r2,0(r5)
    8974:	1885c83a 	sub	r2,r3,r2
    8978:	f800283a 	ret
    897c:	0005883a 	mov	r2,zero
    8980:	f800283a 	ret

00008984 <_write_r>:
    8984:	defffd04 	addi	sp,sp,-12
    8988:	dc000015 	stw	r16,0(sp)
    898c:	04000074 	movhi	r16,1
    8990:	840c9904 	addi	r16,r16,12900
    8994:	dc400115 	stw	r17,4(sp)
    8998:	80000015 	stw	zero,0(r16)
    899c:	2023883a 	mov	r17,r4
    89a0:	2809883a 	mov	r4,r5
    89a4:	300b883a 	mov	r5,r6
    89a8:	380d883a 	mov	r6,r7
    89ac:	dfc00215 	stw	ra,8(sp)
    89b0:	000bc300 	call	bc30 <write>
    89b4:	1007883a 	mov	r3,r2
    89b8:	00bfffc4 	movi	r2,-1
    89bc:	18800626 	beq	r3,r2,89d8 <_write_r+0x54>
    89c0:	1805883a 	mov	r2,r3
    89c4:	dfc00217 	ldw	ra,8(sp)
    89c8:	dc400117 	ldw	r17,4(sp)
    89cc:	dc000017 	ldw	r16,0(sp)
    89d0:	dec00304 	addi	sp,sp,12
    89d4:	f800283a 	ret
    89d8:	80800017 	ldw	r2,0(r16)
    89dc:	103ff826 	beq	r2,zero,89c0 <_write_r+0x3c>
    89e0:	88800015 	stw	r2,0(r17)
    89e4:	1805883a 	mov	r2,r3
    89e8:	dfc00217 	ldw	ra,8(sp)
    89ec:	dc400117 	ldw	r17,4(sp)
    89f0:	dc000017 	ldw	r16,0(sp)
    89f4:	dec00304 	addi	sp,sp,12
    89f8:	f800283a 	ret

000089fc <_calloc_r>:
    89fc:	298b383a 	mul	r5,r5,r6
    8a00:	defffe04 	addi	sp,sp,-8
    8a04:	dc000015 	stw	r16,0(sp)
    8a08:	dfc00115 	stw	ra,4(sp)
    8a0c:	0001b040 	call	1b04 <_malloc_r>
    8a10:	1021883a 	mov	r16,r2
    8a14:	01c00904 	movi	r7,36
    8a18:	10000d26 	beq	r2,zero,8a50 <_calloc_r+0x54>
    8a1c:	10ffff17 	ldw	r3,-4(r2)
    8a20:	1009883a 	mov	r4,r2
    8a24:	00bfff04 	movi	r2,-4
    8a28:	1886703a 	and	r3,r3,r2
    8a2c:	1887883a 	add	r3,r3,r2
    8a30:	180d883a 	mov	r6,r3
    8a34:	000b883a 	mov	r5,zero
    8a38:	38c01736 	bltu	r7,r3,8a98 <_calloc_r+0x9c>
    8a3c:	008004c4 	movi	r2,19
    8a40:	10c00836 	bltu	r2,r3,8a64 <_calloc_r+0x68>
    8a44:	20000215 	stw	zero,8(r4)
    8a48:	20000015 	stw	zero,0(r4)
    8a4c:	20000115 	stw	zero,4(r4)
    8a50:	8005883a 	mov	r2,r16
    8a54:	dfc00117 	ldw	ra,4(sp)
    8a58:	dc000017 	ldw	r16,0(sp)
    8a5c:	dec00204 	addi	sp,sp,8
    8a60:	f800283a 	ret
    8a64:	008006c4 	movi	r2,27
    8a68:	80000015 	stw	zero,0(r16)
    8a6c:	80000115 	stw	zero,4(r16)
    8a70:	81000204 	addi	r4,r16,8
    8a74:	10fff32e 	bgeu	r2,r3,8a44 <_calloc_r+0x48>
    8a78:	80000215 	stw	zero,8(r16)
    8a7c:	80000315 	stw	zero,12(r16)
    8a80:	81000404 	addi	r4,r16,16
    8a84:	19ffef1e 	bne	r3,r7,8a44 <_calloc_r+0x48>
    8a88:	81000604 	addi	r4,r16,24
    8a8c:	80000415 	stw	zero,16(r16)
    8a90:	80000515 	stw	zero,20(r16)
    8a94:	003feb06 	br	8a44 <_calloc_r+0x48>
    8a98:	000708c0 	call	708c <memset>
    8a9c:	8005883a 	mov	r2,r16
    8aa0:	dfc00117 	ldw	ra,4(sp)
    8aa4:	dc000017 	ldw	r16,0(sp)
    8aa8:	dec00204 	addi	sp,sp,8
    8aac:	f800283a 	ret

00008ab0 <_close_r>:
    8ab0:	defffd04 	addi	sp,sp,-12
    8ab4:	dc000015 	stw	r16,0(sp)
    8ab8:	04000074 	movhi	r16,1
    8abc:	840c9904 	addi	r16,r16,12900
    8ac0:	dc400115 	stw	r17,4(sp)
    8ac4:	80000015 	stw	zero,0(r16)
    8ac8:	2023883a 	mov	r17,r4
    8acc:	2809883a 	mov	r4,r5
    8ad0:	dfc00215 	stw	ra,8(sp)
    8ad4:	000b0fc0 	call	b0fc <close>
    8ad8:	1007883a 	mov	r3,r2
    8adc:	00bfffc4 	movi	r2,-1
    8ae0:	18800626 	beq	r3,r2,8afc <_close_r+0x4c>
    8ae4:	1805883a 	mov	r2,r3
    8ae8:	dfc00217 	ldw	ra,8(sp)
    8aec:	dc400117 	ldw	r17,4(sp)
    8af0:	dc000017 	ldw	r16,0(sp)
    8af4:	dec00304 	addi	sp,sp,12
    8af8:	f800283a 	ret
    8afc:	80800017 	ldw	r2,0(r16)
    8b00:	103ff826 	beq	r2,zero,8ae4 <_close_r+0x34>
    8b04:	88800015 	stw	r2,0(r17)
    8b08:	1805883a 	mov	r2,r3
    8b0c:	dfc00217 	ldw	ra,8(sp)
    8b10:	dc400117 	ldw	r17,4(sp)
    8b14:	dc000017 	ldw	r16,0(sp)
    8b18:	dec00304 	addi	sp,sp,12
    8b1c:	f800283a 	ret

00008b20 <_fclose_r>:
    8b20:	defffc04 	addi	sp,sp,-16
    8b24:	dc400115 	stw	r17,4(sp)
    8b28:	dc000015 	stw	r16,0(sp)
    8b2c:	dfc00315 	stw	ra,12(sp)
    8b30:	dc800215 	stw	r18,8(sp)
    8b34:	2821883a 	mov	r16,r5
    8b38:	2023883a 	mov	r17,r4
    8b3c:	28002926 	beq	r5,zero,8be4 <_fclose_r+0xc4>
    8b40:	0005f0c0 	call	5f0c <__sfp_lock_acquire>
    8b44:	88000226 	beq	r17,zero,8b50 <_fclose_r+0x30>
    8b48:	88800e17 	ldw	r2,56(r17)
    8b4c:	10002d26 	beq	r2,zero,8c04 <_fclose_r+0xe4>
    8b50:	8080030f 	ldh	r2,12(r16)
    8b54:	10002226 	beq	r2,zero,8be0 <_fclose_r+0xc0>
    8b58:	8809883a 	mov	r4,r17
    8b5c:	800b883a 	mov	r5,r16
    8b60:	0005c840 	call	5c84 <_fflush_r>
    8b64:	1025883a 	mov	r18,r2
    8b68:	80800b17 	ldw	r2,44(r16)
    8b6c:	10000426 	beq	r2,zero,8b80 <_fclose_r+0x60>
    8b70:	81400717 	ldw	r5,28(r16)
    8b74:	8809883a 	mov	r4,r17
    8b78:	103ee83a 	callr	r2
    8b7c:	10002a16 	blt	r2,zero,8c28 <_fclose_r+0x108>
    8b80:	8080030b 	ldhu	r2,12(r16)
    8b84:	1080200c 	andi	r2,r2,128
    8b88:	1000231e 	bne	r2,zero,8c18 <_fclose_r+0xf8>
    8b8c:	81400c17 	ldw	r5,48(r16)
    8b90:	28000526 	beq	r5,zero,8ba8 <_fclose_r+0x88>
    8b94:	80801004 	addi	r2,r16,64
    8b98:	28800226 	beq	r5,r2,8ba4 <_fclose_r+0x84>
    8b9c:	8809883a 	mov	r4,r17
    8ba0:	00062a00 	call	62a0 <_free_r>
    8ba4:	80000c15 	stw	zero,48(r16)
    8ba8:	81401117 	ldw	r5,68(r16)
    8bac:	28000326 	beq	r5,zero,8bbc <_fclose_r+0x9c>
    8bb0:	8809883a 	mov	r4,r17
    8bb4:	00062a00 	call	62a0 <_free_r>
    8bb8:	80001115 	stw	zero,68(r16)
    8bbc:	8000030d 	sth	zero,12(r16)
    8bc0:	0005f100 	call	5f10 <__sfp_lock_release>
    8bc4:	9005883a 	mov	r2,r18
    8bc8:	dfc00317 	ldw	ra,12(sp)
    8bcc:	dc800217 	ldw	r18,8(sp)
    8bd0:	dc400117 	ldw	r17,4(sp)
    8bd4:	dc000017 	ldw	r16,0(sp)
    8bd8:	dec00404 	addi	sp,sp,16
    8bdc:	f800283a 	ret
    8be0:	0005f100 	call	5f10 <__sfp_lock_release>
    8be4:	0025883a 	mov	r18,zero
    8be8:	9005883a 	mov	r2,r18
    8bec:	dfc00317 	ldw	ra,12(sp)
    8bf0:	dc800217 	ldw	r18,8(sp)
    8bf4:	dc400117 	ldw	r17,4(sp)
    8bf8:	dc000017 	ldw	r16,0(sp)
    8bfc:	dec00404 	addi	sp,sp,16
    8c00:	f800283a 	ret
    8c04:	8809883a 	mov	r4,r17
    8c08:	0005f1c0 	call	5f1c <__sinit>
    8c0c:	8080030f 	ldh	r2,12(r16)
    8c10:	103fd11e 	bne	r2,zero,8b58 <_fclose_r+0x38>
    8c14:	003ff206 	br	8be0 <_fclose_r+0xc0>
    8c18:	81400417 	ldw	r5,16(r16)
    8c1c:	8809883a 	mov	r4,r17
    8c20:	00062a00 	call	62a0 <_free_r>
    8c24:	003fd906 	br	8b8c <_fclose_r+0x6c>
    8c28:	04bfffc4 	movi	r18,-1
    8c2c:	003fd406 	br	8b80 <_fclose_r+0x60>

00008c30 <fclose>:
    8c30:	00800074 	movhi	r2,1
    8c34:	10853a04 	addi	r2,r2,5352
    8c38:	200b883a 	mov	r5,r4
    8c3c:	11000017 	ldw	r4,0(r2)
    8c40:	0008b201 	jmpi	8b20 <_fclose_r>

00008c44 <_fstat_r>:
    8c44:	defffd04 	addi	sp,sp,-12
    8c48:	dc000015 	stw	r16,0(sp)
    8c4c:	04000074 	movhi	r16,1
    8c50:	840c9904 	addi	r16,r16,12900
    8c54:	dc400115 	stw	r17,4(sp)
    8c58:	80000015 	stw	zero,0(r16)
    8c5c:	2023883a 	mov	r17,r4
    8c60:	2809883a 	mov	r4,r5
    8c64:	300b883a 	mov	r5,r6
    8c68:	dfc00215 	stw	ra,8(sp)
    8c6c:	000b2840 	call	b284 <fstat>
    8c70:	1007883a 	mov	r3,r2
    8c74:	00bfffc4 	movi	r2,-1
    8c78:	18800626 	beq	r3,r2,8c94 <_fstat_r+0x50>
    8c7c:	1805883a 	mov	r2,r3
    8c80:	dfc00217 	ldw	ra,8(sp)
    8c84:	dc400117 	ldw	r17,4(sp)
    8c88:	dc000017 	ldw	r16,0(sp)
    8c8c:	dec00304 	addi	sp,sp,12
    8c90:	f800283a 	ret
    8c94:	80800017 	ldw	r2,0(r16)
    8c98:	103ff826 	beq	r2,zero,8c7c <_fstat_r+0x38>
    8c9c:	88800015 	stw	r2,0(r17)
    8ca0:	1805883a 	mov	r2,r3
    8ca4:	dfc00217 	ldw	ra,8(sp)
    8ca8:	dc400117 	ldw	r17,4(sp)
    8cac:	dc000017 	ldw	r16,0(sp)
    8cb0:	dec00304 	addi	sp,sp,12
    8cb4:	f800283a 	ret

00008cb8 <_isatty_r>:
    8cb8:	defffd04 	addi	sp,sp,-12
    8cbc:	dc000015 	stw	r16,0(sp)
    8cc0:	04000074 	movhi	r16,1
    8cc4:	840c9904 	addi	r16,r16,12900
    8cc8:	dc400115 	stw	r17,4(sp)
    8ccc:	80000015 	stw	zero,0(r16)
    8cd0:	2023883a 	mov	r17,r4
    8cd4:	2809883a 	mov	r4,r5
    8cd8:	dfc00215 	stw	ra,8(sp)
    8cdc:	000b3b80 	call	b3b8 <isatty>
    8ce0:	1007883a 	mov	r3,r2
    8ce4:	00bfffc4 	movi	r2,-1
    8ce8:	18800626 	beq	r3,r2,8d04 <_isatty_r+0x4c>
    8cec:	1805883a 	mov	r2,r3
    8cf0:	dfc00217 	ldw	ra,8(sp)
    8cf4:	dc400117 	ldw	r17,4(sp)
    8cf8:	dc000017 	ldw	r16,0(sp)
    8cfc:	dec00304 	addi	sp,sp,12
    8d00:	f800283a 	ret
    8d04:	80800017 	ldw	r2,0(r16)
    8d08:	103ff826 	beq	r2,zero,8cec <_isatty_r+0x34>
    8d0c:	88800015 	stw	r2,0(r17)
    8d10:	1805883a 	mov	r2,r3
    8d14:	dfc00217 	ldw	ra,8(sp)
    8d18:	dc400117 	ldw	r17,4(sp)
    8d1c:	dc000017 	ldw	r16,0(sp)
    8d20:	dec00304 	addi	sp,sp,12
    8d24:	f800283a 	ret

00008d28 <_lseek_r>:
    8d28:	defffd04 	addi	sp,sp,-12
    8d2c:	dc000015 	stw	r16,0(sp)
    8d30:	04000074 	movhi	r16,1
    8d34:	840c9904 	addi	r16,r16,12900
    8d38:	dc400115 	stw	r17,4(sp)
    8d3c:	80000015 	stw	zero,0(r16)
    8d40:	2023883a 	mov	r17,r4
    8d44:	2809883a 	mov	r4,r5
    8d48:	300b883a 	mov	r5,r6
    8d4c:	380d883a 	mov	r6,r7
    8d50:	dfc00215 	stw	ra,8(sp)
    8d54:	000b5c40 	call	b5c4 <lseek>
    8d58:	1007883a 	mov	r3,r2
    8d5c:	00bfffc4 	movi	r2,-1
    8d60:	18800626 	beq	r3,r2,8d7c <_lseek_r+0x54>
    8d64:	1805883a 	mov	r2,r3
    8d68:	dfc00217 	ldw	ra,8(sp)
    8d6c:	dc400117 	ldw	r17,4(sp)
    8d70:	dc000017 	ldw	r16,0(sp)
    8d74:	dec00304 	addi	sp,sp,12
    8d78:	f800283a 	ret
    8d7c:	80800017 	ldw	r2,0(r16)
    8d80:	103ff826 	beq	r2,zero,8d64 <_lseek_r+0x3c>
    8d84:	88800015 	stw	r2,0(r17)
    8d88:	1805883a 	mov	r2,r3
    8d8c:	dfc00217 	ldw	ra,8(sp)
    8d90:	dc400117 	ldw	r17,4(sp)
    8d94:	dc000017 	ldw	r16,0(sp)
    8d98:	dec00304 	addi	sp,sp,12
    8d9c:	f800283a 	ret

00008da0 <_read_r>:
    8da0:	defffd04 	addi	sp,sp,-12
    8da4:	dc000015 	stw	r16,0(sp)
    8da8:	04000074 	movhi	r16,1
    8dac:	840c9904 	addi	r16,r16,12900
    8db0:	dc400115 	stw	r17,4(sp)
    8db4:	80000015 	stw	zero,0(r16)
    8db8:	2023883a 	mov	r17,r4
    8dbc:	2809883a 	mov	r4,r5
    8dc0:	300b883a 	mov	r5,r6
    8dc4:	380d883a 	mov	r6,r7
    8dc8:	dfc00215 	stw	ra,8(sp)
    8dcc:	000b7c00 	call	b7c0 <read>
    8dd0:	1007883a 	mov	r3,r2
    8dd4:	00bfffc4 	movi	r2,-1
    8dd8:	18800626 	beq	r3,r2,8df4 <_read_r+0x54>
    8ddc:	1805883a 	mov	r2,r3
    8de0:	dfc00217 	ldw	ra,8(sp)
    8de4:	dc400117 	ldw	r17,4(sp)
    8de8:	dc000017 	ldw	r16,0(sp)
    8dec:	dec00304 	addi	sp,sp,12
    8df0:	f800283a 	ret
    8df4:	80800017 	ldw	r2,0(r16)
    8df8:	103ff826 	beq	r2,zero,8ddc <_read_r+0x3c>
    8dfc:	88800015 	stw	r2,0(r17)
    8e00:	1805883a 	mov	r2,r3
    8e04:	dfc00217 	ldw	ra,8(sp)
    8e08:	dc400117 	ldw	r17,4(sp)
    8e0c:	dc000017 	ldw	r16,0(sp)
    8e10:	dec00304 	addi	sp,sp,12
    8e14:	f800283a 	ret

00008e18 <__udivdi3>:
    8e18:	defff004 	addi	sp,sp,-64
    8e1c:	2005883a 	mov	r2,r4
    8e20:	3011883a 	mov	r8,r6
    8e24:	df000e15 	stw	fp,56(sp)
    8e28:	dd000a15 	stw	r20,40(sp)
    8e2c:	dc000615 	stw	r16,24(sp)
    8e30:	dfc00f15 	stw	ra,60(sp)
    8e34:	ddc00d15 	stw	r23,52(sp)
    8e38:	dd800c15 	stw	r22,48(sp)
    8e3c:	dd400b15 	stw	r21,44(sp)
    8e40:	dcc00915 	stw	r19,36(sp)
    8e44:	dc800815 	stw	r18,32(sp)
    8e48:	dc400715 	stw	r17,28(sp)
    8e4c:	4021883a 	mov	r16,r8
    8e50:	1039883a 	mov	fp,r2
    8e54:	2829883a 	mov	r20,r5
    8e58:	38003b1e 	bne	r7,zero,8f48 <__udivdi3+0x130>
    8e5c:	2a005c36 	bltu	r5,r8,8fd0 <__udivdi3+0x1b8>
    8e60:	4000a626 	beq	r8,zero,90fc <__udivdi3+0x2e4>
    8e64:	00bfffd4 	movui	r2,65535
    8e68:	14009e36 	bltu	r2,r16,90e4 <__udivdi3+0x2cc>
    8e6c:	00803fc4 	movi	r2,255
    8e70:	14013d36 	bltu	r2,r16,9368 <__udivdi3+0x550>
    8e74:	000b883a 	mov	r5,zero
    8e78:	0005883a 	mov	r2,zero
    8e7c:	8084d83a 	srl	r2,r16,r2
    8e80:	01000074 	movhi	r4,1
    8e84:	213d0d04 	addi	r4,r4,-3020
    8e88:	01800804 	movi	r6,32
    8e8c:	1105883a 	add	r2,r2,r4
    8e90:	10c00003 	ldbu	r3,0(r2)
    8e94:	28c7883a 	add	r3,r5,r3
    8e98:	30edc83a 	sub	r22,r6,r3
    8e9c:	b000ee1e 	bne	r22,zero,9258 <__udivdi3+0x440>
    8ea0:	802ad43a 	srli	r21,r16,16
    8ea4:	00800044 	movi	r2,1
    8ea8:	a423c83a 	sub	r17,r20,r16
    8eac:	85ffffcc 	andi	r23,r16,65535
    8eb0:	d8800315 	stw	r2,12(sp)
    8eb4:	8809883a 	mov	r4,r17
    8eb8:	a80b883a 	mov	r5,r21
    8ebc:	0001acc0 	call	1acc <__udivsi3>
    8ec0:	8809883a 	mov	r4,r17
    8ec4:	a80b883a 	mov	r5,r21
    8ec8:	102d883a 	mov	r22,r2
    8ecc:	0001ad40 	call	1ad4 <__umodsi3>
    8ed0:	1004943a 	slli	r2,r2,16
    8ed4:	e006d43a 	srli	r3,fp,16
    8ed8:	bda3383a 	mul	r17,r23,r22
    8edc:	10c4b03a 	or	r2,r2,r3
    8ee0:	1440042e 	bgeu	r2,r17,8ef4 <__udivdi3+0xdc>
    8ee4:	1405883a 	add	r2,r2,r16
    8ee8:	b5bfffc4 	addi	r22,r22,-1
    8eec:	14000136 	bltu	r2,r16,8ef4 <__udivdi3+0xdc>
    8ef0:	14413d36 	bltu	r2,r17,93e8 <__udivdi3+0x5d0>
    8ef4:	1463c83a 	sub	r17,r2,r17
    8ef8:	8809883a 	mov	r4,r17
    8efc:	a80b883a 	mov	r5,r21
    8f00:	0001acc0 	call	1acc <__udivsi3>
    8f04:	8809883a 	mov	r4,r17
    8f08:	a80b883a 	mov	r5,r21
    8f0c:	1029883a 	mov	r20,r2
    8f10:	0001ad40 	call	1ad4 <__umodsi3>
    8f14:	1004943a 	slli	r2,r2,16
    8f18:	bd09383a 	mul	r4,r23,r20
    8f1c:	e0ffffcc 	andi	r3,fp,65535
    8f20:	10c4b03a 	or	r2,r2,r3
    8f24:	1100042e 	bgeu	r2,r4,8f38 <__udivdi3+0x120>
    8f28:	8085883a 	add	r2,r16,r2
    8f2c:	a53fffc4 	addi	r20,r20,-1
    8f30:	14000136 	bltu	r2,r16,8f38 <__udivdi3+0x120>
    8f34:	11012036 	bltu	r2,r4,93b8 <__udivdi3+0x5a0>
    8f38:	b004943a 	slli	r2,r22,16
    8f3c:	d9000317 	ldw	r4,12(sp)
    8f40:	a084b03a 	or	r2,r20,r2
    8f44:	00001506 	br	8f9c <__udivdi3+0x184>
    8f48:	380d883a 	mov	r6,r7
    8f4c:	29c06236 	bltu	r5,r7,90d8 <__udivdi3+0x2c0>
    8f50:	00bfffd4 	movui	r2,65535
    8f54:	11c05a36 	bltu	r2,r7,90c0 <__udivdi3+0x2a8>
    8f58:	00803fc4 	movi	r2,255
    8f5c:	11c0fc36 	bltu	r2,r7,9350 <__udivdi3+0x538>
    8f60:	000b883a 	mov	r5,zero
    8f64:	0005883a 	mov	r2,zero
    8f68:	3084d83a 	srl	r2,r6,r2
    8f6c:	01000074 	movhi	r4,1
    8f70:	213d0d04 	addi	r4,r4,-3020
    8f74:	01c00804 	movi	r7,32
    8f78:	1105883a 	add	r2,r2,r4
    8f7c:	10c00003 	ldbu	r3,0(r2)
    8f80:	28c7883a 	add	r3,r5,r3
    8f84:	38efc83a 	sub	r23,r7,r3
    8f88:	b800691e 	bne	r23,zero,9130 <__udivdi3+0x318>
    8f8c:	35000136 	bltu	r6,r20,8f94 <__udivdi3+0x17c>
    8f90:	e4005136 	bltu	fp,r16,90d8 <__udivdi3+0x2c0>
    8f94:	00800044 	movi	r2,1
    8f98:	0009883a 	mov	r4,zero
    8f9c:	2007883a 	mov	r3,r4
    8fa0:	dfc00f17 	ldw	ra,60(sp)
    8fa4:	df000e17 	ldw	fp,56(sp)
    8fa8:	ddc00d17 	ldw	r23,52(sp)
    8fac:	dd800c17 	ldw	r22,48(sp)
    8fb0:	dd400b17 	ldw	r21,44(sp)
    8fb4:	dd000a17 	ldw	r20,40(sp)
    8fb8:	dcc00917 	ldw	r19,36(sp)
    8fbc:	dc800817 	ldw	r18,32(sp)
    8fc0:	dc400717 	ldw	r17,28(sp)
    8fc4:	dc000617 	ldw	r16,24(sp)
    8fc8:	dec01004 	addi	sp,sp,64
    8fcc:	f800283a 	ret
    8fd0:	00bfffd4 	movui	r2,65535
    8fd4:	12005036 	bltu	r2,r8,9118 <__udivdi3+0x300>
    8fd8:	00803fc4 	movi	r2,255
    8fdc:	1200e836 	bltu	r2,r8,9380 <__udivdi3+0x568>
    8fe0:	000b883a 	mov	r5,zero
    8fe4:	0005883a 	mov	r2,zero
    8fe8:	8084d83a 	srl	r2,r16,r2
    8fec:	01000074 	movhi	r4,1
    8ff0:	213d0d04 	addi	r4,r4,-3020
    8ff4:	01800804 	movi	r6,32
    8ff8:	1105883a 	add	r2,r2,r4
    8ffc:	10c00003 	ldbu	r3,0(r2)
    9000:	28c7883a 	add	r3,r5,r3
    9004:	30cbc83a 	sub	r5,r6,r3
    9008:	28000626 	beq	r5,zero,9024 <__udivdi3+0x20c>
    900c:	3145c83a 	sub	r2,r6,r5
    9010:	e084d83a 	srl	r2,fp,r2
    9014:	a146983a 	sll	r3,r20,r5
    9018:	e178983a 	sll	fp,fp,r5
    901c:	8160983a 	sll	r16,r16,r5
    9020:	18a8b03a 	or	r20,r3,r2
    9024:	802ad43a 	srli	r21,r16,16
    9028:	a009883a 	mov	r4,r20
    902c:	85ffffcc 	andi	r23,r16,65535
    9030:	a80b883a 	mov	r5,r21
    9034:	0001acc0 	call	1acc <__udivsi3>
    9038:	a009883a 	mov	r4,r20
    903c:	a80b883a 	mov	r5,r21
    9040:	102d883a 	mov	r22,r2
    9044:	0001ad40 	call	1ad4 <__umodsi3>
    9048:	1004943a 	slli	r2,r2,16
    904c:	e006d43a 	srli	r3,fp,16
    9050:	bda3383a 	mul	r17,r23,r22
    9054:	10c4b03a 	or	r2,r2,r3
    9058:	1440042e 	bgeu	r2,r17,906c <__udivdi3+0x254>
    905c:	1405883a 	add	r2,r2,r16
    9060:	b5bfffc4 	addi	r22,r22,-1
    9064:	14000136 	bltu	r2,r16,906c <__udivdi3+0x254>
    9068:	1440d536 	bltu	r2,r17,93c0 <__udivdi3+0x5a8>
    906c:	1463c83a 	sub	r17,r2,r17
    9070:	8809883a 	mov	r4,r17
    9074:	a80b883a 	mov	r5,r21
    9078:	0001acc0 	call	1acc <__udivsi3>
    907c:	8809883a 	mov	r4,r17
    9080:	a80b883a 	mov	r5,r21
    9084:	1029883a 	mov	r20,r2
    9088:	0001ad40 	call	1ad4 <__umodsi3>
    908c:	1004943a 	slli	r2,r2,16
    9090:	bd09383a 	mul	r4,r23,r20
    9094:	e0ffffcc 	andi	r3,fp,65535
    9098:	10c4b03a 	or	r2,r2,r3
    909c:	1100042e 	bgeu	r2,r4,90b0 <__udivdi3+0x298>
    90a0:	8085883a 	add	r2,r16,r2
    90a4:	a53fffc4 	addi	r20,r20,-1
    90a8:	14000136 	bltu	r2,r16,90b0 <__udivdi3+0x298>
    90ac:	1100c736 	bltu	r2,r4,93cc <__udivdi3+0x5b4>
    90b0:	b004943a 	slli	r2,r22,16
    90b4:	0009883a 	mov	r4,zero
    90b8:	a084b03a 	or	r2,r20,r2
    90bc:	003fb706 	br	8f9c <__udivdi3+0x184>
    90c0:	00804034 	movhi	r2,256
    90c4:	10bfffc4 	addi	r2,r2,-1
    90c8:	11c0a436 	bltu	r2,r7,935c <__udivdi3+0x544>
    90cc:	01400404 	movi	r5,16
    90d0:	2805883a 	mov	r2,r5
    90d4:	003fa406 	br	8f68 <__udivdi3+0x150>
    90d8:	0005883a 	mov	r2,zero
    90dc:	0009883a 	mov	r4,zero
    90e0:	003fae06 	br	8f9c <__udivdi3+0x184>
    90e4:	00804034 	movhi	r2,256
    90e8:	10bfffc4 	addi	r2,r2,-1
    90ec:	1400a136 	bltu	r2,r16,9374 <__udivdi3+0x55c>
    90f0:	01400404 	movi	r5,16
    90f4:	2805883a 	mov	r2,r5
    90f8:	003f6006 	br	8e7c <__udivdi3+0x64>
    90fc:	01000044 	movi	r4,1
    9100:	000b883a 	mov	r5,zero
    9104:	0001acc0 	call	1acc <__udivsi3>
    9108:	1021883a 	mov	r16,r2
    910c:	00bfffd4 	movui	r2,65535
    9110:	143ff436 	bltu	r2,r16,90e4 <__udivdi3+0x2cc>
    9114:	003f5506 	br	8e6c <__udivdi3+0x54>
    9118:	00804034 	movhi	r2,256
    911c:	10bfffc4 	addi	r2,r2,-1
    9120:	12009a36 	bltu	r2,r8,938c <__udivdi3+0x574>
    9124:	01400404 	movi	r5,16
    9128:	2805883a 	mov	r2,r5
    912c:	003fae06 	br	8fe8 <__udivdi3+0x1d0>
    9130:	3dc5c83a 	sub	r2,r7,r23
    9134:	35c8983a 	sll	r4,r6,r23
    9138:	8086d83a 	srl	r3,r16,r2
    913c:	a0a2d83a 	srl	r17,r20,r2
    9140:	e084d83a 	srl	r2,fp,r2
    9144:	20eab03a 	or	r21,r4,r3
    9148:	a82cd43a 	srli	r22,r21,16
    914c:	a5c6983a 	sll	r3,r20,r23
    9150:	8809883a 	mov	r4,r17
    9154:	b00b883a 	mov	r5,r22
    9158:	1886b03a 	or	r3,r3,r2
    915c:	d8c00215 	stw	r3,8(sp)
    9160:	0001acc0 	call	1acc <__udivsi3>
    9164:	8809883a 	mov	r4,r17
    9168:	b00b883a 	mov	r5,r22
    916c:	1029883a 	mov	r20,r2
    9170:	0001ad40 	call	1ad4 <__umodsi3>
    9174:	a8ffffcc 	andi	r3,r21,65535
    9178:	d8c00515 	stw	r3,20(sp)
    917c:	d9000217 	ldw	r4,8(sp)
    9180:	d9400517 	ldw	r5,20(sp)
    9184:	1004943a 	slli	r2,r2,16
    9188:	2006d43a 	srli	r3,r4,16
    918c:	85e0983a 	sll	r16,r16,r23
    9190:	2d23383a 	mul	r17,r5,r20
    9194:	10c4b03a 	or	r2,r2,r3
    9198:	dc000015 	stw	r16,0(sp)
    919c:	1440032e 	bgeu	r2,r17,91ac <__udivdi3+0x394>
    91a0:	1545883a 	add	r2,r2,r21
    91a4:	a53fffc4 	addi	r20,r20,-1
    91a8:	15407f2e 	bgeu	r2,r21,93a8 <__udivdi3+0x590>
    91ac:	1463c83a 	sub	r17,r2,r17
    91b0:	8809883a 	mov	r4,r17
    91b4:	b00b883a 	mov	r5,r22
    91b8:	0001acc0 	call	1acc <__udivsi3>
    91bc:	8809883a 	mov	r4,r17
    91c0:	b00b883a 	mov	r5,r22
    91c4:	1021883a 	mov	r16,r2
    91c8:	0001ad40 	call	1ad4 <__umodsi3>
    91cc:	d8c00517 	ldw	r3,20(sp)
    91d0:	d9000217 	ldw	r4,8(sp)
    91d4:	1004943a 	slli	r2,r2,16
    91d8:	1c0f383a 	mul	r7,r3,r16
    91dc:	20ffffcc 	andi	r3,r4,65535
    91e0:	10e2b03a 	or	r17,r2,r3
    91e4:	89c0032e 	bgeu	r17,r7,91f4 <__udivdi3+0x3dc>
    91e8:	8d63883a 	add	r17,r17,r21
    91ec:	843fffc4 	addi	r16,r16,-1
    91f0:	8d40692e 	bgeu	r17,r21,9398 <__udivdi3+0x580>
    91f4:	a008943a 	slli	r4,r20,16
    91f8:	d9400017 	ldw	r5,0(sp)
    91fc:	89e3c83a 	sub	r17,r17,r7
    9200:	8110b03a 	or	r8,r16,r4
    9204:	280cd43a 	srli	r6,r5,16
    9208:	28ffffcc 	andi	r3,r5,65535
    920c:	40bfffcc 	andi	r2,r8,65535
    9210:	400ad43a 	srli	r5,r8,16
    9214:	10d3383a 	mul	r9,r2,r3
    9218:	1185383a 	mul	r2,r2,r6
    921c:	28c7383a 	mul	r3,r5,r3
    9220:	4808d43a 	srli	r4,r9,16
    9224:	298b383a 	mul	r5,r5,r6
    9228:	10c5883a 	add	r2,r2,r3
    922c:	2089883a 	add	r4,r4,r2
    9230:	20c0022e 	bgeu	r4,r3,923c <__udivdi3+0x424>
    9234:	00800074 	movhi	r2,1
    9238:	288b883a 	add	r5,r5,r2
    923c:	2004d43a 	srli	r2,r4,16
    9240:	288b883a 	add	r5,r5,r2
    9244:	89403f36 	bltu	r17,r5,9344 <__udivdi3+0x52c>
    9248:	89403926 	beq	r17,r5,9330 <__udivdi3+0x518>
    924c:	4005883a 	mov	r2,r8
    9250:	0009883a 	mov	r4,zero
    9254:	003f5106 	br	8f9c <__udivdi3+0x184>
    9258:	85a0983a 	sll	r16,r16,r22
    925c:	3585c83a 	sub	r2,r6,r22
    9260:	a0a2d83a 	srl	r17,r20,r2
    9264:	802ad43a 	srli	r21,r16,16
    9268:	e084d83a 	srl	r2,fp,r2
    926c:	a586983a 	sll	r3,r20,r22
    9270:	8809883a 	mov	r4,r17
    9274:	a80b883a 	mov	r5,r21
    9278:	1886b03a 	or	r3,r3,r2
    927c:	d8c00115 	stw	r3,4(sp)
    9280:	0001acc0 	call	1acc <__udivsi3>
    9284:	8809883a 	mov	r4,r17
    9288:	a80b883a 	mov	r5,r21
    928c:	d8800415 	stw	r2,16(sp)
    9290:	0001ad40 	call	1ad4 <__umodsi3>
    9294:	d9000117 	ldw	r4,4(sp)
    9298:	d9400417 	ldw	r5,16(sp)
    929c:	1004943a 	slli	r2,r2,16
    92a0:	85ffffcc 	andi	r23,r16,65535
    92a4:	2006d43a 	srli	r3,r4,16
    92a8:	b963383a 	mul	r17,r23,r5
    92ac:	10c4b03a 	or	r2,r2,r3
    92b0:	1440042e 	bgeu	r2,r17,92c4 <__udivdi3+0x4ac>
    92b4:	297fffc4 	addi	r5,r5,-1
    92b8:	1405883a 	add	r2,r2,r16
    92bc:	d9400415 	stw	r5,16(sp)
    92c0:	1400442e 	bgeu	r2,r16,93d4 <__udivdi3+0x5bc>
    92c4:	1463c83a 	sub	r17,r2,r17
    92c8:	8809883a 	mov	r4,r17
    92cc:	a80b883a 	mov	r5,r21
    92d0:	0001acc0 	call	1acc <__udivsi3>
    92d4:	8809883a 	mov	r4,r17
    92d8:	a80b883a 	mov	r5,r21
    92dc:	1029883a 	mov	r20,r2
    92e0:	0001ad40 	call	1ad4 <__umodsi3>
    92e4:	d9400117 	ldw	r5,4(sp)
    92e8:	1004943a 	slli	r2,r2,16
    92ec:	bd09383a 	mul	r4,r23,r20
    92f0:	28ffffcc 	andi	r3,r5,65535
    92f4:	10c6b03a 	or	r3,r2,r3
    92f8:	1900062e 	bgeu	r3,r4,9314 <__udivdi3+0x4fc>
    92fc:	1c07883a 	add	r3,r3,r16
    9300:	a53fffc4 	addi	r20,r20,-1
    9304:	1c000336 	bltu	r3,r16,9314 <__udivdi3+0x4fc>
    9308:	1900022e 	bgeu	r3,r4,9314 <__udivdi3+0x4fc>
    930c:	a53fffc4 	addi	r20,r20,-1
    9310:	1c07883a 	add	r3,r3,r16
    9314:	d9400417 	ldw	r5,16(sp)
    9318:	e5b8983a 	sll	fp,fp,r22
    931c:	1923c83a 	sub	r17,r3,r4
    9320:	2804943a 	slli	r2,r5,16
    9324:	a0a8b03a 	or	r20,r20,r2
    9328:	dd000315 	stw	r20,12(sp)
    932c:	003ee106 	br	8eb4 <__udivdi3+0x9c>
    9330:	2004943a 	slli	r2,r4,16
    9334:	e5c8983a 	sll	r4,fp,r23
    9338:	48ffffcc 	andi	r3,r9,65535
    933c:	10c5883a 	add	r2,r2,r3
    9340:	20bfc22e 	bgeu	r4,r2,924c <__udivdi3+0x434>
    9344:	40bfffc4 	addi	r2,r8,-1
    9348:	0009883a 	mov	r4,zero
    934c:	003f1306 	br	8f9c <__udivdi3+0x184>
    9350:	01400204 	movi	r5,8
    9354:	2805883a 	mov	r2,r5
    9358:	003f0306 	br	8f68 <__udivdi3+0x150>
    935c:	01400604 	movi	r5,24
    9360:	2805883a 	mov	r2,r5
    9364:	003f0006 	br	8f68 <__udivdi3+0x150>
    9368:	01400204 	movi	r5,8
    936c:	2805883a 	mov	r2,r5
    9370:	003ec206 	br	8e7c <__udivdi3+0x64>
    9374:	01400604 	movi	r5,24
    9378:	2805883a 	mov	r2,r5
    937c:	003ebf06 	br	8e7c <__udivdi3+0x64>
    9380:	01400204 	movi	r5,8
    9384:	2805883a 	mov	r2,r5
    9388:	003f1706 	br	8fe8 <__udivdi3+0x1d0>
    938c:	01400604 	movi	r5,24
    9390:	2805883a 	mov	r2,r5
    9394:	003f1406 	br	8fe8 <__udivdi3+0x1d0>
    9398:	89ff962e 	bgeu	r17,r7,91f4 <__udivdi3+0x3dc>
    939c:	8d63883a 	add	r17,r17,r21
    93a0:	843fffc4 	addi	r16,r16,-1
    93a4:	003f9306 	br	91f4 <__udivdi3+0x3dc>
    93a8:	147f802e 	bgeu	r2,r17,91ac <__udivdi3+0x394>
    93ac:	a53fffc4 	addi	r20,r20,-1
    93b0:	1545883a 	add	r2,r2,r21
    93b4:	003f7d06 	br	91ac <__udivdi3+0x394>
    93b8:	a53fffc4 	addi	r20,r20,-1
    93bc:	003ede06 	br	8f38 <__udivdi3+0x120>
    93c0:	b5bfffc4 	addi	r22,r22,-1
    93c4:	1405883a 	add	r2,r2,r16
    93c8:	003f2806 	br	906c <__udivdi3+0x254>
    93cc:	a53fffc4 	addi	r20,r20,-1
    93d0:	003f3706 	br	90b0 <__udivdi3+0x298>
    93d4:	147fbb2e 	bgeu	r2,r17,92c4 <__udivdi3+0x4ac>
    93d8:	297fffc4 	addi	r5,r5,-1
    93dc:	1405883a 	add	r2,r2,r16
    93e0:	d9400415 	stw	r5,16(sp)
    93e4:	003fb706 	br	92c4 <__udivdi3+0x4ac>
    93e8:	b5bfffc4 	addi	r22,r22,-1
    93ec:	1405883a 	add	r2,r2,r16
    93f0:	003ec006 	br	8ef4 <__udivdi3+0xdc>

000093f4 <__umoddi3>:
    93f4:	defff104 	addi	sp,sp,-60
    93f8:	dd800b15 	stw	r22,44(sp)
    93fc:	dd000915 	stw	r20,36(sp)
    9400:	dc000515 	stw	r16,20(sp)
    9404:	dfc00e15 	stw	ra,56(sp)
    9408:	df000d15 	stw	fp,52(sp)
    940c:	ddc00c15 	stw	r23,48(sp)
    9410:	dd400a15 	stw	r21,40(sp)
    9414:	dcc00815 	stw	r19,32(sp)
    9418:	dc800715 	stw	r18,28(sp)
    941c:	dc400615 	stw	r17,24(sp)
    9420:	3021883a 	mov	r16,r6
    9424:	202d883a 	mov	r22,r4
    9428:	2829883a 	mov	r20,r5
    942c:	38002b1e 	bne	r7,zero,94dc <__umoddi3+0xe8>
    9430:	29805036 	bltu	r5,r6,9574 <__umoddi3+0x180>
    9434:	30008a26 	beq	r6,zero,9660 <__umoddi3+0x26c>
    9438:	00bfffd4 	movui	r2,65535
    943c:	14008236 	bltu	r2,r16,9648 <__umoddi3+0x254>
    9440:	00803fc4 	movi	r2,255
    9444:	14013636 	bltu	r2,r16,9920 <__umoddi3+0x52c>
    9448:	000b883a 	mov	r5,zero
    944c:	0005883a 	mov	r2,zero
    9450:	8084d83a 	srl	r2,r16,r2
    9454:	01000074 	movhi	r4,1
    9458:	213d0d04 	addi	r4,r4,-3020
    945c:	01800804 	movi	r6,32
    9460:	1105883a 	add	r2,r2,r4
    9464:	10c00003 	ldbu	r3,0(r2)
    9468:	28c7883a 	add	r3,r5,r3
    946c:	30efc83a 	sub	r23,r6,r3
    9470:	b800941e 	bne	r23,zero,96c4 <__umoddi3+0x2d0>
    9474:	802ad43a 	srli	r21,r16,16
    9478:	a423c83a 	sub	r17,r20,r16
    947c:	0039883a 	mov	fp,zero
    9480:	853fffcc 	andi	r20,r16,65535
    9484:	8809883a 	mov	r4,r17
    9488:	a80b883a 	mov	r5,r21
    948c:	0001acc0 	call	1acc <__udivsi3>
    9490:	8809883a 	mov	r4,r17
    9494:	a80b883a 	mov	r5,r21
    9498:	a0a3383a 	mul	r17,r20,r2
    949c:	0001ad40 	call	1ad4 <__umodsi3>
    94a0:	1004943a 	slli	r2,r2,16
    94a4:	b006d43a 	srli	r3,r22,16
    94a8:	10c4b03a 	or	r2,r2,r3
    94ac:	1440032e 	bgeu	r2,r17,94bc <__umoddi3+0xc8>
    94b0:	1405883a 	add	r2,r2,r16
    94b4:	14000136 	bltu	r2,r16,94bc <__umoddi3+0xc8>
    94b8:	14413536 	bltu	r2,r17,9990 <__umoddi3+0x59c>
    94bc:	1463c83a 	sub	r17,r2,r17
    94c0:	8809883a 	mov	r4,r17
    94c4:	a80b883a 	mov	r5,r21
    94c8:	0001acc0 	call	1acc <__udivsi3>
    94cc:	8809883a 	mov	r4,r17
    94d0:	a0a3383a 	mul	r17,r20,r2
    94d4:	a80b883a 	mov	r5,r21
    94d8:	00004d06 	br	9610 <__umoddi3+0x21c>
    94dc:	380d883a 	mov	r6,r7
    94e0:	29c0102e 	bgeu	r5,r7,9524 <__umoddi3+0x130>
    94e4:	2011883a 	mov	r8,r4
    94e8:	2813883a 	mov	r9,r5
    94ec:	4005883a 	mov	r2,r8
    94f0:	4807883a 	mov	r3,r9
    94f4:	dfc00e17 	ldw	ra,56(sp)
    94f8:	df000d17 	ldw	fp,52(sp)
    94fc:	ddc00c17 	ldw	r23,48(sp)
    9500:	dd800b17 	ldw	r22,44(sp)
    9504:	dd400a17 	ldw	r21,40(sp)
    9508:	dd000917 	ldw	r20,36(sp)
    950c:	dcc00817 	ldw	r19,32(sp)
    9510:	dc800717 	ldw	r18,28(sp)
    9514:	dc400617 	ldw	r17,24(sp)
    9518:	dc000517 	ldw	r16,20(sp)
    951c:	dec00f04 	addi	sp,sp,60
    9520:	f800283a 	ret
    9524:	00bfffd4 	movui	r2,65535
    9528:	11c05a36 	bltu	r2,r7,9694 <__umoddi3+0x2a0>
    952c:	00803fc4 	movi	r2,255
    9530:	11c0fe36 	bltu	r2,r7,992c <__umoddi3+0x538>
    9534:	000b883a 	mov	r5,zero
    9538:	0005883a 	mov	r2,zero
    953c:	3084d83a 	srl	r2,r6,r2
    9540:	01000074 	movhi	r4,1
    9544:	213d0d04 	addi	r4,r4,-3020
    9548:	01c00804 	movi	r7,32
    954c:	1105883a 	add	r2,r2,r4
    9550:	10c00003 	ldbu	r3,0(r2)
    9554:	28c7883a 	add	r3,r5,r3
    9558:	38ebc83a 	sub	r21,r7,r3
    955c:	a800851e 	bne	r21,zero,9774 <__umoddi3+0x380>
    9560:	35005236 	bltu	r6,r20,96ac <__umoddi3+0x2b8>
    9564:	b400512e 	bgeu	r22,r16,96ac <__umoddi3+0x2b8>
    9568:	b011883a 	mov	r8,r22
    956c:	a013883a 	mov	r9,r20
    9570:	003fde06 	br	94ec <__umoddi3+0xf8>
    9574:	00bfffd4 	movui	r2,65535
    9578:	11804036 	bltu	r2,r6,967c <__umoddi3+0x288>
    957c:	00803fc4 	movi	r2,255
    9580:	1180ed36 	bltu	r2,r6,9938 <__umoddi3+0x544>
    9584:	000b883a 	mov	r5,zero
    9588:	0005883a 	mov	r2,zero
    958c:	8084d83a 	srl	r2,r16,r2
    9590:	01000074 	movhi	r4,1
    9594:	213d0d04 	addi	r4,r4,-3020
    9598:	01800804 	movi	r6,32
    959c:	1105883a 	add	r2,r2,r4
    95a0:	10c00003 	ldbu	r3,0(r2)
    95a4:	28c7883a 	add	r3,r5,r3
    95a8:	30c7c83a 	sub	r3,r6,r3
    95ac:	1800bf1e 	bne	r3,zero,98ac <__umoddi3+0x4b8>
    95b0:	0039883a 	mov	fp,zero
    95b4:	802ad43a 	srli	r21,r16,16
    95b8:	a009883a 	mov	r4,r20
    95bc:	85ffffcc 	andi	r23,r16,65535
    95c0:	a80b883a 	mov	r5,r21
    95c4:	0001acc0 	call	1acc <__udivsi3>
    95c8:	a009883a 	mov	r4,r20
    95cc:	a80b883a 	mov	r5,r21
    95d0:	b8a3383a 	mul	r17,r23,r2
    95d4:	0001ad40 	call	1ad4 <__umodsi3>
    95d8:	1004943a 	slli	r2,r2,16
    95dc:	b006d43a 	srli	r3,r22,16
    95e0:	10c4b03a 	or	r2,r2,r3
    95e4:	1440032e 	bgeu	r2,r17,95f4 <__umoddi3+0x200>
    95e8:	1405883a 	add	r2,r2,r16
    95ec:	14000136 	bltu	r2,r16,95f4 <__umoddi3+0x200>
    95f0:	1440e536 	bltu	r2,r17,9988 <__umoddi3+0x594>
    95f4:	1463c83a 	sub	r17,r2,r17
    95f8:	8809883a 	mov	r4,r17
    95fc:	a80b883a 	mov	r5,r21
    9600:	0001acc0 	call	1acc <__udivsi3>
    9604:	8809883a 	mov	r4,r17
    9608:	b8a3383a 	mul	r17,r23,r2
    960c:	a80b883a 	mov	r5,r21
    9610:	0001ad40 	call	1ad4 <__umodsi3>
    9614:	1004943a 	slli	r2,r2,16
    9618:	b0ffffcc 	andi	r3,r22,65535
    961c:	10c4b03a 	or	r2,r2,r3
    9620:	1440042e 	bgeu	r2,r17,9634 <__umoddi3+0x240>
    9624:	1405883a 	add	r2,r2,r16
    9628:	14000236 	bltu	r2,r16,9634 <__umoddi3+0x240>
    962c:	1440012e 	bgeu	r2,r17,9634 <__umoddi3+0x240>
    9630:	1405883a 	add	r2,r2,r16
    9634:	1445c83a 	sub	r2,r2,r17
    9638:	1724d83a 	srl	r18,r2,fp
    963c:	0013883a 	mov	r9,zero
    9640:	9011883a 	mov	r8,r18
    9644:	003fa906 	br	94ec <__umoddi3+0xf8>
    9648:	00804034 	movhi	r2,256
    964c:	10bfffc4 	addi	r2,r2,-1
    9650:	1400b036 	bltu	r2,r16,9914 <__umoddi3+0x520>
    9654:	01400404 	movi	r5,16
    9658:	2805883a 	mov	r2,r5
    965c:	003f7c06 	br	9450 <__umoddi3+0x5c>
    9660:	01000044 	movi	r4,1
    9664:	000b883a 	mov	r5,zero
    9668:	0001acc0 	call	1acc <__udivsi3>
    966c:	1021883a 	mov	r16,r2
    9670:	00bfffd4 	movui	r2,65535
    9674:	143ff436 	bltu	r2,r16,9648 <__umoddi3+0x254>
    9678:	003f7106 	br	9440 <__umoddi3+0x4c>
    967c:	00804034 	movhi	r2,256
    9680:	10bfffc4 	addi	r2,r2,-1
    9684:	1180af36 	bltu	r2,r6,9944 <__umoddi3+0x550>
    9688:	01400404 	movi	r5,16
    968c:	2805883a 	mov	r2,r5
    9690:	003fbe06 	br	958c <__umoddi3+0x198>
    9694:	00804034 	movhi	r2,256
    9698:	10bfffc4 	addi	r2,r2,-1
    969c:	11c0ac36 	bltu	r2,r7,9950 <__umoddi3+0x55c>
    96a0:	01400404 	movi	r5,16
    96a4:	2805883a 	mov	r2,r5
    96a8:	003fa406 	br	953c <__umoddi3+0x148>
    96ac:	b409c83a 	sub	r4,r22,r16
    96b0:	b105803a 	cmpltu	r2,r22,r4
    96b4:	a187c83a 	sub	r3,r20,r6
    96b8:	18a9c83a 	sub	r20,r3,r2
    96bc:	202d883a 	mov	r22,r4
    96c0:	003fa906 	br	9568 <__umoddi3+0x174>
    96c4:	85e0983a 	sll	r16,r16,r23
    96c8:	35c5c83a 	sub	r2,r6,r23
    96cc:	a0a2d83a 	srl	r17,r20,r2
    96d0:	802ad43a 	srli	r21,r16,16
    96d4:	b084d83a 	srl	r2,r22,r2
    96d8:	a5c6983a 	sll	r3,r20,r23
    96dc:	8809883a 	mov	r4,r17
    96e0:	a80b883a 	mov	r5,r21
    96e4:	1886b03a 	or	r3,r3,r2
    96e8:	d8c00115 	stw	r3,4(sp)
    96ec:	853fffcc 	andi	r20,r16,65535
    96f0:	0001acc0 	call	1acc <__udivsi3>
    96f4:	8809883a 	mov	r4,r17
    96f8:	a80b883a 	mov	r5,r21
    96fc:	a0a3383a 	mul	r17,r20,r2
    9700:	0001ad40 	call	1ad4 <__umodsi3>
    9704:	d9000117 	ldw	r4,4(sp)
    9708:	1004943a 	slli	r2,r2,16
    970c:	b839883a 	mov	fp,r23
    9710:	2006d43a 	srli	r3,r4,16
    9714:	10c4b03a 	or	r2,r2,r3
    9718:	1440022e 	bgeu	r2,r17,9724 <__umoddi3+0x330>
    971c:	1405883a 	add	r2,r2,r16
    9720:	1400962e 	bgeu	r2,r16,997c <__umoddi3+0x588>
    9724:	1463c83a 	sub	r17,r2,r17
    9728:	8809883a 	mov	r4,r17
    972c:	a80b883a 	mov	r5,r21
    9730:	0001acc0 	call	1acc <__udivsi3>
    9734:	8809883a 	mov	r4,r17
    9738:	a80b883a 	mov	r5,r21
    973c:	a0a3383a 	mul	r17,r20,r2
    9740:	0001ad40 	call	1ad4 <__umodsi3>
    9744:	d9400117 	ldw	r5,4(sp)
    9748:	1004943a 	slli	r2,r2,16
    974c:	28ffffcc 	andi	r3,r5,65535
    9750:	10c4b03a 	or	r2,r2,r3
    9754:	1440042e 	bgeu	r2,r17,9768 <__umoddi3+0x374>
    9758:	1405883a 	add	r2,r2,r16
    975c:	14000236 	bltu	r2,r16,9768 <__umoddi3+0x374>
    9760:	1440012e 	bgeu	r2,r17,9768 <__umoddi3+0x374>
    9764:	1405883a 	add	r2,r2,r16
    9768:	b5ec983a 	sll	r22,r22,r23
    976c:	1463c83a 	sub	r17,r2,r17
    9770:	003f4406 	br	9484 <__umoddi3+0x90>
    9774:	3d4fc83a 	sub	r7,r7,r21
    9778:	3546983a 	sll	r3,r6,r21
    977c:	81c4d83a 	srl	r2,r16,r7
    9780:	a1e2d83a 	srl	r17,r20,r7
    9784:	a54c983a 	sll	r6,r20,r21
    9788:	18aeb03a 	or	r23,r3,r2
    978c:	b828d43a 	srli	r20,r23,16
    9790:	b1c4d83a 	srl	r2,r22,r7
    9794:	8809883a 	mov	r4,r17
    9798:	a00b883a 	mov	r5,r20
    979c:	308cb03a 	or	r6,r6,r2
    97a0:	d9c00315 	stw	r7,12(sp)
    97a4:	d9800215 	stw	r6,8(sp)
    97a8:	0001acc0 	call	1acc <__udivsi3>
    97ac:	8809883a 	mov	r4,r17
    97b0:	a00b883a 	mov	r5,r20
    97b4:	1039883a 	mov	fp,r2
    97b8:	0001ad40 	call	1ad4 <__umodsi3>
    97bc:	b8ffffcc 	andi	r3,r23,65535
    97c0:	d8c00415 	stw	r3,16(sp)
    97c4:	d9000217 	ldw	r4,8(sp)
    97c8:	d9400417 	ldw	r5,16(sp)
    97cc:	1004943a 	slli	r2,r2,16
    97d0:	2006d43a 	srli	r3,r4,16
    97d4:	8560983a 	sll	r16,r16,r21
    97d8:	2f23383a 	mul	r17,r5,fp
    97dc:	10c4b03a 	or	r2,r2,r3
    97e0:	dc000015 	stw	r16,0(sp)
    97e4:	b56c983a 	sll	r22,r22,r21
    97e8:	1440032e 	bgeu	r2,r17,97f8 <__umoddi3+0x404>
    97ec:	15c5883a 	add	r2,r2,r23
    97f0:	e73fffc4 	addi	fp,fp,-1
    97f4:	15c05d2e 	bgeu	r2,r23,996c <__umoddi3+0x578>
    97f8:	1463c83a 	sub	r17,r2,r17
    97fc:	8809883a 	mov	r4,r17
    9800:	a00b883a 	mov	r5,r20
    9804:	0001acc0 	call	1acc <__udivsi3>
    9808:	8809883a 	mov	r4,r17
    980c:	a00b883a 	mov	r5,r20
    9810:	1021883a 	mov	r16,r2
    9814:	0001ad40 	call	1ad4 <__umodsi3>
    9818:	d8c00417 	ldw	r3,16(sp)
    981c:	d9000217 	ldw	r4,8(sp)
    9820:	1004943a 	slli	r2,r2,16
    9824:	1c23383a 	mul	r17,r3,r16
    9828:	20ffffcc 	andi	r3,r4,65535
    982c:	10ceb03a 	or	r7,r2,r3
    9830:	3c40032e 	bgeu	r7,r17,9840 <__umoddi3+0x44c>
    9834:	3dcf883a 	add	r7,r7,r23
    9838:	843fffc4 	addi	r16,r16,-1
    983c:	3dc0472e 	bgeu	r7,r23,995c <__umoddi3+0x568>
    9840:	e004943a 	slli	r2,fp,16
    9844:	d9400017 	ldw	r5,0(sp)
    9848:	3c4fc83a 	sub	r7,r7,r17
    984c:	8084b03a 	or	r2,r16,r2
    9850:	28ffffcc 	andi	r3,r5,65535
    9854:	280cd43a 	srli	r6,r5,16
    9858:	100ad43a 	srli	r5,r2,16
    985c:	10bfffcc 	andi	r2,r2,65535
    9860:	10d1383a 	mul	r8,r2,r3
    9864:	28c7383a 	mul	r3,r5,r3
    9868:	1185383a 	mul	r2,r2,r6
    986c:	4008d43a 	srli	r4,r8,16
    9870:	298b383a 	mul	r5,r5,r6
    9874:	10c5883a 	add	r2,r2,r3
    9878:	2089883a 	add	r4,r4,r2
    987c:	20c0022e 	bgeu	r4,r3,9888 <__umoddi3+0x494>
    9880:	00800074 	movhi	r2,1
    9884:	288b883a 	add	r5,r5,r2
    9888:	2004d43a 	srli	r2,r4,16
    988c:	2008943a 	slli	r4,r4,16
    9890:	40ffffcc 	andi	r3,r8,65535
    9894:	288b883a 	add	r5,r5,r2
    9898:	20c9883a 	add	r4,r4,r3
    989c:	39400b36 	bltu	r7,r5,98cc <__umoddi3+0x4d8>
    98a0:	39403d26 	beq	r7,r5,9998 <__umoddi3+0x5a4>
    98a4:	394bc83a 	sub	r5,r7,r5
    98a8:	00000f06 	br	98e8 <__umoddi3+0x4f4>
    98ac:	30c5c83a 	sub	r2,r6,r3
    98b0:	1839883a 	mov	fp,r3
    98b4:	b084d83a 	srl	r2,r22,r2
    98b8:	a0c6983a 	sll	r3,r20,r3
    98bc:	8720983a 	sll	r16,r16,fp
    98c0:	b72c983a 	sll	r22,r22,fp
    98c4:	18a8b03a 	or	r20,r3,r2
    98c8:	003f3a06 	br	95b4 <__umoddi3+0x1c0>
    98cc:	d8c00017 	ldw	r3,0(sp)
    98d0:	20c5c83a 	sub	r2,r4,r3
    98d4:	2089803a 	cmpltu	r4,r4,r2
    98d8:	2dc7c83a 	sub	r3,r5,r23
    98dc:	1907c83a 	sub	r3,r3,r4
    98e0:	38cbc83a 	sub	r5,r7,r3
    98e4:	1009883a 	mov	r4,r2
    98e8:	b105c83a 	sub	r2,r22,r4
    98ec:	b087803a 	cmpltu	r3,r22,r2
    98f0:	28c7c83a 	sub	r3,r5,r3
    98f4:	d9400317 	ldw	r5,12(sp)
    98f8:	1544d83a 	srl	r2,r2,r21
    98fc:	1948983a 	sll	r4,r3,r5
    9900:	1d46d83a 	srl	r3,r3,r21
    9904:	20a4b03a 	or	r18,r4,r2
    9908:	9011883a 	mov	r8,r18
    990c:	1813883a 	mov	r9,r3
    9910:	003ef606 	br	94ec <__umoddi3+0xf8>
    9914:	01400604 	movi	r5,24
    9918:	2805883a 	mov	r2,r5
    991c:	003ecc06 	br	9450 <__umoddi3+0x5c>
    9920:	01400204 	movi	r5,8
    9924:	2805883a 	mov	r2,r5
    9928:	003ec906 	br	9450 <__umoddi3+0x5c>
    992c:	01400204 	movi	r5,8
    9930:	2805883a 	mov	r2,r5
    9934:	003f0106 	br	953c <__umoddi3+0x148>
    9938:	01400204 	movi	r5,8
    993c:	2805883a 	mov	r2,r5
    9940:	003f1206 	br	958c <__umoddi3+0x198>
    9944:	01400604 	movi	r5,24
    9948:	2805883a 	mov	r2,r5
    994c:	003f0f06 	br	958c <__umoddi3+0x198>
    9950:	01400604 	movi	r5,24
    9954:	2805883a 	mov	r2,r5
    9958:	003ef806 	br	953c <__umoddi3+0x148>
    995c:	3c7fb82e 	bgeu	r7,r17,9840 <__umoddi3+0x44c>
    9960:	843fffc4 	addi	r16,r16,-1
    9964:	3dcf883a 	add	r7,r7,r23
    9968:	003fb506 	br	9840 <__umoddi3+0x44c>
    996c:	147fa22e 	bgeu	r2,r17,97f8 <__umoddi3+0x404>
    9970:	e73fffc4 	addi	fp,fp,-1
    9974:	15c5883a 	add	r2,r2,r23
    9978:	003f9f06 	br	97f8 <__umoddi3+0x404>
    997c:	147f692e 	bgeu	r2,r17,9724 <__umoddi3+0x330>
    9980:	1405883a 	add	r2,r2,r16
    9984:	003f6706 	br	9724 <__umoddi3+0x330>
    9988:	1405883a 	add	r2,r2,r16
    998c:	003f1906 	br	95f4 <__umoddi3+0x200>
    9990:	1405883a 	add	r2,r2,r16
    9994:	003ec906 	br	94bc <__umoddi3+0xc8>
    9998:	b13fcc36 	bltu	r22,r4,98cc <__umoddi3+0x4d8>
    999c:	000b883a 	mov	r5,zero
    99a0:	003fd106 	br	98e8 <__umoddi3+0x4f4>

000099a4 <_fpadd_parts>:
    99a4:	defff804 	addi	sp,sp,-32
    99a8:	dcc00315 	stw	r19,12(sp)
    99ac:	2027883a 	mov	r19,r4
    99b0:	21000017 	ldw	r4,0(r4)
    99b4:	00c00044 	movi	r3,1
    99b8:	dd400515 	stw	r21,20(sp)
    99bc:	dd000415 	stw	r20,16(sp)
    99c0:	ddc00715 	stw	r23,28(sp)
    99c4:	dd800615 	stw	r22,24(sp)
    99c8:	dc800215 	stw	r18,8(sp)
    99cc:	dc400115 	stw	r17,4(sp)
    99d0:	dc000015 	stw	r16,0(sp)
    99d4:	282b883a 	mov	r21,r5
    99d8:	3029883a 	mov	r20,r6
    99dc:	1900632e 	bgeu	r3,r4,9b6c <_fpadd_parts+0x1c8>
    99e0:	28800017 	ldw	r2,0(r5)
    99e4:	1880812e 	bgeu	r3,r2,9bec <_fpadd_parts+0x248>
    99e8:	00c00104 	movi	r3,4
    99ec:	20c0dc26 	beq	r4,r3,9d60 <_fpadd_parts+0x3bc>
    99f0:	10c07e26 	beq	r2,r3,9bec <_fpadd_parts+0x248>
    99f4:	00c00084 	movi	r3,2
    99f8:	10c06726 	beq	r2,r3,9b98 <_fpadd_parts+0x1f4>
    99fc:	20c07b26 	beq	r4,r3,9bec <_fpadd_parts+0x248>
    9a00:	9dc00217 	ldw	r23,8(r19)
    9a04:	28c00217 	ldw	r3,8(r5)
    9a08:	9c400317 	ldw	r17,12(r19)
    9a0c:	2bc00317 	ldw	r15,12(r5)
    9a10:	b8cdc83a 	sub	r6,r23,r3
    9a14:	9c800417 	ldw	r18,16(r19)
    9a18:	2c000417 	ldw	r16,16(r5)
    9a1c:	3009883a 	mov	r4,r6
    9a20:	30009716 	blt	r6,zero,9c80 <_fpadd_parts+0x2dc>
    9a24:	00800fc4 	movi	r2,63
    9a28:	11806b16 	blt	r2,r6,9bd8 <_fpadd_parts+0x234>
    9a2c:	0100a40e 	bge	zero,r4,9cc0 <_fpadd_parts+0x31c>
    9a30:	35bff804 	addi	r22,r6,-32
    9a34:	b000bc16 	blt	r22,zero,9d28 <_fpadd_parts+0x384>
    9a38:	8596d83a 	srl	r11,r16,r22
    9a3c:	0019883a 	mov	r12,zero
    9a40:	0013883a 	mov	r9,zero
    9a44:	01000044 	movi	r4,1
    9a48:	0015883a 	mov	r10,zero
    9a4c:	b000be16 	blt	r22,zero,9d48 <_fpadd_parts+0x3a4>
    9a50:	2590983a 	sll	r8,r4,r22
    9a54:	000f883a 	mov	r7,zero
    9a58:	00bfffc4 	movi	r2,-1
    9a5c:	3889883a 	add	r4,r7,r2
    9a60:	408b883a 	add	r5,r8,r2
    9a64:	21cd803a 	cmpltu	r6,r4,r7
    9a68:	314b883a 	add	r5,r6,r5
    9a6c:	7904703a 	and	r2,r15,r4
    9a70:	8146703a 	and	r3,r16,r5
    9a74:	10c4b03a 	or	r2,r2,r3
    9a78:	10000226 	beq	r2,zero,9a84 <_fpadd_parts+0xe0>
    9a7c:	02400044 	movi	r9,1
    9a80:	0015883a 	mov	r10,zero
    9a84:	5a5eb03a 	or	r15,r11,r9
    9a88:	62a0b03a 	or	r16,r12,r10
    9a8c:	99400117 	ldw	r5,4(r19)
    9a90:	a8800117 	ldw	r2,4(r21)
    9a94:	28806e26 	beq	r5,r2,9c50 <_fpadd_parts+0x2ac>
    9a98:	28006626 	beq	r5,zero,9c34 <_fpadd_parts+0x290>
    9a9c:	7c45c83a 	sub	r2,r15,r17
    9aa0:	7889803a 	cmpltu	r4,r15,r2
    9aa4:	8487c83a 	sub	r3,r16,r18
    9aa8:	1909c83a 	sub	r4,r3,r4
    9aac:	100d883a 	mov	r6,r2
    9ab0:	200f883a 	mov	r7,r4
    9ab4:	38007716 	blt	r7,zero,9c94 <_fpadd_parts+0x2f0>
    9ab8:	a5c00215 	stw	r23,8(r20)
    9abc:	a1c00415 	stw	r7,16(r20)
    9ac0:	a0000115 	stw	zero,4(r20)
    9ac4:	a1800315 	stw	r6,12(r20)
    9ac8:	a2000317 	ldw	r8,12(r20)
    9acc:	a2400417 	ldw	r9,16(r20)
    9ad0:	00bfffc4 	movi	r2,-1
    9ad4:	408b883a 	add	r5,r8,r2
    9ad8:	2a09803a 	cmpltu	r4,r5,r8
    9adc:	488d883a 	add	r6,r9,r2
    9ae0:	01c40034 	movhi	r7,4096
    9ae4:	39ffffc4 	addi	r7,r7,-1
    9ae8:	218d883a 	add	r6,r4,r6
    9aec:	39801736 	bltu	r7,r6,9b4c <_fpadd_parts+0x1a8>
    9af0:	31c06526 	beq	r6,r7,9c88 <_fpadd_parts+0x2e4>
    9af4:	a3000217 	ldw	r12,8(r20)
    9af8:	4209883a 	add	r4,r8,r8
    9afc:	00bfffc4 	movi	r2,-1
    9b00:	220f803a 	cmpltu	r7,r4,r8
    9b04:	4a4b883a 	add	r5,r9,r9
    9b08:	394f883a 	add	r7,r7,r5
    9b0c:	2095883a 	add	r10,r4,r2
    9b10:	3897883a 	add	r11,r7,r2
    9b14:	510d803a 	cmpltu	r6,r10,r4
    9b18:	6099883a 	add	r12,r12,r2
    9b1c:	32d7883a 	add	r11,r6,r11
    9b20:	00840034 	movhi	r2,4096
    9b24:	10bfffc4 	addi	r2,r2,-1
    9b28:	2011883a 	mov	r8,r4
    9b2c:	3813883a 	mov	r9,r7
    9b30:	a1000315 	stw	r4,12(r20)
    9b34:	a1c00415 	stw	r7,16(r20)
    9b38:	a3000215 	stw	r12,8(r20)
    9b3c:	12c00336 	bltu	r2,r11,9b4c <_fpadd_parts+0x1a8>
    9b40:	58bfed1e 	bne	r11,r2,9af8 <_fpadd_parts+0x154>
    9b44:	00bfff84 	movi	r2,-2
    9b48:	12bfeb2e 	bgeu	r2,r10,9af8 <_fpadd_parts+0x154>
    9b4c:	a2800417 	ldw	r10,16(r20)
    9b50:	008000c4 	movi	r2,3
    9b54:	00c80034 	movhi	r3,8192
    9b58:	18ffffc4 	addi	r3,r3,-1
    9b5c:	a2400317 	ldw	r9,12(r20)
    9b60:	a0800015 	stw	r2,0(r20)
    9b64:	1a802336 	bltu	r3,r10,9bf4 <_fpadd_parts+0x250>
    9b68:	a027883a 	mov	r19,r20
    9b6c:	9805883a 	mov	r2,r19
    9b70:	ddc00717 	ldw	r23,28(sp)
    9b74:	dd800617 	ldw	r22,24(sp)
    9b78:	dd400517 	ldw	r21,20(sp)
    9b7c:	dd000417 	ldw	r20,16(sp)
    9b80:	dcc00317 	ldw	r19,12(sp)
    9b84:	dc800217 	ldw	r18,8(sp)
    9b88:	dc400117 	ldw	r17,4(sp)
    9b8c:	dc000017 	ldw	r16,0(sp)
    9b90:	dec00804 	addi	sp,sp,32
    9b94:	f800283a 	ret
    9b98:	20fff41e 	bne	r4,r3,9b6c <_fpadd_parts+0x1c8>
    9b9c:	31000015 	stw	r4,0(r6)
    9ba0:	98800117 	ldw	r2,4(r19)
    9ba4:	30800115 	stw	r2,4(r6)
    9ba8:	98c00217 	ldw	r3,8(r19)
    9bac:	30c00215 	stw	r3,8(r6)
    9bb0:	98800317 	ldw	r2,12(r19)
    9bb4:	30800315 	stw	r2,12(r6)
    9bb8:	98c00417 	ldw	r3,16(r19)
    9bbc:	30c00415 	stw	r3,16(r6)
    9bc0:	98800117 	ldw	r2,4(r19)
    9bc4:	28c00117 	ldw	r3,4(r5)
    9bc8:	3027883a 	mov	r19,r6
    9bcc:	10c4703a 	and	r2,r2,r3
    9bd0:	30800115 	stw	r2,4(r6)
    9bd4:	003fe506 	br	9b6c <_fpadd_parts+0x1c8>
    9bd8:	1dc02616 	blt	r3,r23,9c74 <_fpadd_parts+0x2d0>
    9bdc:	0023883a 	mov	r17,zero
    9be0:	182f883a 	mov	r23,r3
    9be4:	0025883a 	mov	r18,zero
    9be8:	003fa806 	br	9a8c <_fpadd_parts+0xe8>
    9bec:	a827883a 	mov	r19,r21
    9bf0:	003fde06 	br	9b6c <_fpadd_parts+0x1c8>
    9bf4:	01800044 	movi	r6,1
    9bf8:	500497fa 	slli	r2,r10,31
    9bfc:	4808d07a 	srli	r4,r9,1
    9c00:	518ad83a 	srl	r5,r10,r6
    9c04:	a2000217 	ldw	r8,8(r20)
    9c08:	1108b03a 	or	r4,r2,r4
    9c0c:	0007883a 	mov	r3,zero
    9c10:	4984703a 	and	r2,r9,r6
    9c14:	208cb03a 	or	r6,r4,r2
    9c18:	28ceb03a 	or	r7,r5,r3
    9c1c:	42000044 	addi	r8,r8,1
    9c20:	a027883a 	mov	r19,r20
    9c24:	a1c00415 	stw	r7,16(r20)
    9c28:	a2000215 	stw	r8,8(r20)
    9c2c:	a1800315 	stw	r6,12(r20)
    9c30:	003fce06 	br	9b6c <_fpadd_parts+0x1c8>
    9c34:	8bc5c83a 	sub	r2,r17,r15
    9c38:	8889803a 	cmpltu	r4,r17,r2
    9c3c:	9407c83a 	sub	r3,r18,r16
    9c40:	1909c83a 	sub	r4,r3,r4
    9c44:	100d883a 	mov	r6,r2
    9c48:	200f883a 	mov	r7,r4
    9c4c:	003f9906 	br	9ab4 <_fpadd_parts+0x110>
    9c50:	7c45883a 	add	r2,r15,r17
    9c54:	13c9803a 	cmpltu	r4,r2,r15
    9c58:	8487883a 	add	r3,r16,r18
    9c5c:	20c9883a 	add	r4,r4,r3
    9c60:	a1400115 	stw	r5,4(r20)
    9c64:	a5c00215 	stw	r23,8(r20)
    9c68:	a0800315 	stw	r2,12(r20)
    9c6c:	a1000415 	stw	r4,16(r20)
    9c70:	003fb606 	br	9b4c <_fpadd_parts+0x1a8>
    9c74:	001f883a 	mov	r15,zero
    9c78:	0021883a 	mov	r16,zero
    9c7c:	003f8306 	br	9a8c <_fpadd_parts+0xe8>
    9c80:	018dc83a 	sub	r6,zero,r6
    9c84:	003f6706 	br	9a24 <_fpadd_parts+0x80>
    9c88:	00bfff84 	movi	r2,-2
    9c8c:	117faf36 	bltu	r2,r5,9b4c <_fpadd_parts+0x1a8>
    9c90:	003f9806 	br	9af4 <_fpadd_parts+0x150>
    9c94:	0005883a 	mov	r2,zero
    9c98:	1189c83a 	sub	r4,r2,r6
    9c9c:	1105803a 	cmpltu	r2,r2,r4
    9ca0:	01cbc83a 	sub	r5,zero,r7
    9ca4:	2885c83a 	sub	r2,r5,r2
    9ca8:	01800044 	movi	r6,1
    9cac:	a1800115 	stw	r6,4(r20)
    9cb0:	a5c00215 	stw	r23,8(r20)
    9cb4:	a1000315 	stw	r4,12(r20)
    9cb8:	a0800415 	stw	r2,16(r20)
    9cbc:	003f8206 	br	9ac8 <_fpadd_parts+0x124>
    9cc0:	203f7226 	beq	r4,zero,9a8c <_fpadd_parts+0xe8>
    9cc4:	35bff804 	addi	r22,r6,-32
    9cc8:	b9af883a 	add	r23,r23,r6
    9ccc:	b0003116 	blt	r22,zero,9d94 <_fpadd_parts+0x3f0>
    9cd0:	959ad83a 	srl	r13,r18,r22
    9cd4:	001d883a 	mov	r14,zero
    9cd8:	000f883a 	mov	r7,zero
    9cdc:	01000044 	movi	r4,1
    9ce0:	0011883a 	mov	r8,zero
    9ce4:	b0002516 	blt	r22,zero,9d7c <_fpadd_parts+0x3d8>
    9ce8:	2594983a 	sll	r10,r4,r22
    9cec:	0013883a 	mov	r9,zero
    9cf0:	00bfffc4 	movi	r2,-1
    9cf4:	4889883a 	add	r4,r9,r2
    9cf8:	508b883a 	add	r5,r10,r2
    9cfc:	224d803a 	cmpltu	r6,r4,r9
    9d00:	314b883a 	add	r5,r6,r5
    9d04:	8904703a 	and	r2,r17,r4
    9d08:	9146703a 	and	r3,r18,r5
    9d0c:	10c4b03a 	or	r2,r2,r3
    9d10:	10000226 	beq	r2,zero,9d1c <_fpadd_parts+0x378>
    9d14:	01c00044 	movi	r7,1
    9d18:	0011883a 	mov	r8,zero
    9d1c:	69e2b03a 	or	r17,r13,r7
    9d20:	7224b03a 	or	r18,r14,r8
    9d24:	003f5906 	br	9a8c <_fpadd_parts+0xe8>
    9d28:	8407883a 	add	r3,r16,r16
    9d2c:	008007c4 	movi	r2,31
    9d30:	1185c83a 	sub	r2,r2,r6
    9d34:	1886983a 	sll	r3,r3,r2
    9d38:	7996d83a 	srl	r11,r15,r6
    9d3c:	8198d83a 	srl	r12,r16,r6
    9d40:	1ad6b03a 	or	r11,r3,r11
    9d44:	003f3e06 	br	9a40 <_fpadd_parts+0x9c>
    9d48:	2006d07a 	srli	r3,r4,1
    9d4c:	008007c4 	movi	r2,31
    9d50:	1185c83a 	sub	r2,r2,r6
    9d54:	1890d83a 	srl	r8,r3,r2
    9d58:	218e983a 	sll	r7,r4,r6
    9d5c:	003f3e06 	br	9a58 <_fpadd_parts+0xb4>
    9d60:	113f821e 	bne	r2,r4,9b6c <_fpadd_parts+0x1c8>
    9d64:	28c00117 	ldw	r3,4(r5)
    9d68:	98800117 	ldw	r2,4(r19)
    9d6c:	10ff7f26 	beq	r2,r3,9b6c <_fpadd_parts+0x1c8>
    9d70:	04c00074 	movhi	r19,1
    9d74:	9cfd0804 	addi	r19,r19,-3040
    9d78:	003f7c06 	br	9b6c <_fpadd_parts+0x1c8>
    9d7c:	2006d07a 	srli	r3,r4,1
    9d80:	008007c4 	movi	r2,31
    9d84:	1185c83a 	sub	r2,r2,r6
    9d88:	1894d83a 	srl	r10,r3,r2
    9d8c:	2192983a 	sll	r9,r4,r6
    9d90:	003fd706 	br	9cf0 <_fpadd_parts+0x34c>
    9d94:	9487883a 	add	r3,r18,r18
    9d98:	008007c4 	movi	r2,31
    9d9c:	1185c83a 	sub	r2,r2,r6
    9da0:	1886983a 	sll	r3,r3,r2
    9da4:	899ad83a 	srl	r13,r17,r6
    9da8:	919cd83a 	srl	r14,r18,r6
    9dac:	1b5ab03a 	or	r13,r3,r13
    9db0:	003fc906 	br	9cd8 <_fpadd_parts+0x334>

00009db4 <__subdf3>:
    9db4:	deffea04 	addi	sp,sp,-88
    9db8:	dcc01415 	stw	r19,80(sp)
    9dbc:	dcc00404 	addi	r19,sp,16
    9dc0:	2011883a 	mov	r8,r4
    9dc4:	2813883a 	mov	r9,r5
    9dc8:	dc401315 	stw	r17,76(sp)
    9dcc:	d809883a 	mov	r4,sp
    9dd0:	980b883a 	mov	r5,r19
    9dd4:	dc400904 	addi	r17,sp,36
    9dd8:	dfc01515 	stw	ra,84(sp)
    9ddc:	da400115 	stw	r9,4(sp)
    9de0:	d9c00315 	stw	r7,12(sp)
    9de4:	da000015 	stw	r8,0(sp)
    9de8:	d9800215 	stw	r6,8(sp)
    9dec:	000aefc0 	call	aefc <__unpack_d>
    9df0:	d9000204 	addi	r4,sp,8
    9df4:	880b883a 	mov	r5,r17
    9df8:	000aefc0 	call	aefc <__unpack_d>
    9dfc:	d8800a17 	ldw	r2,40(sp)
    9e00:	880b883a 	mov	r5,r17
    9e04:	9809883a 	mov	r4,r19
    9e08:	d9800e04 	addi	r6,sp,56
    9e0c:	1080005c 	xori	r2,r2,1
    9e10:	d8800a15 	stw	r2,40(sp)
    9e14:	00099a40 	call	99a4 <_fpadd_parts>
    9e18:	1009883a 	mov	r4,r2
    9e1c:	000abe80 	call	abe8 <__pack_d>
    9e20:	dfc01517 	ldw	ra,84(sp)
    9e24:	dcc01417 	ldw	r19,80(sp)
    9e28:	dc401317 	ldw	r17,76(sp)
    9e2c:	dec01604 	addi	sp,sp,88
    9e30:	f800283a 	ret

00009e34 <__adddf3>:
    9e34:	deffea04 	addi	sp,sp,-88
    9e38:	dcc01415 	stw	r19,80(sp)
    9e3c:	dcc00404 	addi	r19,sp,16
    9e40:	2011883a 	mov	r8,r4
    9e44:	2813883a 	mov	r9,r5
    9e48:	dc401315 	stw	r17,76(sp)
    9e4c:	d809883a 	mov	r4,sp
    9e50:	980b883a 	mov	r5,r19
    9e54:	dc400904 	addi	r17,sp,36
    9e58:	dfc01515 	stw	ra,84(sp)
    9e5c:	da400115 	stw	r9,4(sp)
    9e60:	d9c00315 	stw	r7,12(sp)
    9e64:	da000015 	stw	r8,0(sp)
    9e68:	d9800215 	stw	r6,8(sp)
    9e6c:	000aefc0 	call	aefc <__unpack_d>
    9e70:	d9000204 	addi	r4,sp,8
    9e74:	880b883a 	mov	r5,r17
    9e78:	000aefc0 	call	aefc <__unpack_d>
    9e7c:	d9800e04 	addi	r6,sp,56
    9e80:	9809883a 	mov	r4,r19
    9e84:	880b883a 	mov	r5,r17
    9e88:	00099a40 	call	99a4 <_fpadd_parts>
    9e8c:	1009883a 	mov	r4,r2
    9e90:	000abe80 	call	abe8 <__pack_d>
    9e94:	dfc01517 	ldw	ra,84(sp)
    9e98:	dcc01417 	ldw	r19,80(sp)
    9e9c:	dc401317 	ldw	r17,76(sp)
    9ea0:	dec01604 	addi	sp,sp,88
    9ea4:	f800283a 	ret

00009ea8 <__muldf3>:
    9ea8:	deffe004 	addi	sp,sp,-128
    9eac:	dc401815 	stw	r17,96(sp)
    9eb0:	dc400404 	addi	r17,sp,16
    9eb4:	2011883a 	mov	r8,r4
    9eb8:	2813883a 	mov	r9,r5
    9ebc:	dc001715 	stw	r16,92(sp)
    9ec0:	d809883a 	mov	r4,sp
    9ec4:	880b883a 	mov	r5,r17
    9ec8:	dc000904 	addi	r16,sp,36
    9ecc:	dfc01f15 	stw	ra,124(sp)
    9ed0:	da400115 	stw	r9,4(sp)
    9ed4:	d9c00315 	stw	r7,12(sp)
    9ed8:	da000015 	stw	r8,0(sp)
    9edc:	d9800215 	stw	r6,8(sp)
    9ee0:	ddc01e15 	stw	r23,120(sp)
    9ee4:	dd801d15 	stw	r22,116(sp)
    9ee8:	dd401c15 	stw	r21,112(sp)
    9eec:	dd001b15 	stw	r20,108(sp)
    9ef0:	dcc01a15 	stw	r19,104(sp)
    9ef4:	dc801915 	stw	r18,100(sp)
    9ef8:	000aefc0 	call	aefc <__unpack_d>
    9efc:	d9000204 	addi	r4,sp,8
    9f00:	800b883a 	mov	r5,r16
    9f04:	000aefc0 	call	aefc <__unpack_d>
    9f08:	d9000417 	ldw	r4,16(sp)
    9f0c:	00800044 	movi	r2,1
    9f10:	1100102e 	bgeu	r2,r4,9f54 <__muldf3+0xac>
    9f14:	d8c00917 	ldw	r3,36(sp)
    9f18:	10c0062e 	bgeu	r2,r3,9f34 <__muldf3+0x8c>
    9f1c:	00800104 	movi	r2,4
    9f20:	20800a26 	beq	r4,r2,9f4c <__muldf3+0xa4>
    9f24:	1880cc26 	beq	r3,r2,a258 <__muldf3+0x3b0>
    9f28:	00800084 	movi	r2,2
    9f2c:	20800926 	beq	r4,r2,9f54 <__muldf3+0xac>
    9f30:	1880191e 	bne	r3,r2,9f98 <__muldf3+0xf0>
    9f34:	d8c00a17 	ldw	r3,40(sp)
    9f38:	d8800517 	ldw	r2,20(sp)
    9f3c:	8009883a 	mov	r4,r16
    9f40:	10c4c03a 	cmpne	r2,r2,r3
    9f44:	d8800a15 	stw	r2,40(sp)
    9f48:	00000706 	br	9f68 <__muldf3+0xc0>
    9f4c:	00800084 	movi	r2,2
    9f50:	1880c326 	beq	r3,r2,a260 <__muldf3+0x3b8>
    9f54:	d8800517 	ldw	r2,20(sp)
    9f58:	d8c00a17 	ldw	r3,40(sp)
    9f5c:	8809883a 	mov	r4,r17
    9f60:	10c4c03a 	cmpne	r2,r2,r3
    9f64:	d8800515 	stw	r2,20(sp)
    9f68:	000abe80 	call	abe8 <__pack_d>
    9f6c:	dfc01f17 	ldw	ra,124(sp)
    9f70:	ddc01e17 	ldw	r23,120(sp)
    9f74:	dd801d17 	ldw	r22,116(sp)
    9f78:	dd401c17 	ldw	r21,112(sp)
    9f7c:	dd001b17 	ldw	r20,108(sp)
    9f80:	dcc01a17 	ldw	r19,104(sp)
    9f84:	dc801917 	ldw	r18,100(sp)
    9f88:	dc401817 	ldw	r17,96(sp)
    9f8c:	dc001717 	ldw	r16,92(sp)
    9f90:	dec02004 	addi	sp,sp,128
    9f94:	f800283a 	ret
    9f98:	dd800717 	ldw	r22,28(sp)
    9f9c:	dc800c17 	ldw	r18,48(sp)
    9fa0:	002b883a 	mov	r21,zero
    9fa4:	0023883a 	mov	r17,zero
    9fa8:	a80b883a 	mov	r5,r21
    9fac:	b00d883a 	mov	r6,r22
    9fb0:	880f883a 	mov	r7,r17
    9fb4:	ddc00817 	ldw	r23,32(sp)
    9fb8:	dcc00d17 	ldw	r19,52(sp)
    9fbc:	9009883a 	mov	r4,r18
    9fc0:	000aad00 	call	aad0 <__muldi3>
    9fc4:	001b883a 	mov	r13,zero
    9fc8:	680f883a 	mov	r7,r13
    9fcc:	b009883a 	mov	r4,r22
    9fd0:	000b883a 	mov	r5,zero
    9fd4:	980d883a 	mov	r6,r19
    9fd8:	b82d883a 	mov	r22,r23
    9fdc:	002f883a 	mov	r23,zero
    9fe0:	db401615 	stw	r13,88(sp)
    9fe4:	d8801315 	stw	r2,76(sp)
    9fe8:	d8c01415 	stw	r3,80(sp)
    9fec:	dcc01515 	stw	r19,84(sp)
    9ff0:	000aad00 	call	aad0 <__muldi3>
    9ff4:	b00d883a 	mov	r6,r22
    9ff8:	000b883a 	mov	r5,zero
    9ffc:	9009883a 	mov	r4,r18
    a000:	b80f883a 	mov	r7,r23
    a004:	1021883a 	mov	r16,r2
    a008:	1823883a 	mov	r17,r3
    a00c:	000aad00 	call	aad0 <__muldi3>
    a010:	8085883a 	add	r2,r16,r2
    a014:	140d803a 	cmpltu	r6,r2,r16
    a018:	88c7883a 	add	r3,r17,r3
    a01c:	30cd883a 	add	r6,r6,r3
    a020:	1029883a 	mov	r20,r2
    a024:	302b883a 	mov	r21,r6
    a028:	da801317 	ldw	r10,76(sp)
    a02c:	dac01417 	ldw	r11,80(sp)
    a030:	db001517 	ldw	r12,84(sp)
    a034:	db401617 	ldw	r13,88(sp)
    a038:	3440612e 	bgeu	r6,r17,a1c0 <__muldf3+0x318>
    a03c:	0009883a 	mov	r4,zero
    a040:	5105883a 	add	r2,r10,r4
    a044:	128d803a 	cmpltu	r6,r2,r10
    a048:	5d07883a 	add	r3,r11,r20
    a04c:	30cd883a 	add	r6,r6,r3
    a050:	0021883a 	mov	r16,zero
    a054:	04400044 	movi	r17,1
    a058:	1025883a 	mov	r18,r2
    a05c:	3027883a 	mov	r19,r6
    a060:	32c06236 	bltu	r6,r11,a1ec <__muldf3+0x344>
    a064:	59807a26 	beq	r11,r6,a250 <__muldf3+0x3a8>
    a068:	680b883a 	mov	r5,r13
    a06c:	b80f883a 	mov	r7,r23
    a070:	6009883a 	mov	r4,r12
    a074:	b00d883a 	mov	r6,r22
    a078:	000aad00 	call	aad0 <__muldi3>
    a07c:	1009883a 	mov	r4,r2
    a080:	000f883a 	mov	r7,zero
    a084:	1545883a 	add	r2,r2,r21
    a088:	1111803a 	cmpltu	r8,r2,r4
    a08c:	19c7883a 	add	r3,r3,r7
    a090:	40c7883a 	add	r3,r8,r3
    a094:	88cb883a 	add	r5,r17,r3
    a098:	d8c00617 	ldw	r3,24(sp)
    a09c:	8089883a 	add	r4,r16,r2
    a0a0:	d8800b17 	ldw	r2,44(sp)
    a0a4:	18c00104 	addi	r3,r3,4
    a0a8:	240d803a 	cmpltu	r6,r4,r16
    a0ac:	10c7883a 	add	r3,r2,r3
    a0b0:	2013883a 	mov	r9,r4
    a0b4:	d8800a17 	ldw	r2,40(sp)
    a0b8:	d9000517 	ldw	r4,20(sp)
    a0bc:	314d883a 	add	r6,r6,r5
    a0c0:	3015883a 	mov	r10,r6
    a0c4:	2088c03a 	cmpne	r4,r4,r2
    a0c8:	00880034 	movhi	r2,8192
    a0cc:	10bfffc4 	addi	r2,r2,-1
    a0d0:	d9000f15 	stw	r4,60(sp)
    a0d4:	d8c01015 	stw	r3,64(sp)
    a0d8:	1180162e 	bgeu	r2,r6,a134 <__muldf3+0x28c>
    a0dc:	1811883a 	mov	r8,r3
    a0e0:	101f883a 	mov	r15,r2
    a0e4:	980497fa 	slli	r2,r19,31
    a0e8:	9016d07a 	srli	r11,r18,1
    a0ec:	500697fa 	slli	r3,r10,31
    a0f0:	480cd07a 	srli	r6,r9,1
    a0f4:	500ed07a 	srli	r7,r10,1
    a0f8:	12d6b03a 	or	r11,r2,r11
    a0fc:	00800044 	movi	r2,1
    a100:	198cb03a 	or	r6,r3,r6
    a104:	4888703a 	and	r4,r9,r2
    a108:	9818d07a 	srli	r12,r19,1
    a10c:	001b883a 	mov	r13,zero
    a110:	03a00034 	movhi	r14,32768
    a114:	3013883a 	mov	r9,r6
    a118:	3815883a 	mov	r10,r7
    a11c:	4091883a 	add	r8,r8,r2
    a120:	20000226 	beq	r4,zero,a12c <__muldf3+0x284>
    a124:	5b64b03a 	or	r18,r11,r13
    a128:	63a6b03a 	or	r19,r12,r14
    a12c:	7abfed36 	bltu	r15,r10,a0e4 <__muldf3+0x23c>
    a130:	da001015 	stw	r8,64(sp)
    a134:	00840034 	movhi	r2,4096
    a138:	10bfffc4 	addi	r2,r2,-1
    a13c:	12801436 	bltu	r2,r10,a190 <__muldf3+0x2e8>
    a140:	da001017 	ldw	r8,64(sp)
    a144:	101f883a 	mov	r15,r2
    a148:	4a45883a 	add	r2,r9,r9
    a14c:	124d803a 	cmpltu	r6,r2,r9
    a150:	5287883a 	add	r3,r10,r10
    a154:	9497883a 	add	r11,r18,r18
    a158:	5c8f803a 	cmpltu	r7,r11,r18
    a15c:	9cd9883a 	add	r12,r19,r19
    a160:	01000044 	movi	r4,1
    a164:	30cd883a 	add	r6,r6,r3
    a168:	3b0f883a 	add	r7,r7,r12
    a16c:	423fffc4 	addi	r8,r8,-1
    a170:	1013883a 	mov	r9,r2
    a174:	3015883a 	mov	r10,r6
    a178:	111ab03a 	or	r13,r2,r4
    a17c:	98003016 	blt	r19,zero,a240 <__muldf3+0x398>
    a180:	5825883a 	mov	r18,r11
    a184:	3827883a 	mov	r19,r7
    a188:	7abfef2e 	bgeu	r15,r10,a148 <__muldf3+0x2a0>
    a18c:	da001015 	stw	r8,64(sp)
    a190:	00803fc4 	movi	r2,255
    a194:	488e703a 	and	r7,r9,r2
    a198:	00802004 	movi	r2,128
    a19c:	0007883a 	mov	r3,zero
    a1a0:	0011883a 	mov	r8,zero
    a1a4:	38801826 	beq	r7,r2,a208 <__muldf3+0x360>
    a1a8:	008000c4 	movi	r2,3
    a1ac:	d9000e04 	addi	r4,sp,56
    a1b0:	da801215 	stw	r10,72(sp)
    a1b4:	d8800e15 	stw	r2,56(sp)
    a1b8:	da401115 	stw	r9,68(sp)
    a1bc:	003f6a06 	br	9f68 <__muldf3+0xc0>
    a1c0:	89802126 	beq	r17,r6,a248 <__muldf3+0x3a0>
    a1c4:	0009883a 	mov	r4,zero
    a1c8:	5105883a 	add	r2,r10,r4
    a1cc:	128d803a 	cmpltu	r6,r2,r10
    a1d0:	5d07883a 	add	r3,r11,r20
    a1d4:	30cd883a 	add	r6,r6,r3
    a1d8:	0021883a 	mov	r16,zero
    a1dc:	0023883a 	mov	r17,zero
    a1e0:	1025883a 	mov	r18,r2
    a1e4:	3027883a 	mov	r19,r6
    a1e8:	32ff9e2e 	bgeu	r6,r11,a064 <__muldf3+0x1bc>
    a1ec:	00800044 	movi	r2,1
    a1f0:	8089883a 	add	r4,r16,r2
    a1f4:	240d803a 	cmpltu	r6,r4,r16
    a1f8:	344d883a 	add	r6,r6,r17
    a1fc:	2021883a 	mov	r16,r4
    a200:	3023883a 	mov	r17,r6
    a204:	003f9806 	br	a068 <__muldf3+0x1c0>
    a208:	403fe71e 	bne	r8,zero,a1a8 <__muldf3+0x300>
    a20c:	01004004 	movi	r4,256
    a210:	4904703a 	and	r2,r9,r4
    a214:	10c4b03a 	or	r2,r2,r3
    a218:	103fe31e 	bne	r2,zero,a1a8 <__muldf3+0x300>
    a21c:	94c4b03a 	or	r2,r18,r19
    a220:	103fe126 	beq	r2,zero,a1a8 <__muldf3+0x300>
    a224:	49c5883a 	add	r2,r9,r7
    a228:	1251803a 	cmpltu	r8,r2,r9
    a22c:	4291883a 	add	r8,r8,r10
    a230:	013fc004 	movi	r4,-256
    a234:	1112703a 	and	r9,r2,r4
    a238:	4015883a 	mov	r10,r8
    a23c:	003fda06 	br	a1a8 <__muldf3+0x300>
    a240:	6813883a 	mov	r9,r13
    a244:	003fce06 	br	a180 <__muldf3+0x2d8>
    a248:	143f7c36 	bltu	r2,r16,a03c <__muldf3+0x194>
    a24c:	003fdd06 	br	a1c4 <__muldf3+0x31c>
    a250:	12bf852e 	bgeu	r2,r10,a068 <__muldf3+0x1c0>
    a254:	003fe506 	br	a1ec <__muldf3+0x344>
    a258:	00800084 	movi	r2,2
    a25c:	20bf351e 	bne	r4,r2,9f34 <__muldf3+0x8c>
    a260:	01000074 	movhi	r4,1
    a264:	213d0804 	addi	r4,r4,-3040
    a268:	003f3f06 	br	9f68 <__muldf3+0xc0>

0000a26c <__divdf3>:
    a26c:	deffed04 	addi	sp,sp,-76
    a270:	dcc01115 	stw	r19,68(sp)
    a274:	dcc00404 	addi	r19,sp,16
    a278:	2011883a 	mov	r8,r4
    a27c:	2813883a 	mov	r9,r5
    a280:	dc000e15 	stw	r16,56(sp)
    a284:	d809883a 	mov	r4,sp
    a288:	980b883a 	mov	r5,r19
    a28c:	dc000904 	addi	r16,sp,36
    a290:	dfc01215 	stw	ra,72(sp)
    a294:	da400115 	stw	r9,4(sp)
    a298:	d9c00315 	stw	r7,12(sp)
    a29c:	da000015 	stw	r8,0(sp)
    a2a0:	d9800215 	stw	r6,8(sp)
    a2a4:	dc801015 	stw	r18,64(sp)
    a2a8:	dc400f15 	stw	r17,60(sp)
    a2ac:	000aefc0 	call	aefc <__unpack_d>
    a2b0:	d9000204 	addi	r4,sp,8
    a2b4:	800b883a 	mov	r5,r16
    a2b8:	000aefc0 	call	aefc <__unpack_d>
    a2bc:	d9000417 	ldw	r4,16(sp)
    a2c0:	00800044 	movi	r2,1
    a2c4:	11000b2e 	bgeu	r2,r4,a2f4 <__divdf3+0x88>
    a2c8:	d9400917 	ldw	r5,36(sp)
    a2cc:	1140762e 	bgeu	r2,r5,a4a8 <__divdf3+0x23c>
    a2d0:	d8800517 	ldw	r2,20(sp)
    a2d4:	d8c00a17 	ldw	r3,40(sp)
    a2d8:	01800104 	movi	r6,4
    a2dc:	10c4f03a 	xor	r2,r2,r3
    a2e0:	d8800515 	stw	r2,20(sp)
    a2e4:	21800226 	beq	r4,r6,a2f0 <__divdf3+0x84>
    a2e8:	00800084 	movi	r2,2
    a2ec:	2080141e 	bne	r4,r2,a340 <__divdf3+0xd4>
    a2f0:	29000926 	beq	r5,r4,a318 <__divdf3+0xac>
    a2f4:	9809883a 	mov	r4,r19
    a2f8:	000abe80 	call	abe8 <__pack_d>
    a2fc:	dfc01217 	ldw	ra,72(sp)
    a300:	dcc01117 	ldw	r19,68(sp)
    a304:	dc801017 	ldw	r18,64(sp)
    a308:	dc400f17 	ldw	r17,60(sp)
    a30c:	dc000e17 	ldw	r16,56(sp)
    a310:	dec01304 	addi	sp,sp,76
    a314:	f800283a 	ret
    a318:	01000074 	movhi	r4,1
    a31c:	213d0804 	addi	r4,r4,-3040
    a320:	000abe80 	call	abe8 <__pack_d>
    a324:	dfc01217 	ldw	ra,72(sp)
    a328:	dcc01117 	ldw	r19,68(sp)
    a32c:	dc801017 	ldw	r18,64(sp)
    a330:	dc400f17 	ldw	r17,60(sp)
    a334:	dc000e17 	ldw	r16,56(sp)
    a338:	dec01304 	addi	sp,sp,76
    a33c:	f800283a 	ret
    a340:	29805b26 	beq	r5,r6,a4b0 <__divdf3+0x244>
    a344:	28802d26 	beq	r5,r2,a3fc <__divdf3+0x190>
    a348:	d8c00617 	ldw	r3,24(sp)
    a34c:	d8800b17 	ldw	r2,44(sp)
    a350:	d9c00817 	ldw	r7,32(sp)
    a354:	dc400d17 	ldw	r17,52(sp)
    a358:	188bc83a 	sub	r5,r3,r2
    a35c:	d9800717 	ldw	r6,28(sp)
    a360:	dc000c17 	ldw	r16,48(sp)
    a364:	d9400615 	stw	r5,24(sp)
    a368:	3c403836 	bltu	r7,r17,a44c <__divdf3+0x1e0>
    a36c:	89c03626 	beq	r17,r7,a448 <__divdf3+0x1dc>
    a370:	0015883a 	mov	r10,zero
    a374:	001d883a 	mov	r14,zero
    a378:	02c40034 	movhi	r11,4096
    a37c:	001f883a 	mov	r15,zero
    a380:	003f883a 	mov	ra,zero
    a384:	04800f44 	movi	r18,61
    a388:	00000f06 	br	a3c8 <__divdf3+0x15c>
    a38c:	601d883a 	mov	r14,r12
    a390:	681f883a 	mov	r15,r13
    a394:	400d883a 	mov	r6,r8
    a398:	100f883a 	mov	r7,r2
    a39c:	3191883a 	add	r8,r6,r6
    a3a0:	5808d07a 	srli	r4,r11,1
    a3a4:	4185803a 	cmpltu	r2,r8,r6
    a3a8:	39d3883a 	add	r9,r7,r7
    a3ac:	28c6b03a 	or	r3,r5,r3
    a3b0:	1245883a 	add	r2,r2,r9
    a3b4:	1815883a 	mov	r10,r3
    a3b8:	2017883a 	mov	r11,r4
    a3bc:	400d883a 	mov	r6,r8
    a3c0:	100f883a 	mov	r7,r2
    a3c4:	fc801726 	beq	ra,r18,a424 <__divdf3+0x1b8>
    a3c8:	580a97fa 	slli	r5,r11,31
    a3cc:	5006d07a 	srli	r3,r10,1
    a3d0:	ffc00044 	addi	ra,ra,1
    a3d4:	3c7ff136 	bltu	r7,r17,a39c <__divdf3+0x130>
    a3d8:	3411c83a 	sub	r8,r6,r16
    a3dc:	3205803a 	cmpltu	r2,r6,r8
    a3e0:	3c53c83a 	sub	r9,r7,r17
    a3e4:	7298b03a 	or	r12,r14,r10
    a3e8:	7adab03a 	or	r13,r15,r11
    a3ec:	4885c83a 	sub	r2,r9,r2
    a3f0:	89ffe61e 	bne	r17,r7,a38c <__divdf3+0x120>
    a3f4:	343fe936 	bltu	r6,r16,a39c <__divdf3+0x130>
    a3f8:	003fe406 	br	a38c <__divdf3+0x120>
    a3fc:	9809883a 	mov	r4,r19
    a400:	d9800415 	stw	r6,16(sp)
    a404:	000abe80 	call	abe8 <__pack_d>
    a408:	dfc01217 	ldw	ra,72(sp)
    a40c:	dcc01117 	ldw	r19,68(sp)
    a410:	dc801017 	ldw	r18,64(sp)
    a414:	dc400f17 	ldw	r17,60(sp)
    a418:	dc000e17 	ldw	r16,56(sp)
    a41c:	dec01304 	addi	sp,sp,76
    a420:	f800283a 	ret
    a424:	00803fc4 	movi	r2,255
    a428:	7090703a 	and	r8,r14,r2
    a42c:	00802004 	movi	r2,128
    a430:	0007883a 	mov	r3,zero
    a434:	0013883a 	mov	r9,zero
    a438:	40800d26 	beq	r8,r2,a470 <__divdf3+0x204>
    a43c:	dbc00815 	stw	r15,32(sp)
    a440:	db800715 	stw	r14,28(sp)
    a444:	003fab06 	br	a2f4 <__divdf3+0x88>
    a448:	343fc92e 	bgeu	r6,r16,a370 <__divdf3+0x104>
    a44c:	3185883a 	add	r2,r6,r6
    a450:	1189803a 	cmpltu	r4,r2,r6
    a454:	39c7883a 	add	r3,r7,r7
    a458:	20c9883a 	add	r4,r4,r3
    a45c:	297fffc4 	addi	r5,r5,-1
    a460:	100d883a 	mov	r6,r2
    a464:	200f883a 	mov	r7,r4
    a468:	d9400615 	stw	r5,24(sp)
    a46c:	003fc006 	br	a370 <__divdf3+0x104>
    a470:	483ff21e 	bne	r9,zero,a43c <__divdf3+0x1d0>
    a474:	01004004 	movi	r4,256
    a478:	7104703a 	and	r2,r14,r4
    a47c:	10c4b03a 	or	r2,r2,r3
    a480:	103fee1e 	bne	r2,zero,a43c <__divdf3+0x1d0>
    a484:	31c4b03a 	or	r2,r6,r7
    a488:	103fec26 	beq	r2,zero,a43c <__divdf3+0x1d0>
    a48c:	7205883a 	add	r2,r14,r8
    a490:	1391803a 	cmpltu	r8,r2,r14
    a494:	43d1883a 	add	r8,r8,r15
    a498:	013fc004 	movi	r4,-256
    a49c:	111c703a 	and	r14,r2,r4
    a4a0:	401f883a 	mov	r15,r8
    a4a4:	003fe506 	br	a43c <__divdf3+0x1d0>
    a4a8:	8009883a 	mov	r4,r16
    a4ac:	003f9206 	br	a2f8 <__divdf3+0x8c>
    a4b0:	9809883a 	mov	r4,r19
    a4b4:	d8000715 	stw	zero,28(sp)
    a4b8:	d8000815 	stw	zero,32(sp)
    a4bc:	d8000615 	stw	zero,24(sp)
    a4c0:	003f8d06 	br	a2f8 <__divdf3+0x8c>

0000a4c4 <__eqdf2>:
    a4c4:	deffef04 	addi	sp,sp,-68
    a4c8:	dc400f15 	stw	r17,60(sp)
    a4cc:	dc400404 	addi	r17,sp,16
    a4d0:	2005883a 	mov	r2,r4
    a4d4:	2807883a 	mov	r3,r5
    a4d8:	dc000e15 	stw	r16,56(sp)
    a4dc:	d809883a 	mov	r4,sp
    a4e0:	880b883a 	mov	r5,r17
    a4e4:	dc000904 	addi	r16,sp,36
    a4e8:	d8c00115 	stw	r3,4(sp)
    a4ec:	d8800015 	stw	r2,0(sp)
    a4f0:	d9800215 	stw	r6,8(sp)
    a4f4:	dfc01015 	stw	ra,64(sp)
    a4f8:	d9c00315 	stw	r7,12(sp)
    a4fc:	000aefc0 	call	aefc <__unpack_d>
    a500:	d9000204 	addi	r4,sp,8
    a504:	800b883a 	mov	r5,r16
    a508:	000aefc0 	call	aefc <__unpack_d>
    a50c:	d8800417 	ldw	r2,16(sp)
    a510:	00c00044 	movi	r3,1
    a514:	180d883a 	mov	r6,r3
    a518:	1880062e 	bgeu	r3,r2,a534 <__eqdf2+0x70>
    a51c:	d8800917 	ldw	r2,36(sp)
    a520:	8809883a 	mov	r4,r17
    a524:	800b883a 	mov	r5,r16
    a528:	1880022e 	bgeu	r3,r2,a534 <__eqdf2+0x70>
    a52c:	000b0340 	call	b034 <__fpcmp_parts_d>
    a530:	100d883a 	mov	r6,r2
    a534:	3005883a 	mov	r2,r6
    a538:	dfc01017 	ldw	ra,64(sp)
    a53c:	dc400f17 	ldw	r17,60(sp)
    a540:	dc000e17 	ldw	r16,56(sp)
    a544:	dec01104 	addi	sp,sp,68
    a548:	f800283a 	ret

0000a54c <__nedf2>:
    a54c:	deffef04 	addi	sp,sp,-68
    a550:	dc400f15 	stw	r17,60(sp)
    a554:	dc400404 	addi	r17,sp,16
    a558:	2005883a 	mov	r2,r4
    a55c:	2807883a 	mov	r3,r5
    a560:	dc000e15 	stw	r16,56(sp)
    a564:	d809883a 	mov	r4,sp
    a568:	880b883a 	mov	r5,r17
    a56c:	dc000904 	addi	r16,sp,36
    a570:	d8c00115 	stw	r3,4(sp)
    a574:	d8800015 	stw	r2,0(sp)
    a578:	d9800215 	stw	r6,8(sp)
    a57c:	dfc01015 	stw	ra,64(sp)
    a580:	d9c00315 	stw	r7,12(sp)
    a584:	000aefc0 	call	aefc <__unpack_d>
    a588:	d9000204 	addi	r4,sp,8
    a58c:	800b883a 	mov	r5,r16
    a590:	000aefc0 	call	aefc <__unpack_d>
    a594:	d8800417 	ldw	r2,16(sp)
    a598:	00c00044 	movi	r3,1
    a59c:	180d883a 	mov	r6,r3
    a5a0:	1880062e 	bgeu	r3,r2,a5bc <__nedf2+0x70>
    a5a4:	d8800917 	ldw	r2,36(sp)
    a5a8:	8809883a 	mov	r4,r17
    a5ac:	800b883a 	mov	r5,r16
    a5b0:	1880022e 	bgeu	r3,r2,a5bc <__nedf2+0x70>
    a5b4:	000b0340 	call	b034 <__fpcmp_parts_d>
    a5b8:	100d883a 	mov	r6,r2
    a5bc:	3005883a 	mov	r2,r6
    a5c0:	dfc01017 	ldw	ra,64(sp)
    a5c4:	dc400f17 	ldw	r17,60(sp)
    a5c8:	dc000e17 	ldw	r16,56(sp)
    a5cc:	dec01104 	addi	sp,sp,68
    a5d0:	f800283a 	ret

0000a5d4 <__gtdf2>:
    a5d4:	deffef04 	addi	sp,sp,-68
    a5d8:	dc400f15 	stw	r17,60(sp)
    a5dc:	dc400404 	addi	r17,sp,16
    a5e0:	2005883a 	mov	r2,r4
    a5e4:	2807883a 	mov	r3,r5
    a5e8:	dc000e15 	stw	r16,56(sp)
    a5ec:	d809883a 	mov	r4,sp
    a5f0:	880b883a 	mov	r5,r17
    a5f4:	dc000904 	addi	r16,sp,36
    a5f8:	d8c00115 	stw	r3,4(sp)
    a5fc:	d8800015 	stw	r2,0(sp)
    a600:	d9800215 	stw	r6,8(sp)
    a604:	dfc01015 	stw	ra,64(sp)
    a608:	d9c00315 	stw	r7,12(sp)
    a60c:	000aefc0 	call	aefc <__unpack_d>
    a610:	d9000204 	addi	r4,sp,8
    a614:	800b883a 	mov	r5,r16
    a618:	000aefc0 	call	aefc <__unpack_d>
    a61c:	d8800417 	ldw	r2,16(sp)
    a620:	00c00044 	movi	r3,1
    a624:	01bfffc4 	movi	r6,-1
    a628:	1880062e 	bgeu	r3,r2,a644 <__gtdf2+0x70>
    a62c:	d8800917 	ldw	r2,36(sp)
    a630:	8809883a 	mov	r4,r17
    a634:	800b883a 	mov	r5,r16
    a638:	1880022e 	bgeu	r3,r2,a644 <__gtdf2+0x70>
    a63c:	000b0340 	call	b034 <__fpcmp_parts_d>
    a640:	100d883a 	mov	r6,r2
    a644:	3005883a 	mov	r2,r6
    a648:	dfc01017 	ldw	ra,64(sp)
    a64c:	dc400f17 	ldw	r17,60(sp)
    a650:	dc000e17 	ldw	r16,56(sp)
    a654:	dec01104 	addi	sp,sp,68
    a658:	f800283a 	ret

0000a65c <__gedf2>:
    a65c:	deffef04 	addi	sp,sp,-68
    a660:	dc400f15 	stw	r17,60(sp)
    a664:	dc400404 	addi	r17,sp,16
    a668:	2005883a 	mov	r2,r4
    a66c:	2807883a 	mov	r3,r5
    a670:	dc000e15 	stw	r16,56(sp)
    a674:	d809883a 	mov	r4,sp
    a678:	880b883a 	mov	r5,r17
    a67c:	dc000904 	addi	r16,sp,36
    a680:	d8c00115 	stw	r3,4(sp)
    a684:	d8800015 	stw	r2,0(sp)
    a688:	d9800215 	stw	r6,8(sp)
    a68c:	dfc01015 	stw	ra,64(sp)
    a690:	d9c00315 	stw	r7,12(sp)
    a694:	000aefc0 	call	aefc <__unpack_d>
    a698:	d9000204 	addi	r4,sp,8
    a69c:	800b883a 	mov	r5,r16
    a6a0:	000aefc0 	call	aefc <__unpack_d>
    a6a4:	d8800417 	ldw	r2,16(sp)
    a6a8:	00c00044 	movi	r3,1
    a6ac:	01bfffc4 	movi	r6,-1
    a6b0:	1880062e 	bgeu	r3,r2,a6cc <__gedf2+0x70>
    a6b4:	d8800917 	ldw	r2,36(sp)
    a6b8:	8809883a 	mov	r4,r17
    a6bc:	800b883a 	mov	r5,r16
    a6c0:	1880022e 	bgeu	r3,r2,a6cc <__gedf2+0x70>
    a6c4:	000b0340 	call	b034 <__fpcmp_parts_d>
    a6c8:	100d883a 	mov	r6,r2
    a6cc:	3005883a 	mov	r2,r6
    a6d0:	dfc01017 	ldw	ra,64(sp)
    a6d4:	dc400f17 	ldw	r17,60(sp)
    a6d8:	dc000e17 	ldw	r16,56(sp)
    a6dc:	dec01104 	addi	sp,sp,68
    a6e0:	f800283a 	ret

0000a6e4 <__ltdf2>:
    a6e4:	deffef04 	addi	sp,sp,-68
    a6e8:	dc400f15 	stw	r17,60(sp)
    a6ec:	dc400404 	addi	r17,sp,16
    a6f0:	2005883a 	mov	r2,r4
    a6f4:	2807883a 	mov	r3,r5
    a6f8:	dc000e15 	stw	r16,56(sp)
    a6fc:	d809883a 	mov	r4,sp
    a700:	880b883a 	mov	r5,r17
    a704:	dc000904 	addi	r16,sp,36
    a708:	d8c00115 	stw	r3,4(sp)
    a70c:	d8800015 	stw	r2,0(sp)
    a710:	d9800215 	stw	r6,8(sp)
    a714:	dfc01015 	stw	ra,64(sp)
    a718:	d9c00315 	stw	r7,12(sp)
    a71c:	000aefc0 	call	aefc <__unpack_d>
    a720:	d9000204 	addi	r4,sp,8
    a724:	800b883a 	mov	r5,r16
    a728:	000aefc0 	call	aefc <__unpack_d>
    a72c:	d8800417 	ldw	r2,16(sp)
    a730:	00c00044 	movi	r3,1
    a734:	180d883a 	mov	r6,r3
    a738:	1880062e 	bgeu	r3,r2,a754 <__ltdf2+0x70>
    a73c:	d8800917 	ldw	r2,36(sp)
    a740:	8809883a 	mov	r4,r17
    a744:	800b883a 	mov	r5,r16
    a748:	1880022e 	bgeu	r3,r2,a754 <__ltdf2+0x70>
    a74c:	000b0340 	call	b034 <__fpcmp_parts_d>
    a750:	100d883a 	mov	r6,r2
    a754:	3005883a 	mov	r2,r6
    a758:	dfc01017 	ldw	ra,64(sp)
    a75c:	dc400f17 	ldw	r17,60(sp)
    a760:	dc000e17 	ldw	r16,56(sp)
    a764:	dec01104 	addi	sp,sp,68
    a768:	f800283a 	ret

0000a76c <__floatsidf>:
    a76c:	2006d7fa 	srli	r3,r4,31
    a770:	defff604 	addi	sp,sp,-40
    a774:	008000c4 	movi	r2,3
    a778:	dfc00915 	stw	ra,36(sp)
    a77c:	dcc00815 	stw	r19,32(sp)
    a780:	dc800715 	stw	r18,28(sp)
    a784:	dc400615 	stw	r17,24(sp)
    a788:	dc000515 	stw	r16,20(sp)
    a78c:	d8800015 	stw	r2,0(sp)
    a790:	d8c00115 	stw	r3,4(sp)
    a794:	20000f1e 	bne	r4,zero,a7d4 <__floatsidf+0x68>
    a798:	00800084 	movi	r2,2
    a79c:	d8800015 	stw	r2,0(sp)
    a7a0:	d809883a 	mov	r4,sp
    a7a4:	000abe80 	call	abe8 <__pack_d>
    a7a8:	1009883a 	mov	r4,r2
    a7ac:	180b883a 	mov	r5,r3
    a7b0:	2005883a 	mov	r2,r4
    a7b4:	2807883a 	mov	r3,r5
    a7b8:	dfc00917 	ldw	ra,36(sp)
    a7bc:	dcc00817 	ldw	r19,32(sp)
    a7c0:	dc800717 	ldw	r18,28(sp)
    a7c4:	dc400617 	ldw	r17,24(sp)
    a7c8:	dc000517 	ldw	r16,20(sp)
    a7cc:	dec00a04 	addi	sp,sp,40
    a7d0:	f800283a 	ret
    a7d4:	00800f04 	movi	r2,60
    a7d8:	1807003a 	cmpeq	r3,r3,zero
    a7dc:	d8800215 	stw	r2,8(sp)
    a7e0:	18001126 	beq	r3,zero,a828 <__floatsidf+0xbc>
    a7e4:	0027883a 	mov	r19,zero
    a7e8:	2025883a 	mov	r18,r4
    a7ec:	d9000315 	stw	r4,12(sp)
    a7f0:	dcc00415 	stw	r19,16(sp)
    a7f4:	000ab680 	call	ab68 <__clzsi2>
    a7f8:	11000744 	addi	r4,r2,29
    a7fc:	013fe80e 	bge	zero,r4,a7a0 <__floatsidf+0x34>
    a800:	10bfff44 	addi	r2,r2,-3
    a804:	10000c16 	blt	r2,zero,a838 <__floatsidf+0xcc>
    a808:	90a2983a 	sll	r17,r18,r2
    a80c:	0021883a 	mov	r16,zero
    a810:	d8800217 	ldw	r2,8(sp)
    a814:	dc400415 	stw	r17,16(sp)
    a818:	dc000315 	stw	r16,12(sp)
    a81c:	1105c83a 	sub	r2,r2,r4
    a820:	d8800215 	stw	r2,8(sp)
    a824:	003fde06 	br	a7a0 <__floatsidf+0x34>
    a828:	00a00034 	movhi	r2,32768
    a82c:	20800a26 	beq	r4,r2,a858 <__floatsidf+0xec>
    a830:	0109c83a 	sub	r4,zero,r4
    a834:	003feb06 	br	a7e4 <__floatsidf+0x78>
    a838:	9006d07a 	srli	r3,r18,1
    a83c:	008007c4 	movi	r2,31
    a840:	1105c83a 	sub	r2,r2,r4
    a844:	1886d83a 	srl	r3,r3,r2
    a848:	9922983a 	sll	r17,r19,r4
    a84c:	9120983a 	sll	r16,r18,r4
    a850:	1c62b03a 	or	r17,r3,r17
    a854:	003fee06 	br	a810 <__floatsidf+0xa4>
    a858:	0009883a 	mov	r4,zero
    a85c:	01707834 	movhi	r5,49632
    a860:	003fd306 	br	a7b0 <__floatsidf+0x44>

0000a864 <__fixdfsi>:
    a864:	defff804 	addi	sp,sp,-32
    a868:	2005883a 	mov	r2,r4
    a86c:	2807883a 	mov	r3,r5
    a870:	d809883a 	mov	r4,sp
    a874:	d9400204 	addi	r5,sp,8
    a878:	d8c00115 	stw	r3,4(sp)
    a87c:	d8800015 	stw	r2,0(sp)
    a880:	dfc00715 	stw	ra,28(sp)
    a884:	000aefc0 	call	aefc <__unpack_d>
    a888:	d8c00217 	ldw	r3,8(sp)
    a88c:	00800084 	movi	r2,2
    a890:	1880051e 	bne	r3,r2,a8a8 <__fixdfsi+0x44>
    a894:	0007883a 	mov	r3,zero
    a898:	1805883a 	mov	r2,r3
    a89c:	dfc00717 	ldw	ra,28(sp)
    a8a0:	dec00804 	addi	sp,sp,32
    a8a4:	f800283a 	ret
    a8a8:	00800044 	movi	r2,1
    a8ac:	10fff92e 	bgeu	r2,r3,a894 <__fixdfsi+0x30>
    a8b0:	00800104 	movi	r2,4
    a8b4:	18800426 	beq	r3,r2,a8c8 <__fixdfsi+0x64>
    a8b8:	d8c00417 	ldw	r3,16(sp)
    a8bc:	183ff516 	blt	r3,zero,a894 <__fixdfsi+0x30>
    a8c0:	00800784 	movi	r2,30
    a8c4:	10c0080e 	bge	r2,r3,a8e8 <__fixdfsi+0x84>
    a8c8:	d8800317 	ldw	r2,12(sp)
    a8cc:	1000121e 	bne	r2,zero,a918 <__fixdfsi+0xb4>
    a8d0:	00e00034 	movhi	r3,32768
    a8d4:	18ffffc4 	addi	r3,r3,-1
    a8d8:	1805883a 	mov	r2,r3
    a8dc:	dfc00717 	ldw	ra,28(sp)
    a8e0:	dec00804 	addi	sp,sp,32
    a8e4:	f800283a 	ret
    a8e8:	00800f04 	movi	r2,60
    a8ec:	10d1c83a 	sub	r8,r2,r3
    a8f0:	40bff804 	addi	r2,r8,-32
    a8f4:	d9800517 	ldw	r6,20(sp)
    a8f8:	d9c00617 	ldw	r7,24(sp)
    a8fc:	10000816 	blt	r2,zero,a920 <__fixdfsi+0xbc>
    a900:	3888d83a 	srl	r4,r7,r2
    a904:	d8800317 	ldw	r2,12(sp)
    a908:	2007883a 	mov	r3,r4
    a90c:	103fe226 	beq	r2,zero,a898 <__fixdfsi+0x34>
    a910:	0107c83a 	sub	r3,zero,r4
    a914:	003fe006 	br	a898 <__fixdfsi+0x34>
    a918:	00e00034 	movhi	r3,32768
    a91c:	003fde06 	br	a898 <__fixdfsi+0x34>
    a920:	39c7883a 	add	r3,r7,r7
    a924:	008007c4 	movi	r2,31
    a928:	1205c83a 	sub	r2,r2,r8
    a92c:	1886983a 	sll	r3,r3,r2
    a930:	3208d83a 	srl	r4,r6,r8
    a934:	1908b03a 	or	r4,r3,r4
    a938:	003ff206 	br	a904 <__fixdfsi+0xa0>

0000a93c <__floatunsidf>:
    a93c:	defff204 	addi	sp,sp,-56
    a940:	dfc00d15 	stw	ra,52(sp)
    a944:	ddc00c15 	stw	r23,48(sp)
    a948:	dd800b15 	stw	r22,44(sp)
    a94c:	dd400a15 	stw	r21,40(sp)
    a950:	dd000915 	stw	r20,36(sp)
    a954:	dcc00815 	stw	r19,32(sp)
    a958:	dc800715 	stw	r18,28(sp)
    a95c:	dc400615 	stw	r17,24(sp)
    a960:	dc000515 	stw	r16,20(sp)
    a964:	d8000115 	stw	zero,4(sp)
    a968:	20000f1e 	bne	r4,zero,a9a8 <__floatunsidf+0x6c>
    a96c:	00800084 	movi	r2,2
    a970:	d8800015 	stw	r2,0(sp)
    a974:	d809883a 	mov	r4,sp
    a978:	000abe80 	call	abe8 <__pack_d>
    a97c:	dfc00d17 	ldw	ra,52(sp)
    a980:	ddc00c17 	ldw	r23,48(sp)
    a984:	dd800b17 	ldw	r22,44(sp)
    a988:	dd400a17 	ldw	r21,40(sp)
    a98c:	dd000917 	ldw	r20,36(sp)
    a990:	dcc00817 	ldw	r19,32(sp)
    a994:	dc800717 	ldw	r18,28(sp)
    a998:	dc400617 	ldw	r17,24(sp)
    a99c:	dc000517 	ldw	r16,20(sp)
    a9a0:	dec00e04 	addi	sp,sp,56
    a9a4:	f800283a 	ret
    a9a8:	008000c4 	movi	r2,3
    a9ac:	00c00f04 	movi	r3,60
    a9b0:	002f883a 	mov	r23,zero
    a9b4:	202d883a 	mov	r22,r4
    a9b8:	d8800015 	stw	r2,0(sp)
    a9bc:	d8c00215 	stw	r3,8(sp)
    a9c0:	d9000315 	stw	r4,12(sp)
    a9c4:	ddc00415 	stw	r23,16(sp)
    a9c8:	000ab680 	call	ab68 <__clzsi2>
    a9cc:	12400744 	addi	r9,r2,29
    a9d0:	48000b16 	blt	r9,zero,aa00 <__floatunsidf+0xc4>
    a9d4:	483fe726 	beq	r9,zero,a974 <__floatunsidf+0x38>
    a9d8:	10bfff44 	addi	r2,r2,-3
    a9dc:	10002e16 	blt	r2,zero,aa98 <__floatunsidf+0x15c>
    a9e0:	b0a2983a 	sll	r17,r22,r2
    a9e4:	0021883a 	mov	r16,zero
    a9e8:	d8800217 	ldw	r2,8(sp)
    a9ec:	dc400415 	stw	r17,16(sp)
    a9f0:	dc000315 	stw	r16,12(sp)
    a9f4:	1245c83a 	sub	r2,r2,r9
    a9f8:	d8800215 	stw	r2,8(sp)
    a9fc:	003fdd06 	br	a974 <__floatunsidf+0x38>
    aa00:	0255c83a 	sub	r10,zero,r9
    aa04:	51bff804 	addi	r6,r10,-32
    aa08:	30001b16 	blt	r6,zero,aa78 <__floatunsidf+0x13c>
    aa0c:	b9a8d83a 	srl	r20,r23,r6
    aa10:	002b883a 	mov	r21,zero
    aa14:	000f883a 	mov	r7,zero
    aa18:	01000044 	movi	r4,1
    aa1c:	0011883a 	mov	r8,zero
    aa20:	30002516 	blt	r6,zero,aab8 <__floatunsidf+0x17c>
    aa24:	21a6983a 	sll	r19,r4,r6
    aa28:	0025883a 	mov	r18,zero
    aa2c:	00bfffc4 	movi	r2,-1
    aa30:	9089883a 	add	r4,r18,r2
    aa34:	988b883a 	add	r5,r19,r2
    aa38:	248d803a 	cmpltu	r6,r4,r18
    aa3c:	314b883a 	add	r5,r6,r5
    aa40:	b104703a 	and	r2,r22,r4
    aa44:	b946703a 	and	r3,r23,r5
    aa48:	10c4b03a 	or	r2,r2,r3
    aa4c:	10000226 	beq	r2,zero,aa58 <__floatunsidf+0x11c>
    aa50:	01c00044 	movi	r7,1
    aa54:	0011883a 	mov	r8,zero
    aa58:	d9000217 	ldw	r4,8(sp)
    aa5c:	a1c4b03a 	or	r2,r20,r7
    aa60:	aa06b03a 	or	r3,r21,r8
    aa64:	2249c83a 	sub	r4,r4,r9
    aa68:	d8c00415 	stw	r3,16(sp)
    aa6c:	d9000215 	stw	r4,8(sp)
    aa70:	d8800315 	stw	r2,12(sp)
    aa74:	003fbf06 	br	a974 <__floatunsidf+0x38>
    aa78:	bdc7883a 	add	r3,r23,r23
    aa7c:	008007c4 	movi	r2,31
    aa80:	1285c83a 	sub	r2,r2,r10
    aa84:	1886983a 	sll	r3,r3,r2
    aa88:	b2a8d83a 	srl	r20,r22,r10
    aa8c:	baaad83a 	srl	r21,r23,r10
    aa90:	1d28b03a 	or	r20,r3,r20
    aa94:	003fdf06 	br	aa14 <__floatunsidf+0xd8>
    aa98:	b006d07a 	srli	r3,r22,1
    aa9c:	008007c4 	movi	r2,31
    aaa0:	1245c83a 	sub	r2,r2,r9
    aaa4:	1886d83a 	srl	r3,r3,r2
    aaa8:	ba62983a 	sll	r17,r23,r9
    aaac:	b260983a 	sll	r16,r22,r9
    aab0:	1c62b03a 	or	r17,r3,r17
    aab4:	003fcc06 	br	a9e8 <__floatunsidf+0xac>
    aab8:	2006d07a 	srli	r3,r4,1
    aabc:	008007c4 	movi	r2,31
    aac0:	1285c83a 	sub	r2,r2,r10
    aac4:	18a6d83a 	srl	r19,r3,r2
    aac8:	22a4983a 	sll	r18,r4,r10
    aacc:	003fd706 	br	aa2c <__floatunsidf+0xf0>

0000aad0 <__muldi3>:
    aad0:	2011883a 	mov	r8,r4
    aad4:	427fffcc 	andi	r9,r8,65535
    aad8:	4018d43a 	srli	r12,r8,16
    aadc:	32bfffcc 	andi	r10,r6,65535
    aae0:	3016d43a 	srli	r11,r6,16
    aae4:	4a85383a 	mul	r2,r9,r10
    aae8:	6295383a 	mul	r10,r12,r10
    aaec:	4ad3383a 	mul	r9,r9,r11
    aaf0:	113fffcc 	andi	r4,r2,65535
    aaf4:	1004d43a 	srli	r2,r2,16
    aaf8:	4a93883a 	add	r9,r9,r10
    aafc:	3807883a 	mov	r3,r7
    ab00:	1245883a 	add	r2,r2,r9
    ab04:	280f883a 	mov	r7,r5
    ab08:	180b883a 	mov	r5,r3
    ab0c:	1006943a 	slli	r3,r2,16
    ab10:	defffd04 	addi	sp,sp,-12
    ab14:	dc800215 	stw	r18,8(sp)
    ab18:	1907883a 	add	r3,r3,r4
    ab1c:	dc400115 	stw	r17,4(sp)
    ab20:	dc000015 	stw	r16,0(sp)
    ab24:	4165383a 	mul	r18,r8,r5
    ab28:	31e3383a 	mul	r17,r6,r7
    ab2c:	1012d43a 	srli	r9,r2,16
    ab30:	62d9383a 	mul	r12,r12,r11
    ab34:	181f883a 	mov	r15,r3
    ab38:	1280022e 	bgeu	r2,r10,ab44 <__muldi3+0x74>
    ab3c:	00800074 	movhi	r2,1
    ab40:	6099883a 	add	r12,r12,r2
    ab44:	624d883a 	add	r6,r12,r9
    ab48:	9187883a 	add	r3,r18,r6
    ab4c:	88c7883a 	add	r3,r17,r3
    ab50:	7805883a 	mov	r2,r15
    ab54:	dc800217 	ldw	r18,8(sp)
    ab58:	dc400117 	ldw	r17,4(sp)
    ab5c:	dc000017 	ldw	r16,0(sp)
    ab60:	dec00304 	addi	sp,sp,12
    ab64:	f800283a 	ret

0000ab68 <__clzsi2>:
    ab68:	00bfffd4 	movui	r2,65535
    ab6c:	11000e36 	bltu	r2,r4,aba8 <__clzsi2+0x40>
    ab70:	00803fc4 	movi	r2,255
    ab74:	01400204 	movi	r5,8
    ab78:	0007883a 	mov	r3,zero
    ab7c:	11001036 	bltu	r2,r4,abc0 <__clzsi2+0x58>
    ab80:	000b883a 	mov	r5,zero
    ab84:	20c6d83a 	srl	r3,r4,r3
    ab88:	00800074 	movhi	r2,1
    ab8c:	10bd0d04 	addi	r2,r2,-3020
    ab90:	1887883a 	add	r3,r3,r2
    ab94:	18800003 	ldbu	r2,0(r3)
    ab98:	00c00804 	movi	r3,32
    ab9c:	2885883a 	add	r2,r5,r2
    aba0:	1885c83a 	sub	r2,r3,r2
    aba4:	f800283a 	ret
    aba8:	01400404 	movi	r5,16
    abac:	00804034 	movhi	r2,256
    abb0:	10bfffc4 	addi	r2,r2,-1
    abb4:	2807883a 	mov	r3,r5
    abb8:	113ff22e 	bgeu	r2,r4,ab84 <__clzsi2+0x1c>
    abbc:	01400604 	movi	r5,24
    abc0:	2807883a 	mov	r3,r5
    abc4:	20c6d83a 	srl	r3,r4,r3
    abc8:	00800074 	movhi	r2,1
    abcc:	10bd0d04 	addi	r2,r2,-3020
    abd0:	1887883a 	add	r3,r3,r2
    abd4:	18800003 	ldbu	r2,0(r3)
    abd8:	00c00804 	movi	r3,32
    abdc:	2885883a 	add	r2,r5,r2
    abe0:	1885c83a 	sub	r2,r3,r2
    abe4:	f800283a 	ret

0000abe8 <__pack_d>:
    abe8:	20c00017 	ldw	r3,0(r4)
    abec:	defffd04 	addi	sp,sp,-12
    abf0:	dc000015 	stw	r16,0(sp)
    abf4:	dc800215 	stw	r18,8(sp)
    abf8:	dc400115 	stw	r17,4(sp)
    abfc:	00800044 	movi	r2,1
    ac00:	22000317 	ldw	r8,12(r4)
    ac04:	001f883a 	mov	r15,zero
    ac08:	22400417 	ldw	r9,16(r4)
    ac0c:	24000117 	ldw	r16,4(r4)
    ac10:	10c0552e 	bgeu	r2,r3,ad68 <__pack_d+0x180>
    ac14:	00800104 	movi	r2,4
    ac18:	18804f26 	beq	r3,r2,ad58 <__pack_d+0x170>
    ac1c:	00800084 	movi	r2,2
    ac20:	18800226 	beq	r3,r2,ac2c <__pack_d+0x44>
    ac24:	4244b03a 	or	r2,r8,r9
    ac28:	10001a1e 	bne	r2,zero,ac94 <__pack_d+0xac>
    ac2c:	000d883a 	mov	r6,zero
    ac30:	000f883a 	mov	r7,zero
    ac34:	0011883a 	mov	r8,zero
    ac38:	00800434 	movhi	r2,16
    ac3c:	10bfffc4 	addi	r2,r2,-1
    ac40:	301d883a 	mov	r14,r6
    ac44:	3884703a 	and	r2,r7,r2
    ac48:	400a953a 	slli	r5,r8,20
    ac4c:	79bffc2c 	andhi	r6,r15,65520
    ac50:	308cb03a 	or	r6,r6,r2
    ac54:	00e00434 	movhi	r3,32784
    ac58:	18ffffc4 	addi	r3,r3,-1
    ac5c:	800497fa 	slli	r2,r16,31
    ac60:	30c6703a 	and	r3,r6,r3
    ac64:	1946b03a 	or	r3,r3,r5
    ac68:	01600034 	movhi	r5,32768
    ac6c:	297fffc4 	addi	r5,r5,-1
    ac70:	194a703a 	and	r5,r3,r5
    ac74:	288ab03a 	or	r5,r5,r2
    ac78:	2807883a 	mov	r3,r5
    ac7c:	7005883a 	mov	r2,r14
    ac80:	dc800217 	ldw	r18,8(sp)
    ac84:	dc400117 	ldw	r17,4(sp)
    ac88:	dc000017 	ldw	r16,0(sp)
    ac8c:	dec00304 	addi	sp,sp,12
    ac90:	f800283a 	ret
    ac94:	21000217 	ldw	r4,8(r4)
    ac98:	00bf0084 	movi	r2,-1022
    ac9c:	20803f16 	blt	r4,r2,ad9c <__pack_d+0x1b4>
    aca0:	0080ffc4 	movi	r2,1023
    aca4:	11002c16 	blt	r2,r4,ad58 <__pack_d+0x170>
    aca8:	00803fc4 	movi	r2,255
    acac:	408c703a 	and	r6,r8,r2
    acb0:	00802004 	movi	r2,128
    acb4:	0007883a 	mov	r3,zero
    acb8:	000f883a 	mov	r7,zero
    acbc:	2280ffc4 	addi	r10,r4,1023
    acc0:	30801e26 	beq	r6,r2,ad3c <__pack_d+0x154>
    acc4:	00801fc4 	movi	r2,127
    acc8:	4089883a 	add	r4,r8,r2
    accc:	220d803a 	cmpltu	r6,r4,r8
    acd0:	324d883a 	add	r6,r6,r9
    acd4:	2011883a 	mov	r8,r4
    acd8:	3013883a 	mov	r9,r6
    acdc:	00880034 	movhi	r2,8192
    ace0:	10bfffc4 	addi	r2,r2,-1
    ace4:	12400d36 	bltu	r2,r9,ad1c <__pack_d+0x134>
    ace8:	4804963a 	slli	r2,r9,24
    acec:	400cd23a 	srli	r6,r8,8
    acf0:	480ed23a 	srli	r7,r9,8
    acf4:	013fffc4 	movi	r4,-1
    acf8:	118cb03a 	or	r6,r2,r6
    acfc:	01400434 	movhi	r5,16
    ad00:	297fffc4 	addi	r5,r5,-1
    ad04:	3104703a 	and	r2,r6,r4
    ad08:	3946703a 	and	r3,r7,r5
    ad0c:	5201ffcc 	andi	r8,r10,2047
    ad10:	100d883a 	mov	r6,r2
    ad14:	180f883a 	mov	r7,r3
    ad18:	003fc706 	br	ac38 <__pack_d+0x50>
    ad1c:	480897fa 	slli	r4,r9,31
    ad20:	4004d07a 	srli	r2,r8,1
    ad24:	4806d07a 	srli	r3,r9,1
    ad28:	52800044 	addi	r10,r10,1
    ad2c:	2084b03a 	or	r2,r4,r2
    ad30:	1011883a 	mov	r8,r2
    ad34:	1813883a 	mov	r9,r3
    ad38:	003feb06 	br	ace8 <__pack_d+0x100>
    ad3c:	383fe11e 	bne	r7,zero,acc4 <__pack_d+0xdc>
    ad40:	01004004 	movi	r4,256
    ad44:	4104703a 	and	r2,r8,r4
    ad48:	10c4b03a 	or	r2,r2,r3
    ad4c:	103fe326 	beq	r2,zero,acdc <__pack_d+0xf4>
    ad50:	3005883a 	mov	r2,r6
    ad54:	003fdc06 	br	acc8 <__pack_d+0xe0>
    ad58:	000d883a 	mov	r6,zero
    ad5c:	000f883a 	mov	r7,zero
    ad60:	0201ffc4 	movi	r8,2047
    ad64:	003fb406 	br	ac38 <__pack_d+0x50>
    ad68:	0005883a 	mov	r2,zero
    ad6c:	00c00234 	movhi	r3,8
    ad70:	408cb03a 	or	r6,r8,r2
    ad74:	48ceb03a 	or	r7,r9,r3
    ad78:	013fffc4 	movi	r4,-1
    ad7c:	01400434 	movhi	r5,16
    ad80:	297fffc4 	addi	r5,r5,-1
    ad84:	3104703a 	and	r2,r6,r4
    ad88:	3946703a 	and	r3,r7,r5
    ad8c:	100d883a 	mov	r6,r2
    ad90:	180f883a 	mov	r7,r3
    ad94:	0201ffc4 	movi	r8,2047
    ad98:	003fa706 	br	ac38 <__pack_d+0x50>
    ad9c:	1109c83a 	sub	r4,r2,r4
    ada0:	00800e04 	movi	r2,56
    ada4:	11004316 	blt	r2,r4,aeb4 <__pack_d+0x2cc>
    ada8:	21fff804 	addi	r7,r4,-32
    adac:	38004516 	blt	r7,zero,aec4 <__pack_d+0x2dc>
    adb0:	49d8d83a 	srl	r12,r9,r7
    adb4:	001b883a 	mov	r13,zero
    adb8:	0023883a 	mov	r17,zero
    adbc:	01400044 	movi	r5,1
    adc0:	0025883a 	mov	r18,zero
    adc4:	38004716 	blt	r7,zero,aee4 <__pack_d+0x2fc>
    adc8:	29d6983a 	sll	r11,r5,r7
    adcc:	0015883a 	mov	r10,zero
    add0:	00bfffc4 	movi	r2,-1
    add4:	5089883a 	add	r4,r10,r2
    add8:	588b883a 	add	r5,r11,r2
    addc:	228d803a 	cmpltu	r6,r4,r10
    ade0:	314b883a 	add	r5,r6,r5
    ade4:	4104703a 	and	r2,r8,r4
    ade8:	4946703a 	and	r3,r9,r5
    adec:	10c4b03a 	or	r2,r2,r3
    adf0:	10000226 	beq	r2,zero,adfc <__pack_d+0x214>
    adf4:	04400044 	movi	r17,1
    adf8:	0025883a 	mov	r18,zero
    adfc:	00803fc4 	movi	r2,255
    ae00:	644eb03a 	or	r7,r12,r17
    ae04:	3892703a 	and	r9,r7,r2
    ae08:	00802004 	movi	r2,128
    ae0c:	6c90b03a 	or	r8,r13,r18
    ae10:	0015883a 	mov	r10,zero
    ae14:	48801626 	beq	r9,r2,ae70 <__pack_d+0x288>
    ae18:	01001fc4 	movi	r4,127
    ae1c:	3905883a 	add	r2,r7,r4
    ae20:	11cd803a 	cmpltu	r6,r2,r7
    ae24:	320d883a 	add	r6,r6,r8
    ae28:	100f883a 	mov	r7,r2
    ae2c:	00840034 	movhi	r2,4096
    ae30:	10bfffc4 	addi	r2,r2,-1
    ae34:	3011883a 	mov	r8,r6
    ae38:	0007883a 	mov	r3,zero
    ae3c:	11801b36 	bltu	r2,r6,aeac <__pack_d+0x2c4>
    ae40:	4004963a 	slli	r2,r8,24
    ae44:	3808d23a 	srli	r4,r7,8
    ae48:	400ad23a 	srli	r5,r8,8
    ae4c:	1813883a 	mov	r9,r3
    ae50:	1108b03a 	or	r4,r2,r4
    ae54:	00bfffc4 	movi	r2,-1
    ae58:	00c00434 	movhi	r3,16
    ae5c:	18ffffc4 	addi	r3,r3,-1
    ae60:	208c703a 	and	r6,r4,r2
    ae64:	28ce703a 	and	r7,r5,r3
    ae68:	4a01ffcc 	andi	r8,r9,2047
    ae6c:	003f7206 	br	ac38 <__pack_d+0x50>
    ae70:	503fe91e 	bne	r10,zero,ae18 <__pack_d+0x230>
    ae74:	01004004 	movi	r4,256
    ae78:	3904703a 	and	r2,r7,r4
    ae7c:	0007883a 	mov	r3,zero
    ae80:	10c4b03a 	or	r2,r2,r3
    ae84:	10000626 	beq	r2,zero,aea0 <__pack_d+0x2b8>
    ae88:	3a45883a 	add	r2,r7,r9
    ae8c:	11cd803a 	cmpltu	r6,r2,r7
    ae90:	320d883a 	add	r6,r6,r8
    ae94:	100f883a 	mov	r7,r2
    ae98:	3011883a 	mov	r8,r6
    ae9c:	0007883a 	mov	r3,zero
    aea0:	00840034 	movhi	r2,4096
    aea4:	10bfffc4 	addi	r2,r2,-1
    aea8:	123fe52e 	bgeu	r2,r8,ae40 <__pack_d+0x258>
    aeac:	00c00044 	movi	r3,1
    aeb0:	003fe306 	br	ae40 <__pack_d+0x258>
    aeb4:	0009883a 	mov	r4,zero
    aeb8:	0013883a 	mov	r9,zero
    aebc:	000b883a 	mov	r5,zero
    aec0:	003fe406 	br	ae54 <__pack_d+0x26c>
    aec4:	4a47883a 	add	r3,r9,r9
    aec8:	008007c4 	movi	r2,31
    aecc:	1105c83a 	sub	r2,r2,r4
    aed0:	1886983a 	sll	r3,r3,r2
    aed4:	4118d83a 	srl	r12,r8,r4
    aed8:	491ad83a 	srl	r13,r9,r4
    aedc:	1b18b03a 	or	r12,r3,r12
    aee0:	003fb506 	br	adb8 <__pack_d+0x1d0>
    aee4:	2806d07a 	srli	r3,r5,1
    aee8:	008007c4 	movi	r2,31
    aeec:	1105c83a 	sub	r2,r2,r4
    aef0:	1896d83a 	srl	r11,r3,r2
    aef4:	2914983a 	sll	r10,r5,r4
    aef8:	003fb506 	br	add0 <__pack_d+0x1e8>

0000aefc <__unpack_d>:
    aefc:	20c00117 	ldw	r3,4(r4)
    af00:	22400017 	ldw	r9,0(r4)
    af04:	00800434 	movhi	r2,16
    af08:	10bfffc4 	addi	r2,r2,-1
    af0c:	1808d53a 	srli	r4,r3,20
    af10:	180cd7fa 	srli	r6,r3,31
    af14:	1894703a 	and	r10,r3,r2
    af18:	2201ffcc 	andi	r8,r4,2047
    af1c:	281b883a 	mov	r13,r5
    af20:	4817883a 	mov	r11,r9
    af24:	29800115 	stw	r6,4(r5)
    af28:	5019883a 	mov	r12,r10
    af2c:	40001e1e 	bne	r8,zero,afa8 <__unpack_d+0xac>
    af30:	4a84b03a 	or	r2,r9,r10
    af34:	10001926 	beq	r2,zero,af9c <__unpack_d+0xa0>
    af38:	4804d63a 	srli	r2,r9,24
    af3c:	500c923a 	slli	r6,r10,8
    af40:	013f0084 	movi	r4,-1022
    af44:	00c40034 	movhi	r3,4096
    af48:	18ffffc4 	addi	r3,r3,-1
    af4c:	118cb03a 	or	r6,r2,r6
    af50:	008000c4 	movi	r2,3
    af54:	480a923a 	slli	r5,r9,8
    af58:	68800015 	stw	r2,0(r13)
    af5c:	69000215 	stw	r4,8(r13)
    af60:	19800b36 	bltu	r3,r6,af90 <__unpack_d+0x94>
    af64:	200f883a 	mov	r7,r4
    af68:	1811883a 	mov	r8,r3
    af6c:	2945883a 	add	r2,r5,r5
    af70:	1149803a 	cmpltu	r4,r2,r5
    af74:	3187883a 	add	r3,r6,r6
    af78:	20c9883a 	add	r4,r4,r3
    af7c:	100b883a 	mov	r5,r2
    af80:	200d883a 	mov	r6,r4
    af84:	39ffffc4 	addi	r7,r7,-1
    af88:	413ff82e 	bgeu	r8,r4,af6c <__unpack_d+0x70>
    af8c:	69c00215 	stw	r7,8(r13)
    af90:	69800415 	stw	r6,16(r13)
    af94:	69400315 	stw	r5,12(r13)
    af98:	f800283a 	ret
    af9c:	00800084 	movi	r2,2
    afa0:	28800015 	stw	r2,0(r5)
    afa4:	f800283a 	ret
    afa8:	0081ffc4 	movi	r2,2047
    afac:	40800f26 	beq	r8,r2,afec <__unpack_d+0xf0>
    afb0:	480cd63a 	srli	r6,r9,24
    afb4:	5006923a 	slli	r3,r10,8
    afb8:	4804923a 	slli	r2,r9,8
    afbc:	0009883a 	mov	r4,zero
    afc0:	30c6b03a 	or	r3,r6,r3
    afc4:	01440034 	movhi	r5,4096
    afc8:	110cb03a 	or	r6,r2,r4
    afcc:	423f0044 	addi	r8,r8,-1023
    afd0:	194eb03a 	or	r7,r3,r5
    afd4:	008000c4 	movi	r2,3
    afd8:	69c00415 	stw	r7,16(r13)
    afdc:	6a000215 	stw	r8,8(r13)
    afe0:	68800015 	stw	r2,0(r13)
    afe4:	69800315 	stw	r6,12(r13)
    afe8:	f800283a 	ret
    afec:	4a84b03a 	or	r2,r9,r10
    aff0:	1000031e 	bne	r2,zero,b000 <__unpack_d+0x104>
    aff4:	00800104 	movi	r2,4
    aff8:	28800015 	stw	r2,0(r5)
    affc:	f800283a 	ret
    b000:	0009883a 	mov	r4,zero
    b004:	01400234 	movhi	r5,8
    b008:	4904703a 	and	r2,r9,r4
    b00c:	5146703a 	and	r3,r10,r5
    b010:	10c4b03a 	or	r2,r2,r3
    b014:	10000526 	beq	r2,zero,b02c <__unpack_d+0x130>
    b018:	00800044 	movi	r2,1
    b01c:	68800015 	stw	r2,0(r13)
    b020:	6b000415 	stw	r12,16(r13)
    b024:	6ac00315 	stw	r11,12(r13)
    b028:	f800283a 	ret
    b02c:	68000015 	stw	zero,0(r13)
    b030:	003ffb06 	br	b020 <__unpack_d+0x124>

0000b034 <__fpcmp_parts_d>:
    b034:	21800017 	ldw	r6,0(r4)
    b038:	00c00044 	movi	r3,1
    b03c:	19800a2e 	bgeu	r3,r6,b068 <__fpcmp_parts_d+0x34>
    b040:	28800017 	ldw	r2,0(r5)
    b044:	1880082e 	bgeu	r3,r2,b068 <__fpcmp_parts_d+0x34>
    b048:	00c00104 	movi	r3,4
    b04c:	30c02626 	beq	r6,r3,b0e8 <__fpcmp_parts_d+0xb4>
    b050:	10c02226 	beq	r2,r3,b0dc <__fpcmp_parts_d+0xa8>
    b054:	00c00084 	movi	r3,2
    b058:	30c00526 	beq	r6,r3,b070 <__fpcmp_parts_d+0x3c>
    b05c:	10c0071e 	bne	r2,r3,b07c <__fpcmp_parts_d+0x48>
    b060:	20800117 	ldw	r2,4(r4)
    b064:	1000091e 	bne	r2,zero,b08c <__fpcmp_parts_d+0x58>
    b068:	00800044 	movi	r2,1
    b06c:	f800283a 	ret
    b070:	10c01a1e 	bne	r2,r3,b0dc <__fpcmp_parts_d+0xa8>
    b074:	0005883a 	mov	r2,zero
    b078:	f800283a 	ret
    b07c:	22000117 	ldw	r8,4(r4)
    b080:	28800117 	ldw	r2,4(r5)
    b084:	40800326 	beq	r8,r2,b094 <__fpcmp_parts_d+0x60>
    b088:	403ff726 	beq	r8,zero,b068 <__fpcmp_parts_d+0x34>
    b08c:	00bfffc4 	movi	r2,-1
    b090:	f800283a 	ret
    b094:	20c00217 	ldw	r3,8(r4)
    b098:	28800217 	ldw	r2,8(r5)
    b09c:	10fffa16 	blt	r2,r3,b088 <__fpcmp_parts_d+0x54>
    b0a0:	18800916 	blt	r3,r2,b0c8 <__fpcmp_parts_d+0x94>
    b0a4:	21c00417 	ldw	r7,16(r4)
    b0a8:	28c00417 	ldw	r3,16(r5)
    b0ac:	21800317 	ldw	r6,12(r4)
    b0b0:	28800317 	ldw	r2,12(r5)
    b0b4:	19fff436 	bltu	r3,r7,b088 <__fpcmp_parts_d+0x54>
    b0b8:	38c00526 	beq	r7,r3,b0d0 <__fpcmp_parts_d+0x9c>
    b0bc:	38c00236 	bltu	r7,r3,b0c8 <__fpcmp_parts_d+0x94>
    b0c0:	19ffec1e 	bne	r3,r7,b074 <__fpcmp_parts_d+0x40>
    b0c4:	30bfeb2e 	bgeu	r6,r2,b074 <__fpcmp_parts_d+0x40>
    b0c8:	403fe71e 	bne	r8,zero,b068 <__fpcmp_parts_d+0x34>
    b0cc:	003fef06 	br	b08c <__fpcmp_parts_d+0x58>
    b0d0:	11bffa2e 	bgeu	r2,r6,b0bc <__fpcmp_parts_d+0x88>
    b0d4:	403fe426 	beq	r8,zero,b068 <__fpcmp_parts_d+0x34>
    b0d8:	003fec06 	br	b08c <__fpcmp_parts_d+0x58>
    b0dc:	28800117 	ldw	r2,4(r5)
    b0e0:	103fe11e 	bne	r2,zero,b068 <__fpcmp_parts_d+0x34>
    b0e4:	003fe906 	br	b08c <__fpcmp_parts_d+0x58>
    b0e8:	11bfdd1e 	bne	r2,r6,b060 <__fpcmp_parts_d+0x2c>
    b0ec:	28c00117 	ldw	r3,4(r5)
    b0f0:	20800117 	ldw	r2,4(r4)
    b0f4:	1885c83a 	sub	r2,r3,r2
    b0f8:	f800283a 	ret

0000b0fc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b0fc:	defff804 	addi	sp,sp,-32
    b100:	dfc00715 	stw	ra,28(sp)
    b104:	df000615 	stw	fp,24(sp)
    b108:	df000604 	addi	fp,sp,24
    b10c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b110:	e0bffc17 	ldw	r2,-16(fp)
    b114:	1004803a 	cmplt	r2,r2,zero
    b118:	1000081e 	bne	r2,zero,b13c <close+0x40>
    b11c:	e0bffc17 	ldw	r2,-16(fp)
    b120:	10800324 	muli	r2,r2,12
    b124:	1007883a 	mov	r3,r2
    b128:	00800074 	movhi	r2,1
    b12c:	10807804 	addi	r2,r2,480
    b130:	1887883a 	add	r3,r3,r2
    b134:	e0ffff15 	stw	r3,-4(fp)
    b138:	00000106 	br	b140 <close+0x44>
    b13c:	e03fff15 	stw	zero,-4(fp)
    b140:	e0bfff17 	ldw	r2,-4(fp)
    b144:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b148:	e0bffb17 	ldw	r2,-20(fp)
    b14c:	1005003a 	cmpeq	r2,r2,zero
    b150:	10001d1e 	bne	r2,zero,b1c8 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b154:	e0bffb17 	ldw	r2,-20(fp)
    b158:	10800017 	ldw	r2,0(r2)
    b15c:	10800417 	ldw	r2,16(r2)
    b160:	1005003a 	cmpeq	r2,r2,zero
    b164:	1000071e 	bne	r2,zero,b184 <close+0x88>
    b168:	e0bffb17 	ldw	r2,-20(fp)
    b16c:	10800017 	ldw	r2,0(r2)
    b170:	10800417 	ldw	r2,16(r2)
    b174:	e13ffb17 	ldw	r4,-20(fp)
    b178:	103ee83a 	callr	r2
    b17c:	e0bffe15 	stw	r2,-8(fp)
    b180:	00000106 	br	b188 <close+0x8c>
    b184:	e03ffe15 	stw	zero,-8(fp)
    b188:	e0bffe17 	ldw	r2,-8(fp)
    b18c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b190:	e13ffc17 	ldw	r4,-16(fp)
    b194:	000b9400 	call	b940 <alt_release_fd>
    if (rval < 0)
    b198:	e0bffa17 	ldw	r2,-24(fp)
    b19c:	1004403a 	cmpge	r2,r2,zero
    b1a0:	1000071e 	bne	r2,zero,b1c0 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    b1a4:	000b1f80 	call	b1f8 <alt_get_errno>
    b1a8:	e0fffa17 	ldw	r3,-24(fp)
    b1ac:	00c7c83a 	sub	r3,zero,r3
    b1b0:	10c00015 	stw	r3,0(r2)
      return -1;
    b1b4:	00bfffc4 	movi	r2,-1
    b1b8:	e0bffd15 	stw	r2,-12(fp)
    b1bc:	00000806 	br	b1e0 <close+0xe4>
    }
    return 0;
    b1c0:	e03ffd15 	stw	zero,-12(fp)
    b1c4:	00000606 	br	b1e0 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b1c8:	000b1f80 	call	b1f8 <alt_get_errno>
    b1cc:	1007883a 	mov	r3,r2
    b1d0:	00801444 	movi	r2,81
    b1d4:	18800015 	stw	r2,0(r3)
    return -1;
    b1d8:	00bfffc4 	movi	r2,-1
    b1dc:	e0bffd15 	stw	r2,-12(fp)
    b1e0:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b1e4:	e037883a 	mov	sp,fp
    b1e8:	dfc00117 	ldw	ra,4(sp)
    b1ec:	df000017 	ldw	fp,0(sp)
    b1f0:	dec00204 	addi	sp,sp,8
    b1f4:	f800283a 	ret

0000b1f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b1f8:	defffd04 	addi	sp,sp,-12
    b1fc:	dfc00215 	stw	ra,8(sp)
    b200:	df000115 	stw	fp,4(sp)
    b204:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b208:	00800074 	movhi	r2,1
    b20c:	10854304 	addi	r2,r2,5388
    b210:	10800017 	ldw	r2,0(r2)
    b214:	1005003a 	cmpeq	r2,r2,zero
    b218:	1000061e 	bne	r2,zero,b234 <alt_get_errno+0x3c>
    b21c:	00800074 	movhi	r2,1
    b220:	10854304 	addi	r2,r2,5388
    b224:	10800017 	ldw	r2,0(r2)
    b228:	103ee83a 	callr	r2
    b22c:	e0bfff15 	stw	r2,-4(fp)
    b230:	00000306 	br	b240 <alt_get_errno+0x48>
    b234:	00800074 	movhi	r2,1
    b238:	108c9904 	addi	r2,r2,12900
    b23c:	e0bfff15 	stw	r2,-4(fp)
    b240:	e0bfff17 	ldw	r2,-4(fp)
}
    b244:	e037883a 	mov	sp,fp
    b248:	dfc00117 	ldw	ra,4(sp)
    b24c:	df000017 	ldw	fp,0(sp)
    b250:	dec00204 	addi	sp,sp,8
    b254:	f800283a 	ret

0000b258 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b258:	defffc04 	addi	sp,sp,-16
    b25c:	df000315 	stw	fp,12(sp)
    b260:	df000304 	addi	fp,sp,12
    b264:	e13ffd15 	stw	r4,-12(fp)
    b268:	e17ffe15 	stw	r5,-8(fp)
    b26c:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b270:	e0bfff17 	ldw	r2,-4(fp)
}
    b274:	e037883a 	mov	sp,fp
    b278:	df000017 	ldw	fp,0(sp)
    b27c:	dec00104 	addi	sp,sp,4
    b280:	f800283a 	ret

0000b284 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b284:	defff904 	addi	sp,sp,-28
    b288:	dfc00615 	stw	ra,24(sp)
    b28c:	df000515 	stw	fp,20(sp)
    b290:	df000504 	addi	fp,sp,20
    b294:	e13ffc15 	stw	r4,-16(fp)
    b298:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b29c:	e0bffc17 	ldw	r2,-16(fp)
    b2a0:	1004803a 	cmplt	r2,r2,zero
    b2a4:	1000081e 	bne	r2,zero,b2c8 <fstat+0x44>
    b2a8:	e0bffc17 	ldw	r2,-16(fp)
    b2ac:	10800324 	muli	r2,r2,12
    b2b0:	1007883a 	mov	r3,r2
    b2b4:	00800074 	movhi	r2,1
    b2b8:	10807804 	addi	r2,r2,480
    b2bc:	1887883a 	add	r3,r3,r2
    b2c0:	e0ffff15 	stw	r3,-4(fp)
    b2c4:	00000106 	br	b2cc <fstat+0x48>
    b2c8:	e03fff15 	stw	zero,-4(fp)
    b2cc:	e0bfff17 	ldw	r2,-4(fp)
    b2d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b2d4:	e0bffb17 	ldw	r2,-20(fp)
    b2d8:	1005003a 	cmpeq	r2,r2,zero
    b2dc:	1000121e 	bne	r2,zero,b328 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b2e0:	e0bffb17 	ldw	r2,-20(fp)
    b2e4:	10800017 	ldw	r2,0(r2)
    b2e8:	10800817 	ldw	r2,32(r2)
    b2ec:	1005003a 	cmpeq	r2,r2,zero
    b2f0:	1000081e 	bne	r2,zero,b314 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b2f4:	e0bffb17 	ldw	r2,-20(fp)
    b2f8:	10800017 	ldw	r2,0(r2)
    b2fc:	10800817 	ldw	r2,32(r2)
    b300:	e13ffb17 	ldw	r4,-20(fp)
    b304:	e17ffd17 	ldw	r5,-12(fp)
    b308:	103ee83a 	callr	r2
    b30c:	e0bffe15 	stw	r2,-8(fp)
    b310:	00000b06 	br	b340 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b314:	e0fffd17 	ldw	r3,-12(fp)
    b318:	00880004 	movi	r2,8192
    b31c:	18800115 	stw	r2,4(r3)
      return 0;
    b320:	e03ffe15 	stw	zero,-8(fp)
    b324:	00000606 	br	b340 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b328:	000b3580 	call	b358 <alt_get_errno>
    b32c:	1007883a 	mov	r3,r2
    b330:	00801444 	movi	r2,81
    b334:	18800015 	stw	r2,0(r3)
    return -1;
    b338:	00bfffc4 	movi	r2,-1
    b33c:	e0bffe15 	stw	r2,-8(fp)
    b340:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b344:	e037883a 	mov	sp,fp
    b348:	dfc00117 	ldw	ra,4(sp)
    b34c:	df000017 	ldw	fp,0(sp)
    b350:	dec00204 	addi	sp,sp,8
    b354:	f800283a 	ret

0000b358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b358:	defffd04 	addi	sp,sp,-12
    b35c:	dfc00215 	stw	ra,8(sp)
    b360:	df000115 	stw	fp,4(sp)
    b364:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b368:	00800074 	movhi	r2,1
    b36c:	10854304 	addi	r2,r2,5388
    b370:	10800017 	ldw	r2,0(r2)
    b374:	1005003a 	cmpeq	r2,r2,zero
    b378:	1000061e 	bne	r2,zero,b394 <alt_get_errno+0x3c>
    b37c:	00800074 	movhi	r2,1
    b380:	10854304 	addi	r2,r2,5388
    b384:	10800017 	ldw	r2,0(r2)
    b388:	103ee83a 	callr	r2
    b38c:	e0bfff15 	stw	r2,-4(fp)
    b390:	00000306 	br	b3a0 <alt_get_errno+0x48>
    b394:	00800074 	movhi	r2,1
    b398:	108c9904 	addi	r2,r2,12900
    b39c:	e0bfff15 	stw	r2,-4(fp)
    b3a0:	e0bfff17 	ldw	r2,-4(fp)
}
    b3a4:	e037883a 	mov	sp,fp
    b3a8:	dfc00117 	ldw	ra,4(sp)
    b3ac:	df000017 	ldw	fp,0(sp)
    b3b0:	dec00204 	addi	sp,sp,8
    b3b4:	f800283a 	ret

0000b3b8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b3b8:	deffeb04 	addi	sp,sp,-84
    b3bc:	dfc01415 	stw	ra,80(sp)
    b3c0:	df001315 	stw	fp,76(sp)
    b3c4:	df001304 	addi	fp,sp,76
    b3c8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b3cc:	e0bffd17 	ldw	r2,-12(fp)
    b3d0:	1004803a 	cmplt	r2,r2,zero
    b3d4:	1000081e 	bne	r2,zero,b3f8 <isatty+0x40>
    b3d8:	e0bffd17 	ldw	r2,-12(fp)
    b3dc:	10800324 	muli	r2,r2,12
    b3e0:	1007883a 	mov	r3,r2
    b3e4:	00800074 	movhi	r2,1
    b3e8:	10807804 	addi	r2,r2,480
    b3ec:	1887883a 	add	r3,r3,r2
    b3f0:	e0ffff15 	stw	r3,-4(fp)
    b3f4:	00000106 	br	b3fc <isatty+0x44>
    b3f8:	e03fff15 	stw	zero,-4(fp)
    b3fc:	e0bfff17 	ldw	r2,-4(fp)
    b400:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b404:	e0bfed17 	ldw	r2,-76(fp)
    b408:	1005003a 	cmpeq	r2,r2,zero
    b40c:	10000f1e 	bne	r2,zero,b44c <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b410:	e0bfed17 	ldw	r2,-76(fp)
    b414:	10800017 	ldw	r2,0(r2)
    b418:	10800817 	ldw	r2,32(r2)
    b41c:	1004c03a 	cmpne	r2,r2,zero
    b420:	1000031e 	bne	r2,zero,b430 <isatty+0x78>
    {
      return 1;
    b424:	00800044 	movi	r2,1
    b428:	e0bffe15 	stw	r2,-8(fp)
    b42c:	00000c06 	br	b460 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b430:	e17fee04 	addi	r5,fp,-72
    b434:	e13ffd17 	ldw	r4,-12(fp)
    b438:	000b2840 	call	b284 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b43c:	e0bfef17 	ldw	r2,-68(fp)
    b440:	10880020 	cmpeqi	r2,r2,8192
    b444:	e0bffe15 	stw	r2,-8(fp)
    b448:	00000506 	br	b460 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b44c:	000b4780 	call	b478 <alt_get_errno>
    b450:	1007883a 	mov	r3,r2
    b454:	00801444 	movi	r2,81
    b458:	18800015 	stw	r2,0(r3)
    return 0;
    b45c:	e03ffe15 	stw	zero,-8(fp)
    b460:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b464:	e037883a 	mov	sp,fp
    b468:	dfc00117 	ldw	ra,4(sp)
    b46c:	df000017 	ldw	fp,0(sp)
    b470:	dec00204 	addi	sp,sp,8
    b474:	f800283a 	ret

0000b478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b478:	defffd04 	addi	sp,sp,-12
    b47c:	dfc00215 	stw	ra,8(sp)
    b480:	df000115 	stw	fp,4(sp)
    b484:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b488:	00800074 	movhi	r2,1
    b48c:	10854304 	addi	r2,r2,5388
    b490:	10800017 	ldw	r2,0(r2)
    b494:	1005003a 	cmpeq	r2,r2,zero
    b498:	1000061e 	bne	r2,zero,b4b4 <alt_get_errno+0x3c>
    b49c:	00800074 	movhi	r2,1
    b4a0:	10854304 	addi	r2,r2,5388
    b4a4:	10800017 	ldw	r2,0(r2)
    b4a8:	103ee83a 	callr	r2
    b4ac:	e0bfff15 	stw	r2,-4(fp)
    b4b0:	00000306 	br	b4c0 <alt_get_errno+0x48>
    b4b4:	00800074 	movhi	r2,1
    b4b8:	108c9904 	addi	r2,r2,12900
    b4bc:	e0bfff15 	stw	r2,-4(fp)
    b4c0:	e0bfff17 	ldw	r2,-4(fp)
}
    b4c4:	e037883a 	mov	sp,fp
    b4c8:	dfc00117 	ldw	ra,4(sp)
    b4cc:	df000017 	ldw	fp,0(sp)
    b4d0:	dec00204 	addi	sp,sp,8
    b4d4:	f800283a 	ret

0000b4d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b4d8:	defffe04 	addi	sp,sp,-8
    b4dc:	dfc00115 	stw	ra,4(sp)
    b4e0:	df000015 	stw	fp,0(sp)
    b4e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b4e8:	01000074 	movhi	r4,1
    b4ec:	21054a04 	addi	r4,r4,5416
    b4f0:	01400074 	movhi	r5,1
    b4f4:	297e0004 	addi	r5,r5,-2048
    b4f8:	01800074 	movhi	r6,1
    b4fc:	31854a04 	addi	r6,r6,5416
    b500:	000b5580 	call	b558 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b504:	01000034 	movhi	r4,0
    b508:	21000804 	addi	r4,r4,32
    b50c:	01400034 	movhi	r5,0
    b510:	29400804 	addi	r5,r5,32
    b514:	01800034 	movhi	r6,0
    b518:	31806d04 	addi	r6,r6,436
    b51c:	000b5580 	call	b558 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b520:	01000074 	movhi	r4,1
    b524:	213b2804 	addi	r4,r4,-4960
    b528:	01400074 	movhi	r5,1
    b52c:	297b2804 	addi	r5,r5,-4960
    b530:	01800074 	movhi	r6,1
    b534:	31be0004 	addi	r6,r6,-2048
    b538:	000b5580 	call	b558 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b53c:	000dc180 	call	dc18 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b540:	000de100 	call	de10 <alt_icache_flush_all>
}
    b544:	e037883a 	mov	sp,fp
    b548:	dfc00117 	ldw	ra,4(sp)
    b54c:	df000017 	ldw	fp,0(sp)
    b550:	dec00204 	addi	sp,sp,8
    b554:	f800283a 	ret

0000b558 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b558:	defffc04 	addi	sp,sp,-16
    b55c:	df000315 	stw	fp,12(sp)
    b560:	df000304 	addi	fp,sp,12
    b564:	e13ffd15 	stw	r4,-12(fp)
    b568:	e17ffe15 	stw	r5,-8(fp)
    b56c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b570:	e0fffe17 	ldw	r3,-8(fp)
    b574:	e0bffd17 	ldw	r2,-12(fp)
    b578:	18800e26 	beq	r3,r2,b5b4 <alt_load_section+0x5c>
  {
    while( to != end )
    b57c:	00000a06 	br	b5a8 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b580:	e0bffd17 	ldw	r2,-12(fp)
    b584:	10c00017 	ldw	r3,0(r2)
    b588:	e0bffe17 	ldw	r2,-8(fp)
    b58c:	10c00015 	stw	r3,0(r2)
    b590:	e0bffe17 	ldw	r2,-8(fp)
    b594:	10800104 	addi	r2,r2,4
    b598:	e0bffe15 	stw	r2,-8(fp)
    b59c:	e0bffd17 	ldw	r2,-12(fp)
    b5a0:	10800104 	addi	r2,r2,4
    b5a4:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b5a8:	e0fffe17 	ldw	r3,-8(fp)
    b5ac:	e0bfff17 	ldw	r2,-4(fp)
    b5b0:	18bff31e 	bne	r3,r2,b580 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b5b4:	e037883a 	mov	sp,fp
    b5b8:	df000017 	ldw	fp,0(sp)
    b5bc:	dec00104 	addi	sp,sp,4
    b5c0:	f800283a 	ret

0000b5c4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b5c4:	defff804 	addi	sp,sp,-32
    b5c8:	dfc00715 	stw	ra,28(sp)
    b5cc:	df000615 	stw	fp,24(sp)
    b5d0:	df000604 	addi	fp,sp,24
    b5d4:	e13ffc15 	stw	r4,-16(fp)
    b5d8:	e17ffd15 	stw	r5,-12(fp)
    b5dc:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b5e0:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b5e4:	e0bffc17 	ldw	r2,-16(fp)
    b5e8:	1004803a 	cmplt	r2,r2,zero
    b5ec:	1000081e 	bne	r2,zero,b610 <lseek+0x4c>
    b5f0:	e0bffc17 	ldw	r2,-16(fp)
    b5f4:	10800324 	muli	r2,r2,12
    b5f8:	1007883a 	mov	r3,r2
    b5fc:	00800074 	movhi	r2,1
    b600:	10807804 	addi	r2,r2,480
    b604:	1887883a 	add	r3,r3,r2
    b608:	e0ffff15 	stw	r3,-4(fp)
    b60c:	00000106 	br	b614 <lseek+0x50>
    b610:	e03fff15 	stw	zero,-4(fp)
    b614:	e0bfff17 	ldw	r2,-4(fp)
    b618:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b61c:	e0bffb17 	ldw	r2,-20(fp)
    b620:	1005003a 	cmpeq	r2,r2,zero
    b624:	1000111e 	bne	r2,zero,b66c <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b628:	e0bffb17 	ldw	r2,-20(fp)
    b62c:	10800017 	ldw	r2,0(r2)
    b630:	10800717 	ldw	r2,28(r2)
    b634:	1005003a 	cmpeq	r2,r2,zero
    b638:	1000091e 	bne	r2,zero,b660 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b63c:	e0bffb17 	ldw	r2,-20(fp)
    b640:	10800017 	ldw	r2,0(r2)
    b644:	10800717 	ldw	r2,28(r2)
    b648:	e13ffb17 	ldw	r4,-20(fp)
    b64c:	e17ffd17 	ldw	r5,-12(fp)
    b650:	e1bffe17 	ldw	r6,-8(fp)
    b654:	103ee83a 	callr	r2
    b658:	e0bffa15 	stw	r2,-24(fp)
    b65c:	00000506 	br	b674 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b660:	00bfde84 	movi	r2,-134
    b664:	e0bffa15 	stw	r2,-24(fp)
    b668:	00000206 	br	b674 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b66c:	00bfebc4 	movi	r2,-81
    b670:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b674:	e0bffa17 	ldw	r2,-24(fp)
    b678:	1004403a 	cmpge	r2,r2,zero
    b67c:	1000071e 	bne	r2,zero,b69c <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    b680:	000b6b40 	call	b6b4 <alt_get_errno>
    b684:	1007883a 	mov	r3,r2
    b688:	e0bffa17 	ldw	r2,-24(fp)
    b68c:	0085c83a 	sub	r2,zero,r2
    b690:	18800015 	stw	r2,0(r3)
    rc = -1;
    b694:	00bfffc4 	movi	r2,-1
    b698:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b69c:	e0bffa17 	ldw	r2,-24(fp)
}
    b6a0:	e037883a 	mov	sp,fp
    b6a4:	dfc00117 	ldw	ra,4(sp)
    b6a8:	df000017 	ldw	fp,0(sp)
    b6ac:	dec00204 	addi	sp,sp,8
    b6b0:	f800283a 	ret

0000b6b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6b4:	defffd04 	addi	sp,sp,-12
    b6b8:	dfc00215 	stw	ra,8(sp)
    b6bc:	df000115 	stw	fp,4(sp)
    b6c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b6c4:	00800074 	movhi	r2,1
    b6c8:	10854304 	addi	r2,r2,5388
    b6cc:	10800017 	ldw	r2,0(r2)
    b6d0:	1005003a 	cmpeq	r2,r2,zero
    b6d4:	1000061e 	bne	r2,zero,b6f0 <alt_get_errno+0x3c>
    b6d8:	00800074 	movhi	r2,1
    b6dc:	10854304 	addi	r2,r2,5388
    b6e0:	10800017 	ldw	r2,0(r2)
    b6e4:	103ee83a 	callr	r2
    b6e8:	e0bfff15 	stw	r2,-4(fp)
    b6ec:	00000306 	br	b6fc <alt_get_errno+0x48>
    b6f0:	00800074 	movhi	r2,1
    b6f4:	108c9904 	addi	r2,r2,12900
    b6f8:	e0bfff15 	stw	r2,-4(fp)
    b6fc:	e0bfff17 	ldw	r2,-4(fp)
}
    b700:	e037883a 	mov	sp,fp
    b704:	dfc00117 	ldw	ra,4(sp)
    b708:	df000017 	ldw	fp,0(sp)
    b70c:	dec00204 	addi	sp,sp,8
    b710:	f800283a 	ret

0000b714 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b714:	defffd04 	addi	sp,sp,-12
    b718:	dfc00215 	stw	ra,8(sp)
    b71c:	df000115 	stw	fp,4(sp)
    b720:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b724:	0009883a 	mov	r4,zero
    b728:	000bdb00 	call	bdb0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b72c:	000bde40 	call	bde4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b730:	01000074 	movhi	r4,1
    b734:	213d5004 	addi	r4,r4,-2752
    b738:	01400074 	movhi	r5,1
    b73c:	297d5004 	addi	r5,r5,-2752
    b740:	01800074 	movhi	r6,1
    b744:	31bd5004 	addi	r6,r6,-2752
    b748:	000e1d00 	call	e1d0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b74c:	000dd480 	call	dd48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b750:	01000074 	movhi	r4,1
    b754:	21376b04 	addi	r4,r4,-8788
    b758:	000e8280 	call	e828 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b75c:	d1276517 	ldw	r4,-25196(gp)
    b760:	d1676617 	ldw	r5,-25192(gp)
    b764:	d1a76717 	ldw	r6,-25188(gp)
    b768:	00018e40 	call	18e4 <main>
    b76c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b770:	01000044 	movi	r4,1
    b774:	000b0fc0 	call	b0fc <close>
  exit (result);
    b778:	e13fff17 	ldw	r4,-4(fp)
    b77c:	000e83c0 	call	e83c <exit>

0000b780 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b780:	defffe04 	addi	sp,sp,-8
    b784:	df000115 	stw	fp,4(sp)
    b788:	df000104 	addi	fp,sp,4
    b78c:	e13fff15 	stw	r4,-4(fp)
}
    b790:	e037883a 	mov	sp,fp
    b794:	df000017 	ldw	fp,0(sp)
    b798:	dec00104 	addi	sp,sp,4
    b79c:	f800283a 	ret

0000b7a0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b7a0:	defffe04 	addi	sp,sp,-8
    b7a4:	df000115 	stw	fp,4(sp)
    b7a8:	df000104 	addi	fp,sp,4
    b7ac:	e13fff15 	stw	r4,-4(fp)
}
    b7b0:	e037883a 	mov	sp,fp
    b7b4:	df000017 	ldw	fp,0(sp)
    b7b8:	dec00104 	addi	sp,sp,4
    b7bc:	f800283a 	ret

0000b7c0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b7c0:	defff704 	addi	sp,sp,-36
    b7c4:	dfc00815 	stw	ra,32(sp)
    b7c8:	df000715 	stw	fp,28(sp)
    b7cc:	df000704 	addi	fp,sp,28
    b7d0:	e13ffb15 	stw	r4,-20(fp)
    b7d4:	e17ffc15 	stw	r5,-16(fp)
    b7d8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b7dc:	e0bffb17 	ldw	r2,-20(fp)
    b7e0:	1004803a 	cmplt	r2,r2,zero
    b7e4:	1000081e 	bne	r2,zero,b808 <read+0x48>
    b7e8:	e0bffb17 	ldw	r2,-20(fp)
    b7ec:	10800324 	muli	r2,r2,12
    b7f0:	1007883a 	mov	r3,r2
    b7f4:	00800074 	movhi	r2,1
    b7f8:	10807804 	addi	r2,r2,480
    b7fc:	1887883a 	add	r3,r3,r2
    b800:	e0ffff15 	stw	r3,-4(fp)
    b804:	00000106 	br	b80c <read+0x4c>
    b808:	e03fff15 	stw	zero,-4(fp)
    b80c:	e0bfff17 	ldw	r2,-4(fp)
    b810:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b814:	e0bffa17 	ldw	r2,-24(fp)
    b818:	1005003a 	cmpeq	r2,r2,zero
    b81c:	1000241e 	bne	r2,zero,b8b0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b820:	e0bffa17 	ldw	r2,-24(fp)
    b824:	10800217 	ldw	r2,8(r2)
    b828:	108000cc 	andi	r2,r2,3
    b82c:	10800060 	cmpeqi	r2,r2,1
    b830:	10001a1e 	bne	r2,zero,b89c <read+0xdc>
    b834:	e0bffa17 	ldw	r2,-24(fp)
    b838:	10800017 	ldw	r2,0(r2)
    b83c:	10800517 	ldw	r2,20(r2)
    b840:	1005003a 	cmpeq	r2,r2,zero
    b844:	1000151e 	bne	r2,zero,b89c <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b848:	e0bffa17 	ldw	r2,-24(fp)
    b84c:	10800017 	ldw	r2,0(r2)
    b850:	10800517 	ldw	r2,20(r2)
    b854:	e17ffc17 	ldw	r5,-16(fp)
    b858:	e1bffd17 	ldw	r6,-12(fp)
    b85c:	e13ffa17 	ldw	r4,-24(fp)
    b860:	103ee83a 	callr	r2
    b864:	e0bff915 	stw	r2,-28(fp)
    b868:	e0bff917 	ldw	r2,-28(fp)
    b86c:	1004403a 	cmpge	r2,r2,zero
    b870:	1000071e 	bne	r2,zero,b890 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    b874:	000b8e00 	call	b8e0 <alt_get_errno>
    b878:	e0fff917 	ldw	r3,-28(fp)
    b87c:	00c7c83a 	sub	r3,zero,r3
    b880:	10c00015 	stw	r3,0(r2)
          return -1;
    b884:	00bfffc4 	movi	r2,-1
    b888:	e0bffe15 	stw	r2,-8(fp)
    b88c:	00000e06 	br	b8c8 <read+0x108>
        }
        return rval;
    b890:	e0bff917 	ldw	r2,-28(fp)
    b894:	e0bffe15 	stw	r2,-8(fp)
    b898:	00000b06 	br	b8c8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b89c:	000b8e00 	call	b8e0 <alt_get_errno>
    b8a0:	1007883a 	mov	r3,r2
    b8a4:	00800344 	movi	r2,13
    b8a8:	18800015 	stw	r2,0(r3)
    b8ac:	00000406 	br	b8c0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b8b0:	000b8e00 	call	b8e0 <alt_get_errno>
    b8b4:	1007883a 	mov	r3,r2
    b8b8:	00801444 	movi	r2,81
    b8bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b8c0:	00bfffc4 	movi	r2,-1
    b8c4:	e0bffe15 	stw	r2,-8(fp)
    b8c8:	e0bffe17 	ldw	r2,-8(fp)
}
    b8cc:	e037883a 	mov	sp,fp
    b8d0:	dfc00117 	ldw	ra,4(sp)
    b8d4:	df000017 	ldw	fp,0(sp)
    b8d8:	dec00204 	addi	sp,sp,8
    b8dc:	f800283a 	ret

0000b8e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b8e0:	defffd04 	addi	sp,sp,-12
    b8e4:	dfc00215 	stw	ra,8(sp)
    b8e8:	df000115 	stw	fp,4(sp)
    b8ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b8f0:	00800074 	movhi	r2,1
    b8f4:	10854304 	addi	r2,r2,5388
    b8f8:	10800017 	ldw	r2,0(r2)
    b8fc:	1005003a 	cmpeq	r2,r2,zero
    b900:	1000061e 	bne	r2,zero,b91c <alt_get_errno+0x3c>
    b904:	00800074 	movhi	r2,1
    b908:	10854304 	addi	r2,r2,5388
    b90c:	10800017 	ldw	r2,0(r2)
    b910:	103ee83a 	callr	r2
    b914:	e0bfff15 	stw	r2,-4(fp)
    b918:	00000306 	br	b928 <alt_get_errno+0x48>
    b91c:	00800074 	movhi	r2,1
    b920:	108c9904 	addi	r2,r2,12900
    b924:	e0bfff15 	stw	r2,-4(fp)
    b928:	e0bfff17 	ldw	r2,-4(fp)
}
    b92c:	e037883a 	mov	sp,fp
    b930:	dfc00117 	ldw	ra,4(sp)
    b934:	df000017 	ldw	fp,0(sp)
    b938:	dec00204 	addi	sp,sp,8
    b93c:	f800283a 	ret

0000b940 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b940:	defffe04 	addi	sp,sp,-8
    b944:	df000115 	stw	fp,4(sp)
    b948:	df000104 	addi	fp,sp,4
    b94c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b950:	e0bfff17 	ldw	r2,-4(fp)
    b954:	108000d0 	cmplti	r2,r2,3
    b958:	10000d1e 	bne	r2,zero,b990 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    b95c:	e0bfff17 	ldw	r2,-4(fp)
    b960:	00c00074 	movhi	r3,1
    b964:	18c07804 	addi	r3,r3,480
    b968:	10800324 	muli	r2,r2,12
    b96c:	10c5883a 	add	r2,r2,r3
    b970:	10800204 	addi	r2,r2,8
    b974:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b978:	e0bfff17 	ldw	r2,-4(fp)
    b97c:	00c00074 	movhi	r3,1
    b980:	18c07804 	addi	r3,r3,480
    b984:	10800324 	muli	r2,r2,12
    b988:	10c5883a 	add	r2,r2,r3
    b98c:	10000015 	stw	zero,0(r2)
  }
}
    b990:	e037883a 	mov	sp,fp
    b994:	df000017 	ldw	fp,0(sp)
    b998:	dec00104 	addi	sp,sp,4
    b99c:	f800283a 	ret

0000b9a0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b9a0:	defff804 	addi	sp,sp,-32
    b9a4:	df000715 	stw	fp,28(sp)
    b9a8:	df000704 	addi	fp,sp,28
    b9ac:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b9b0:	0005303a 	rdctl	r2,status
    b9b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b9b8:	e0fffb17 	ldw	r3,-20(fp)
    b9bc:	00bfff84 	movi	r2,-2
    b9c0:	1884703a 	and	r2,r3,r2
    b9c4:	1001703a 	wrctl	status,r2
  
  return context;
    b9c8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    b9cc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    b9d0:	d0a00c17 	ldw	r2,-32720(gp)
    b9d4:	10c000c4 	addi	r3,r2,3
    b9d8:	00bfff04 	movi	r2,-4
    b9dc:	1884703a 	and	r2,r3,r2
    b9e0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    b9e4:	d0e00c17 	ldw	r3,-32720(gp)
    b9e8:	e0bffe17 	ldw	r2,-8(fp)
    b9ec:	1887883a 	add	r3,r3,r2
    b9f0:	00820034 	movhi	r2,2048
    b9f4:	10800004 	addi	r2,r2,0
    b9f8:	10c0072e 	bgeu	r2,r3,ba18 <sbrk+0x78>
    b9fc:	e0bffd17 	ldw	r2,-12(fp)
    ba00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba04:	e0bffa17 	ldw	r2,-24(fp)
    ba08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ba0c:	00bfffc4 	movi	r2,-1
    ba10:	e0bfff15 	stw	r2,-4(fp)
    ba14:	00000c06 	br	ba48 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    ba18:	d0a00c17 	ldw	r2,-32720(gp)
    ba1c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    ba20:	d0e00c17 	ldw	r3,-32720(gp)
    ba24:	e0bffe17 	ldw	r2,-8(fp)
    ba28:	1885883a 	add	r2,r3,r2
    ba2c:	d0a00c15 	stw	r2,-32720(gp)
    ba30:	e0bffd17 	ldw	r2,-12(fp)
    ba34:	e0bff915 	stw	r2,-28(fp)
    ba38:	e0bff917 	ldw	r2,-28(fp)
    ba3c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ba40:	e0bffc17 	ldw	r2,-16(fp)
    ba44:	e0bfff15 	stw	r2,-4(fp)
    ba48:	e0bfff17 	ldw	r2,-4(fp)
} 
    ba4c:	e037883a 	mov	sp,fp
    ba50:	df000017 	ldw	fp,0(sp)
    ba54:	dec00104 	addi	sp,sp,4
    ba58:	f800283a 	ret

0000ba5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ba5c:	defffa04 	addi	sp,sp,-24
    ba60:	df000515 	stw	fp,20(sp)
    ba64:	df000504 	addi	fp,sp,20
    ba68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ba6c:	0005303a 	rdctl	r2,status
    ba70:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ba74:	e0fffd17 	ldw	r3,-12(fp)
    ba78:	00bfff84 	movi	r2,-2
    ba7c:	1884703a 	and	r2,r3,r2
    ba80:	1001703a 	wrctl	status,r2
  
  return context;
    ba84:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    ba88:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    ba8c:	e0bfff17 	ldw	r2,-4(fp)
    ba90:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    ba94:	e0bffc17 	ldw	r2,-16(fp)
    ba98:	10c00017 	ldw	r3,0(r2)
    ba9c:	e0bffc17 	ldw	r2,-16(fp)
    baa0:	10800117 	ldw	r2,4(r2)
    baa4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    baa8:	e0bffc17 	ldw	r2,-16(fp)
    baac:	10c00117 	ldw	r3,4(r2)
    bab0:	e0bffc17 	ldw	r2,-16(fp)
    bab4:	10800017 	ldw	r2,0(r2)
    bab8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    babc:	e0fffc17 	ldw	r3,-16(fp)
    bac0:	e0bffc17 	ldw	r2,-16(fp)
    bac4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    bac8:	e0fffc17 	ldw	r3,-16(fp)
    bacc:	e0bffc17 	ldw	r2,-16(fp)
    bad0:	18800015 	stw	r2,0(r3)
    bad4:	e0bffe17 	ldw	r2,-8(fp)
    bad8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    badc:	e0bffb17 	ldw	r2,-20(fp)
    bae0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bae4:	e037883a 	mov	sp,fp
    bae8:	df000017 	ldw	fp,0(sp)
    baec:	dec00104 	addi	sp,sp,4
    baf0:	f800283a 	ret

0000baf4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    baf4:	defffb04 	addi	sp,sp,-20
    baf8:	dfc00415 	stw	ra,16(sp)
    bafc:	df000315 	stw	fp,12(sp)
    bb00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bb04:	d0a00d17 	ldw	r2,-32716(gp)
    bb08:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bb0c:	d0a76917 	ldw	r2,-25180(gp)
    bb10:	10800044 	addi	r2,r2,1
    bb14:	d0a76915 	stw	r2,-25180(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bb18:	00003106 	br	bbe0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    bb1c:	e0bffe17 	ldw	r2,-8(fp)
    bb20:	10800017 	ldw	r2,0(r2)
    bb24:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    bb28:	e0bffe17 	ldw	r2,-8(fp)
    bb2c:	10800403 	ldbu	r2,16(r2)
    bb30:	10803fcc 	andi	r2,r2,255
    bb34:	1005003a 	cmpeq	r2,r2,zero
    bb38:	1000051e 	bne	r2,zero,bb50 <alt_tick+0x5c>
    bb3c:	d0a76917 	ldw	r2,-25180(gp)
    bb40:	1004c03a 	cmpne	r2,r2,zero
    bb44:	1000021e 	bne	r2,zero,bb50 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    bb48:	e0bffe17 	ldw	r2,-8(fp)
    bb4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    bb50:	e0bffe17 	ldw	r2,-8(fp)
    bb54:	10c00217 	ldw	r3,8(r2)
    bb58:	d0a76917 	ldw	r2,-25180(gp)
    bb5c:	10c01e36 	bltu	r2,r3,bbd8 <alt_tick+0xe4>
    bb60:	e0bffe17 	ldw	r2,-8(fp)
    bb64:	10800403 	ldbu	r2,16(r2)
    bb68:	10803fcc 	andi	r2,r2,255
    bb6c:	1004c03a 	cmpne	r2,r2,zero
    bb70:	1000191e 	bne	r2,zero,bbd8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    bb74:	e0bffe17 	ldw	r2,-8(fp)
    bb78:	10c00317 	ldw	r3,12(r2)
    bb7c:	e0bffe17 	ldw	r2,-8(fp)
    bb80:	11000517 	ldw	r4,20(r2)
    bb84:	183ee83a 	callr	r3
    bb88:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    bb8c:	e0bffd17 	ldw	r2,-12(fp)
    bb90:	1004c03a 	cmpne	r2,r2,zero
    bb94:	1000031e 	bne	r2,zero,bba4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    bb98:	e13ffe17 	ldw	r4,-8(fp)
    bb9c:	000ba5c0 	call	ba5c <alt_alarm_stop>
    bba0:	00000d06 	br	bbd8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    bba4:	e0bffe17 	ldw	r2,-8(fp)
    bba8:	10c00217 	ldw	r3,8(r2)
    bbac:	e0bffd17 	ldw	r2,-12(fp)
    bbb0:	1887883a 	add	r3,r3,r2
    bbb4:	e0bffe17 	ldw	r2,-8(fp)
    bbb8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    bbbc:	e0bffe17 	ldw	r2,-8(fp)
    bbc0:	10c00217 	ldw	r3,8(r2)
    bbc4:	d0a76917 	ldw	r2,-25180(gp)
    bbc8:	1880032e 	bgeu	r3,r2,bbd8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    bbcc:	e0fffe17 	ldw	r3,-8(fp)
    bbd0:	00800044 	movi	r2,1
    bbd4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    bbd8:	e0bfff17 	ldw	r2,-4(fp)
    bbdc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bbe0:	d0e00d04 	addi	r3,gp,-32716
    bbe4:	e0bffe17 	ldw	r2,-8(fp)
    bbe8:	10ffcc1e 	bne	r2,r3,bb1c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    bbec:	e037883a 	mov	sp,fp
    bbf0:	dfc00117 	ldw	ra,4(sp)
    bbf4:	df000017 	ldw	fp,0(sp)
    bbf8:	dec00204 	addi	sp,sp,8
    bbfc:	f800283a 	ret

0000bc00 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    bc00:	defffd04 	addi	sp,sp,-12
    bc04:	dfc00215 	stw	ra,8(sp)
    bc08:	df000115 	stw	fp,4(sp)
    bc0c:	df000104 	addi	fp,sp,4
    bc10:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    bc14:	e13fff17 	ldw	r4,-4(fp)
    bc18:	000dacc0 	call	dacc <alt_busy_sleep>
}
    bc1c:	e037883a 	mov	sp,fp
    bc20:	dfc00117 	ldw	ra,4(sp)
    bc24:	df000017 	ldw	fp,0(sp)
    bc28:	dec00204 	addi	sp,sp,8
    bc2c:	f800283a 	ret

0000bc30 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    bc30:	defff704 	addi	sp,sp,-36
    bc34:	dfc00815 	stw	ra,32(sp)
    bc38:	df000715 	stw	fp,28(sp)
    bc3c:	df000704 	addi	fp,sp,28
    bc40:	e13ffb15 	stw	r4,-20(fp)
    bc44:	e17ffc15 	stw	r5,-16(fp)
    bc48:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bc4c:	e0bffb17 	ldw	r2,-20(fp)
    bc50:	1004803a 	cmplt	r2,r2,zero
    bc54:	1000081e 	bne	r2,zero,bc78 <write+0x48>
    bc58:	e0bffb17 	ldw	r2,-20(fp)
    bc5c:	10800324 	muli	r2,r2,12
    bc60:	1007883a 	mov	r3,r2
    bc64:	00800074 	movhi	r2,1
    bc68:	10807804 	addi	r2,r2,480
    bc6c:	1887883a 	add	r3,r3,r2
    bc70:	e0ffff15 	stw	r3,-4(fp)
    bc74:	00000106 	br	bc7c <write+0x4c>
    bc78:	e03fff15 	stw	zero,-4(fp)
    bc7c:	e0bfff17 	ldw	r2,-4(fp)
    bc80:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    bc84:	e0bffa17 	ldw	r2,-24(fp)
    bc88:	1005003a 	cmpeq	r2,r2,zero
    bc8c:	1000241e 	bne	r2,zero,bd20 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    bc90:	e0bffa17 	ldw	r2,-24(fp)
    bc94:	10800217 	ldw	r2,8(r2)
    bc98:	108000cc 	andi	r2,r2,3
    bc9c:	1005003a 	cmpeq	r2,r2,zero
    bca0:	10001a1e 	bne	r2,zero,bd0c <write+0xdc>
    bca4:	e0bffa17 	ldw	r2,-24(fp)
    bca8:	10800017 	ldw	r2,0(r2)
    bcac:	10800617 	ldw	r2,24(r2)
    bcb0:	1005003a 	cmpeq	r2,r2,zero
    bcb4:	1000151e 	bne	r2,zero,bd0c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    bcb8:	e0bffa17 	ldw	r2,-24(fp)
    bcbc:	10800017 	ldw	r2,0(r2)
    bcc0:	10800617 	ldw	r2,24(r2)
    bcc4:	e17ffc17 	ldw	r5,-16(fp)
    bcc8:	e1bffd17 	ldw	r6,-12(fp)
    bccc:	e13ffa17 	ldw	r4,-24(fp)
    bcd0:	103ee83a 	callr	r2
    bcd4:	e0bff915 	stw	r2,-28(fp)
    bcd8:	e0bff917 	ldw	r2,-28(fp)
    bcdc:	1004403a 	cmpge	r2,r2,zero
    bce0:	1000071e 	bne	r2,zero,bd00 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    bce4:	000bd500 	call	bd50 <alt_get_errno>
    bce8:	e0fff917 	ldw	r3,-28(fp)
    bcec:	00c7c83a 	sub	r3,zero,r3
    bcf0:	10c00015 	stw	r3,0(r2)
        return -1;
    bcf4:	00bfffc4 	movi	r2,-1
    bcf8:	e0bffe15 	stw	r2,-8(fp)
    bcfc:	00000e06 	br	bd38 <write+0x108>
      }
      return rval;
    bd00:	e0bff917 	ldw	r2,-28(fp)
    bd04:	e0bffe15 	stw	r2,-8(fp)
    bd08:	00000b06 	br	bd38 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    bd0c:	000bd500 	call	bd50 <alt_get_errno>
    bd10:	1007883a 	mov	r3,r2
    bd14:	00800344 	movi	r2,13
    bd18:	18800015 	stw	r2,0(r3)
    bd1c:	00000406 	br	bd30 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    bd20:	000bd500 	call	bd50 <alt_get_errno>
    bd24:	1007883a 	mov	r3,r2
    bd28:	00801444 	movi	r2,81
    bd2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    bd30:	00bfffc4 	movi	r2,-1
    bd34:	e0bffe15 	stw	r2,-8(fp)
    bd38:	e0bffe17 	ldw	r2,-8(fp)
}
    bd3c:	e037883a 	mov	sp,fp
    bd40:	dfc00117 	ldw	ra,4(sp)
    bd44:	df000017 	ldw	fp,0(sp)
    bd48:	dec00204 	addi	sp,sp,8
    bd4c:	f800283a 	ret

0000bd50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bd50:	defffd04 	addi	sp,sp,-12
    bd54:	dfc00215 	stw	ra,8(sp)
    bd58:	df000115 	stw	fp,4(sp)
    bd5c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bd60:	00800074 	movhi	r2,1
    bd64:	10854304 	addi	r2,r2,5388
    bd68:	10800017 	ldw	r2,0(r2)
    bd6c:	1005003a 	cmpeq	r2,r2,zero
    bd70:	1000061e 	bne	r2,zero,bd8c <alt_get_errno+0x3c>
    bd74:	00800074 	movhi	r2,1
    bd78:	10854304 	addi	r2,r2,5388
    bd7c:	10800017 	ldw	r2,0(r2)
    bd80:	103ee83a 	callr	r2
    bd84:	e0bfff15 	stw	r2,-4(fp)
    bd88:	00000306 	br	bd98 <alt_get_errno+0x48>
    bd8c:	00800074 	movhi	r2,1
    bd90:	108c9904 	addi	r2,r2,12900
    bd94:	e0bfff15 	stw	r2,-4(fp)
    bd98:	e0bfff17 	ldw	r2,-4(fp)
}
    bd9c:	e037883a 	mov	sp,fp
    bda0:	dfc00117 	ldw	ra,4(sp)
    bda4:	df000017 	ldw	fp,0(sp)
    bda8:	dec00204 	addi	sp,sp,8
    bdac:	f800283a 	ret

0000bdb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    bdb0:	defffd04 	addi	sp,sp,-12
    bdb4:	dfc00215 	stw	ra,8(sp)
    bdb8:	df000115 	stw	fp,4(sp)
    bdbc:	df000104 	addi	fp,sp,4
    bdc0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
    bdc4:	000e50c0 	call	e50c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    bdc8:	00800044 	movi	r2,1
    bdcc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    bdd0:	e037883a 	mov	sp,fp
    bdd4:	dfc00117 	ldw	ra,4(sp)
    bdd8:	df000017 	ldw	fp,0(sp)
    bddc:	dec00204 	addi	sp,sp,8
    bde0:	f800283a 	ret

0000bde4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    bde4:	defffe04 	addi	sp,sp,-8
    bde8:	dfc00115 	stw	ra,4(sp)
    bdec:	df000015 	stw	fp,0(sp)
    bdf0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    bdf4:	01020034 	movhi	r4,2048
    bdf8:	000b883a 	mov	r5,zero
    bdfc:	01800044 	movi	r6,1
    be00:	01c0fa04 	movi	r7,1000
    be04:	000d8e80 	call	d8e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    be08:	01000074 	movhi	r4,1
    be0c:	2100e204 	addi	r4,r4,904
    be10:	000b883a 	mov	r5,zero
    be14:	000d883a 	mov	r6,zero
    be18:	000bfd40 	call	bfd4 <altera_avalon_jtag_uart_init>
    be1c:	01000074 	movhi	r4,1
    be20:	2100d804 	addi	r4,r4,864
    be24:	000be540 	call	be54 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207_0, lcd_16207_0);
    be28:	01000074 	movhi	r4,1
    be2c:	2104fa04 	addi	r4,r4,5096
    be30:	000d6e40 	call	d6e4 <altera_avalon_lcd_16207_init>
    be34:	01000074 	movhi	r4,1
    be38:	2104f004 	addi	r4,r4,5056
    be3c:	000be540 	call	be54 <alt_dev_reg>
}
    be40:	e037883a 	mov	sp,fp
    be44:	dfc00117 	ldw	ra,4(sp)
    be48:	df000017 	ldw	fp,0(sp)
    be4c:	dec00204 	addi	sp,sp,8
    be50:	f800283a 	ret

0000be54 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    be54:	defffd04 	addi	sp,sp,-12
    be58:	dfc00215 	stw	ra,8(sp)
    be5c:	df000115 	stw	fp,4(sp)
    be60:	df000104 	addi	fp,sp,4
    be64:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    be68:	e13fff17 	ldw	r4,-4(fp)
    be6c:	01400074 	movhi	r5,1
    be70:	29454004 	addi	r5,r5,5376
    be74:	000dc340 	call	dc34 <alt_dev_llist_insert>
}
    be78:	e037883a 	mov	sp,fp
    be7c:	dfc00117 	ldw	ra,4(sp)
    be80:	df000017 	ldw	fp,0(sp)
    be84:	dec00204 	addi	sp,sp,8
    be88:	f800283a 	ret

0000be8c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    be8c:	defffa04 	addi	sp,sp,-24
    be90:	dfc00515 	stw	ra,20(sp)
    be94:	df000415 	stw	fp,16(sp)
    be98:	df000404 	addi	fp,sp,16
    be9c:	e13ffd15 	stw	r4,-12(fp)
    bea0:	e17ffe15 	stw	r5,-8(fp)
    bea4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bea8:	e0bffd17 	ldw	r2,-12(fp)
    beac:	10800017 	ldw	r2,0(r2)
    beb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    beb4:	e0bffc17 	ldw	r2,-16(fp)
    beb8:	11000a04 	addi	r4,r2,40
    bebc:	e0bffd17 	ldw	r2,-12(fp)
    bec0:	11c00217 	ldw	r7,8(r2)
    bec4:	e17ffe17 	ldw	r5,-8(fp)
    bec8:	e1bfff17 	ldw	r6,-4(fp)
    becc:	000c4d40 	call	c4d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bed0:	e037883a 	mov	sp,fp
    bed4:	dfc00117 	ldw	ra,4(sp)
    bed8:	df000017 	ldw	fp,0(sp)
    bedc:	dec00204 	addi	sp,sp,8
    bee0:	f800283a 	ret

0000bee4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bee4:	defffa04 	addi	sp,sp,-24
    bee8:	dfc00515 	stw	ra,20(sp)
    beec:	df000415 	stw	fp,16(sp)
    bef0:	df000404 	addi	fp,sp,16
    bef4:	e13ffd15 	stw	r4,-12(fp)
    bef8:	e17ffe15 	stw	r5,-8(fp)
    befc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bf00:	e0bffd17 	ldw	r2,-12(fp)
    bf04:	10800017 	ldw	r2,0(r2)
    bf08:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bf0c:	e0bffc17 	ldw	r2,-16(fp)
    bf10:	11000a04 	addi	r4,r2,40
    bf14:	e0bffd17 	ldw	r2,-12(fp)
    bf18:	11c00217 	ldw	r7,8(r2)
    bf1c:	e17ffe17 	ldw	r5,-8(fp)
    bf20:	e1bfff17 	ldw	r6,-4(fp)
    bf24:	000c6f80 	call	c6f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bf28:	e037883a 	mov	sp,fp
    bf2c:	dfc00117 	ldw	ra,4(sp)
    bf30:	df000017 	ldw	fp,0(sp)
    bf34:	dec00204 	addi	sp,sp,8
    bf38:	f800283a 	ret

0000bf3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    bf3c:	defffc04 	addi	sp,sp,-16
    bf40:	dfc00315 	stw	ra,12(sp)
    bf44:	df000215 	stw	fp,8(sp)
    bf48:	df000204 	addi	fp,sp,8
    bf4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bf50:	e0bfff17 	ldw	r2,-4(fp)
    bf54:	10800017 	ldw	r2,0(r2)
    bf58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    bf5c:	e0bffe17 	ldw	r2,-8(fp)
    bf60:	11000a04 	addi	r4,r2,40
    bf64:	e0bfff17 	ldw	r2,-4(fp)
    bf68:	11400217 	ldw	r5,8(r2)
    bf6c:	000c36c0 	call	c36c <altera_avalon_jtag_uart_close>
}
    bf70:	e037883a 	mov	sp,fp
    bf74:	dfc00117 	ldw	ra,4(sp)
    bf78:	df000017 	ldw	fp,0(sp)
    bf7c:	dec00204 	addi	sp,sp,8
    bf80:	f800283a 	ret

0000bf84 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    bf84:	defffa04 	addi	sp,sp,-24
    bf88:	dfc00515 	stw	ra,20(sp)
    bf8c:	df000415 	stw	fp,16(sp)
    bf90:	df000404 	addi	fp,sp,16
    bf94:	e13ffd15 	stw	r4,-12(fp)
    bf98:	e17ffe15 	stw	r5,-8(fp)
    bf9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    bfa0:	e0bffd17 	ldw	r2,-12(fp)
    bfa4:	10800017 	ldw	r2,0(r2)
    bfa8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    bfac:	e0bffc17 	ldw	r2,-16(fp)
    bfb0:	11000a04 	addi	r4,r2,40
    bfb4:	e17ffe17 	ldw	r5,-8(fp)
    bfb8:	e1bfff17 	ldw	r6,-4(fp)
    bfbc:	000c3e00 	call	c3e0 <altera_avalon_jtag_uart_ioctl>
}
    bfc0:	e037883a 	mov	sp,fp
    bfc4:	dfc00117 	ldw	ra,4(sp)
    bfc8:	df000017 	ldw	fp,0(sp)
    bfcc:	dec00204 	addi	sp,sp,8
    bfd0:	f800283a 	ret

0000bfd4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    bfd4:	defffa04 	addi	sp,sp,-24
    bfd8:	dfc00515 	stw	ra,20(sp)
    bfdc:	df000415 	stw	fp,16(sp)
    bfe0:	df000404 	addi	fp,sp,16
    bfe4:	e13ffd15 	stw	r4,-12(fp)
    bfe8:	e17ffe15 	stw	r5,-8(fp)
    bfec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    bff0:	e0fffd17 	ldw	r3,-12(fp)
    bff4:	00800044 	movi	r2,1
    bff8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    bffc:	e0bffd17 	ldw	r2,-12(fp)
    c000:	10800017 	ldw	r2,0(r2)
    c004:	11000104 	addi	r4,r2,4
    c008:	e0bffd17 	ldw	r2,-12(fp)
    c00c:	10800817 	ldw	r2,32(r2)
    c010:	1007883a 	mov	r3,r2
    c014:	2005883a 	mov	r2,r4
    c018:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c01c:	e13ffe17 	ldw	r4,-8(fp)
    c020:	e17fff17 	ldw	r5,-4(fp)
    c024:	d8000015 	stw	zero,0(sp)
    c028:	01800074 	movhi	r6,1
    c02c:	31b02504 	addi	r6,r6,-16236
    c030:	e1fffd17 	ldw	r7,-12(fp)
    c034:	000de400 	call	de40 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c038:	e0bffd17 	ldw	r2,-12(fp)
    c03c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c040:	e0bffd17 	ldw	r2,-12(fp)
    c044:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c048:	00800074 	movhi	r2,1
    c04c:	108ca004 	addi	r2,r2,12928
    c050:	10800017 	ldw	r2,0(r2)
    c054:	100b883a 	mov	r5,r2
    c058:	01800074 	movhi	r6,1
    c05c:	31b0af04 	addi	r6,r6,-15684
    c060:	e1fffd17 	ldw	r7,-12(fp)
    c064:	000d9780 	call	d978 <alt_alarm_start>
    c068:	1004403a 	cmpge	r2,r2,zero
    c06c:	1000041e 	bne	r2,zero,c080 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c070:	e0fffd17 	ldw	r3,-12(fp)
    c074:	00a00034 	movhi	r2,32768
    c078:	10bfffc4 	addi	r2,r2,-1
    c07c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c080:	e037883a 	mov	sp,fp
    c084:	dfc00117 	ldw	ra,4(sp)
    c088:	df000017 	ldw	fp,0(sp)
    c08c:	dec00204 	addi	sp,sp,8
    c090:	f800283a 	ret

0000c094 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c094:	defff804 	addi	sp,sp,-32
    c098:	df000715 	stw	fp,28(sp)
    c09c:	df000704 	addi	fp,sp,28
    c0a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c0a4:	e0bfff17 	ldw	r2,-4(fp)
    c0a8:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    c0ac:	e0bffe17 	ldw	r2,-8(fp)
    c0b0:	10800017 	ldw	r2,0(r2)
    c0b4:	e0bffd15 	stw	r2,-12(fp)
    c0b8:	00000006 	br	c0bc <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c0bc:	e0bffd17 	ldw	r2,-12(fp)
    c0c0:	10800104 	addi	r2,r2,4
    c0c4:	10800037 	ldwio	r2,0(r2)
    c0c8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c0cc:	e0bffc17 	ldw	r2,-16(fp)
    c0d0:	1080c00c 	andi	r2,r2,768
    c0d4:	1005003a 	cmpeq	r2,r2,zero
    c0d8:	1000741e 	bne	r2,zero,c2ac <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c0dc:	e0bffc17 	ldw	r2,-16(fp)
    c0e0:	1080400c 	andi	r2,r2,256
    c0e4:	1005003a 	cmpeq	r2,r2,zero
    c0e8:	1000351e 	bne	r2,zero,c1c0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c0ec:	00800074 	movhi	r2,1
    c0f0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c0f4:	e0bffe17 	ldw	r2,-8(fp)
    c0f8:	10800a17 	ldw	r2,40(r2)
    c0fc:	10800044 	addi	r2,r2,1
    c100:	1081ffcc 	andi	r2,r2,2047
    c104:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c108:	e0bffe17 	ldw	r2,-8(fp)
    c10c:	10c00b17 	ldw	r3,44(r2)
    c110:	e0bffa17 	ldw	r2,-24(fp)
    c114:	18801626 	beq	r3,r2,c170 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c118:	e0bffd17 	ldw	r2,-12(fp)
    c11c:	10800037 	ldwio	r2,0(r2)
    c120:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c124:	e0bffb17 	ldw	r2,-20(fp)
    c128:	10a0000c 	andi	r2,r2,32768
    c12c:	1005003a 	cmpeq	r2,r2,zero
    c130:	10000f1e 	bne	r2,zero,c170 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c134:	e0bffe17 	ldw	r2,-8(fp)
    c138:	10c00a17 	ldw	r3,40(r2)
    c13c:	e0bffb17 	ldw	r2,-20(fp)
    c140:	1009883a 	mov	r4,r2
    c144:	e0bffe17 	ldw	r2,-8(fp)
    c148:	1885883a 	add	r2,r3,r2
    c14c:	10800e04 	addi	r2,r2,56
    c150:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c154:	e0bffe17 	ldw	r2,-8(fp)
    c158:	10800a17 	ldw	r2,40(r2)
    c15c:	10800044 	addi	r2,r2,1
    c160:	10c1ffcc 	andi	r3,r2,2047
    c164:	e0bffe17 	ldw	r2,-8(fp)
    c168:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c16c:	003fe106 	br	c0f4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c170:	e0bffb17 	ldw	r2,-20(fp)
    c174:	10bfffec 	andhi	r2,r2,65535
    c178:	1005003a 	cmpeq	r2,r2,zero
    c17c:	1000101e 	bne	r2,zero,c1c0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c180:	e0bffe17 	ldw	r2,-8(fp)
    c184:	10c00817 	ldw	r3,32(r2)
    c188:	00bfff84 	movi	r2,-2
    c18c:	1886703a 	and	r3,r3,r2
    c190:	e0bffe17 	ldw	r2,-8(fp)
    c194:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c198:	e0bffd17 	ldw	r2,-12(fp)
    c19c:	11000104 	addi	r4,r2,4
    c1a0:	e0bffe17 	ldw	r2,-8(fp)
    c1a4:	10800817 	ldw	r2,32(r2)
    c1a8:	1007883a 	mov	r3,r2
    c1ac:	2005883a 	mov	r2,r4
    c1b0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c1b4:	e0bffd17 	ldw	r2,-12(fp)
    c1b8:	10800104 	addi	r2,r2,4
    c1bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c1c0:	e0bffc17 	ldw	r2,-16(fp)
    c1c4:	1080800c 	andi	r2,r2,512
    c1c8:	1005003a 	cmpeq	r2,r2,zero
    c1cc:	103fbb1e 	bne	r2,zero,c0bc <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c1d0:	e0bffc17 	ldw	r2,-16(fp)
    c1d4:	10bfffec 	andhi	r2,r2,65535
    c1d8:	1004d43a 	srli	r2,r2,16
    c1dc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c1e0:	00001506 	br	c238 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c1e4:	e13ffd17 	ldw	r4,-12(fp)
    c1e8:	e0bffe17 	ldw	r2,-8(fp)
    c1ec:	10c00d17 	ldw	r3,52(r2)
    c1f0:	e0bffe17 	ldw	r2,-8(fp)
    c1f4:	1885883a 	add	r2,r3,r2
    c1f8:	10820e04 	addi	r2,r2,2104
    c1fc:	10800003 	ldbu	r2,0(r2)
    c200:	10c03fcc 	andi	r3,r2,255
    c204:	18c0201c 	xori	r3,r3,128
    c208:	18ffe004 	addi	r3,r3,-128
    c20c:	2005883a 	mov	r2,r4
    c210:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c214:	e0bffe17 	ldw	r2,-8(fp)
    c218:	10800d17 	ldw	r2,52(r2)
    c21c:	10800044 	addi	r2,r2,1
    c220:	10c1ffcc 	andi	r3,r2,2047
    c224:	e0bffe17 	ldw	r2,-8(fp)
    c228:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c22c:	e0bff917 	ldw	r2,-28(fp)
    c230:	10bfffc4 	addi	r2,r2,-1
    c234:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c238:	e0bff917 	ldw	r2,-28(fp)
    c23c:	1005003a 	cmpeq	r2,r2,zero
    c240:	1000051e 	bne	r2,zero,c258 <altera_avalon_jtag_uart_irq+0x1c4>
    c244:	e0bffe17 	ldw	r2,-8(fp)
    c248:	10c00d17 	ldw	r3,52(r2)
    c24c:	e0bffe17 	ldw	r2,-8(fp)
    c250:	10800c17 	ldw	r2,48(r2)
    c254:	18bfe31e 	bne	r3,r2,c1e4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c258:	e0bff917 	ldw	r2,-28(fp)
    c25c:	1005003a 	cmpeq	r2,r2,zero
    c260:	103f961e 	bne	r2,zero,c0bc <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c264:	e0bffe17 	ldw	r2,-8(fp)
    c268:	10c00817 	ldw	r3,32(r2)
    c26c:	00bfff44 	movi	r2,-3
    c270:	1886703a 	and	r3,r3,r2
    c274:	e0bffe17 	ldw	r2,-8(fp)
    c278:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c27c:	e0bffe17 	ldw	r2,-8(fp)
    c280:	10800017 	ldw	r2,0(r2)
    c284:	11000104 	addi	r4,r2,4
    c288:	e0bffe17 	ldw	r2,-8(fp)
    c28c:	10800817 	ldw	r2,32(r2)
    c290:	1007883a 	mov	r3,r2
    c294:	2005883a 	mov	r2,r4
    c298:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c29c:	e0bffd17 	ldw	r2,-12(fp)
    c2a0:	10800104 	addi	r2,r2,4
    c2a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c2a8:	003f8406 	br	c0bc <altera_avalon_jtag_uart_irq+0x28>
}
    c2ac:	e037883a 	mov	sp,fp
    c2b0:	df000017 	ldw	fp,0(sp)
    c2b4:	dec00104 	addi	sp,sp,4
    c2b8:	f800283a 	ret

0000c2bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c2bc:	defffc04 	addi	sp,sp,-16
    c2c0:	df000315 	stw	fp,12(sp)
    c2c4:	df000304 	addi	fp,sp,12
    c2c8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c2cc:	e0bfff17 	ldw	r2,-4(fp)
    c2d0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c2d4:	e0bffe17 	ldw	r2,-8(fp)
    c2d8:	10800017 	ldw	r2,0(r2)
    c2dc:	10800104 	addi	r2,r2,4
    c2e0:	10800037 	ldwio	r2,0(r2)
    c2e4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c2e8:	e0bffd17 	ldw	r2,-12(fp)
    c2ec:	1081000c 	andi	r2,r2,1024
    c2f0:	1005003a 	cmpeq	r2,r2,zero
    c2f4:	10000c1e 	bne	r2,zero,c328 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c2f8:	e0bffe17 	ldw	r2,-8(fp)
    c2fc:	10800017 	ldw	r2,0(r2)
    c300:	11000104 	addi	r4,r2,4
    c304:	e0bffe17 	ldw	r2,-8(fp)
    c308:	10800817 	ldw	r2,32(r2)
    c30c:	10810014 	ori	r2,r2,1024
    c310:	1007883a 	mov	r3,r2
    c314:	2005883a 	mov	r2,r4
    c318:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c31c:	e0bffe17 	ldw	r2,-8(fp)
    c320:	10000915 	stw	zero,36(r2)
    c324:	00000a06 	br	c350 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c328:	e0bffe17 	ldw	r2,-8(fp)
    c32c:	10c00917 	ldw	r3,36(r2)
    c330:	00a00034 	movhi	r2,32768
    c334:	10bfff04 	addi	r2,r2,-4
    c338:	10c00536 	bltu	r2,r3,c350 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c33c:	e0bffe17 	ldw	r2,-8(fp)
    c340:	10800917 	ldw	r2,36(r2)
    c344:	10c00044 	addi	r3,r2,1
    c348:	e0bffe17 	ldw	r2,-8(fp)
    c34c:	10c00915 	stw	r3,36(r2)
    c350:	00800074 	movhi	r2,1
    c354:	108ca004 	addi	r2,r2,12928
    c358:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c35c:	e037883a 	mov	sp,fp
    c360:	df000017 	ldw	fp,0(sp)
    c364:	dec00104 	addi	sp,sp,4
    c368:	f800283a 	ret

0000c36c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c36c:	defffc04 	addi	sp,sp,-16
    c370:	df000315 	stw	fp,12(sp)
    c374:	df000304 	addi	fp,sp,12
    c378:	e13ffd15 	stw	r4,-12(fp)
    c37c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c380:	00000706 	br	c3a0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c384:	e0bffe17 	ldw	r2,-8(fp)
    c388:	1090000c 	andi	r2,r2,16384
    c38c:	1005003a 	cmpeq	r2,r2,zero
    c390:	1000031e 	bne	r2,zero,c3a0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c394:	00bffd44 	movi	r2,-11
    c398:	e0bfff15 	stw	r2,-4(fp)
    c39c:	00000b06 	br	c3cc <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c3a0:	e0bffd17 	ldw	r2,-12(fp)
    c3a4:	10c00d17 	ldw	r3,52(r2)
    c3a8:	e0bffd17 	ldw	r2,-12(fp)
    c3ac:	10800c17 	ldw	r2,48(r2)
    c3b0:	18800526 	beq	r3,r2,c3c8 <altera_avalon_jtag_uart_close+0x5c>
    c3b4:	e0bffd17 	ldw	r2,-12(fp)
    c3b8:	10c00917 	ldw	r3,36(r2)
    c3bc:	e0bffd17 	ldw	r2,-12(fp)
    c3c0:	10800117 	ldw	r2,4(r2)
    c3c4:	18bfef36 	bltu	r3,r2,c384 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c3c8:	e03fff15 	stw	zero,-4(fp)
    c3cc:	e0bfff17 	ldw	r2,-4(fp)
}
    c3d0:	e037883a 	mov	sp,fp
    c3d4:	df000017 	ldw	fp,0(sp)
    c3d8:	dec00104 	addi	sp,sp,4
    c3dc:	f800283a 	ret

0000c3e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c3e0:	defff804 	addi	sp,sp,-32
    c3e4:	df000715 	stw	fp,28(sp)
    c3e8:	df000704 	addi	fp,sp,28
    c3ec:	e13ffb15 	stw	r4,-20(fp)
    c3f0:	e17ffc15 	stw	r5,-16(fp)
    c3f4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c3f8:	00bff9c4 	movi	r2,-25
    c3fc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c400:	e0bffc17 	ldw	r2,-16(fp)
    c404:	e0bfff15 	stw	r2,-4(fp)
    c408:	e0ffff17 	ldw	r3,-4(fp)
    c40c:	189a8060 	cmpeqi	r2,r3,27137
    c410:	1000041e 	bne	r2,zero,c424 <altera_avalon_jtag_uart_ioctl+0x44>
    c414:	e0ffff17 	ldw	r3,-4(fp)
    c418:	189a80a0 	cmpeqi	r2,r3,27138
    c41c:	10001b1e 	bne	r2,zero,c48c <altera_avalon_jtag_uart_ioctl+0xac>
    c420:	00002706 	br	c4c0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c424:	e0bffb17 	ldw	r2,-20(fp)
    c428:	10c00117 	ldw	r3,4(r2)
    c42c:	00a00034 	movhi	r2,32768
    c430:	10bfffc4 	addi	r2,r2,-1
    c434:	18802226 	beq	r3,r2,c4c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c438:	e0bffd17 	ldw	r2,-12(fp)
    c43c:	10800017 	ldw	r2,0(r2)
    c440:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c444:	e0bff917 	ldw	r2,-28(fp)
    c448:	10800090 	cmplti	r2,r2,2
    c44c:	1000071e 	bne	r2,zero,c46c <altera_avalon_jtag_uart_ioctl+0x8c>
    c450:	e0fff917 	ldw	r3,-28(fp)
    c454:	00a00034 	movhi	r2,32768
    c458:	10bfffc4 	addi	r2,r2,-1
    c45c:	18800326 	beq	r3,r2,c46c <altera_avalon_jtag_uart_ioctl+0x8c>
    c460:	e0bff917 	ldw	r2,-28(fp)
    c464:	e0bffe15 	stw	r2,-8(fp)
    c468:	00000306 	br	c478 <altera_avalon_jtag_uart_ioctl+0x98>
    c46c:	00e00034 	movhi	r3,32768
    c470:	18ffff84 	addi	r3,r3,-2
    c474:	e0fffe15 	stw	r3,-8(fp)
    c478:	e0bffb17 	ldw	r2,-20(fp)
    c47c:	e0fffe17 	ldw	r3,-8(fp)
    c480:	10c00115 	stw	r3,4(r2)
      rc = 0;
    c484:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    c488:	00000d06 	br	c4c0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c48c:	e0bffb17 	ldw	r2,-20(fp)
    c490:	10c00117 	ldw	r3,4(r2)
    c494:	00a00034 	movhi	r2,32768
    c498:	10bfffc4 	addi	r2,r2,-1
    c49c:	18800826 	beq	r3,r2,c4c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c4a0:	e13ffd17 	ldw	r4,-12(fp)
    c4a4:	e0bffb17 	ldw	r2,-20(fp)
    c4a8:	10c00917 	ldw	r3,36(r2)
    c4ac:	e0bffb17 	ldw	r2,-20(fp)
    c4b0:	10800117 	ldw	r2,4(r2)
    c4b4:	1885803a 	cmpltu	r2,r3,r2
    c4b8:	20800015 	stw	r2,0(r4)
      rc = 0;
    c4bc:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    c4c0:	e0bffa17 	ldw	r2,-24(fp)
}
    c4c4:	e037883a 	mov	sp,fp
    c4c8:	df000017 	ldw	fp,0(sp)
    c4cc:	dec00104 	addi	sp,sp,4
    c4d0:	f800283a 	ret

0000c4d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c4d4:	defff204 	addi	sp,sp,-56
    c4d8:	dfc00d15 	stw	ra,52(sp)
    c4dc:	df000c15 	stw	fp,48(sp)
    c4e0:	df000c04 	addi	fp,sp,48
    c4e4:	e13ffb15 	stw	r4,-20(fp)
    c4e8:	e17ffc15 	stw	r5,-16(fp)
    c4ec:	e1bffd15 	stw	r6,-12(fp)
    c4f0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    c4f4:	e0bffc17 	ldw	r2,-16(fp)
    c4f8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c4fc:	00004806 	br	c620 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c500:	e0bffb17 	ldw	r2,-20(fp)
    c504:	10800a17 	ldw	r2,40(r2)
    c508:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c50c:	e0bffb17 	ldw	r2,-20(fp)
    c510:	10800b17 	ldw	r2,44(r2)
    c514:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    c518:	e0fff717 	ldw	r3,-36(fp)
    c51c:	e0bff617 	ldw	r2,-40(fp)
    c520:	18800536 	bltu	r3,r2,c538 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c524:	e0bff717 	ldw	r2,-36(fp)
    c528:	e0fff617 	ldw	r3,-40(fp)
    c52c:	10c5c83a 	sub	r2,r2,r3
    c530:	e0bff815 	stw	r2,-32(fp)
    c534:	00000406 	br	c548 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c538:	00820004 	movi	r2,2048
    c53c:	e0fff617 	ldw	r3,-40(fp)
    c540:	10c5c83a 	sub	r2,r2,r3
    c544:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c548:	e0bff817 	ldw	r2,-32(fp)
    c54c:	1005003a 	cmpeq	r2,r2,zero
    c550:	10001f1e 	bne	r2,zero,c5d0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    c554:	e0fffd17 	ldw	r3,-12(fp)
    c558:	e0bff817 	ldw	r2,-32(fp)
    c55c:	1880022e 	bgeu	r3,r2,c568 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    c560:	e0bffd17 	ldw	r2,-12(fp)
    c564:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c568:	e0bffb17 	ldw	r2,-20(fp)
    c56c:	10c00e04 	addi	r3,r2,56
    c570:	e0bff617 	ldw	r2,-40(fp)
    c574:	1887883a 	add	r3,r3,r2
    c578:	e0bffa17 	ldw	r2,-24(fp)
    c57c:	1009883a 	mov	r4,r2
    c580:	180b883a 	mov	r5,r3
    c584:	e1bff817 	ldw	r6,-32(fp)
    c588:	0006f0c0 	call	6f0c <memcpy>
      ptr   += n;
    c58c:	e0fff817 	ldw	r3,-32(fp)
    c590:	e0bffa17 	ldw	r2,-24(fp)
    c594:	10c5883a 	add	r2,r2,r3
    c598:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    c59c:	e0fffd17 	ldw	r3,-12(fp)
    c5a0:	e0bff817 	ldw	r2,-32(fp)
    c5a4:	1885c83a 	sub	r2,r3,r2
    c5a8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c5ac:	e0fff617 	ldw	r3,-40(fp)
    c5b0:	e0bff817 	ldw	r2,-32(fp)
    c5b4:	1885883a 	add	r2,r3,r2
    c5b8:	10c1ffcc 	andi	r3,r2,2047
    c5bc:	e0bffb17 	ldw	r2,-20(fp)
    c5c0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c5c4:	e0bffd17 	ldw	r2,-12(fp)
    c5c8:	10800048 	cmpgei	r2,r2,1
    c5cc:	103fcc1e 	bne	r2,zero,c500 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    c5d0:	e0fffa17 	ldw	r3,-24(fp)
    c5d4:	e0bffc17 	ldw	r2,-16(fp)
    c5d8:	1880141e 	bne	r3,r2,c62c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c5dc:	e0bffe17 	ldw	r2,-8(fp)
    c5e0:	1090000c 	andi	r2,r2,16384
    c5e4:	1004c03a 	cmpne	r2,r2,zero
    c5e8:	1000101e 	bne	r2,zero,c62c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c5ec:	e0bffb17 	ldw	r2,-20(fp)
    c5f0:	10c00a17 	ldw	r3,40(r2)
    c5f4:	e0bff717 	ldw	r2,-36(fp)
    c5f8:	1880051e 	bne	r3,r2,c610 <altera_avalon_jtag_uart_read+0x13c>
    c5fc:	e0bffb17 	ldw	r2,-20(fp)
    c600:	10c00917 	ldw	r3,36(r2)
    c604:	e0bffb17 	ldw	r2,-20(fp)
    c608:	10800117 	ldw	r2,4(r2)
    c60c:	18bff736 	bltu	r3,r2,c5ec <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c610:	e0bffb17 	ldw	r2,-20(fp)
    c614:	10c00a17 	ldw	r3,40(r2)
    c618:	e0bff717 	ldw	r2,-36(fp)
    c61c:	18800326 	beq	r3,r2,c62c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c620:	e0bffd17 	ldw	r2,-12(fp)
    c624:	10800048 	cmpgei	r2,r2,1
    c628:	103fb51e 	bne	r2,zero,c500 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c62c:	e0fffa17 	ldw	r3,-24(fp)
    c630:	e0bffc17 	ldw	r2,-16(fp)
    c634:	18801926 	beq	r3,r2,c69c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c638:	0005303a 	rdctl	r2,status
    c63c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c640:	e0fff517 	ldw	r3,-44(fp)
    c644:	00bfff84 	movi	r2,-2
    c648:	1884703a 	and	r2,r3,r2
    c64c:	1001703a 	wrctl	status,r2
  
  return context;
    c650:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c654:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c658:	e0bffb17 	ldw	r2,-20(fp)
    c65c:	10800817 	ldw	r2,32(r2)
    c660:	10c00054 	ori	r3,r2,1
    c664:	e0bffb17 	ldw	r2,-20(fp)
    c668:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c66c:	e0bffb17 	ldw	r2,-20(fp)
    c670:	10800017 	ldw	r2,0(r2)
    c674:	11000104 	addi	r4,r2,4
    c678:	e0bffb17 	ldw	r2,-20(fp)
    c67c:	10800817 	ldw	r2,32(r2)
    c680:	1007883a 	mov	r3,r2
    c684:	2005883a 	mov	r2,r4
    c688:	10c00035 	stwio	r3,0(r2)
    c68c:	e0bff917 	ldw	r2,-28(fp)
    c690:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c694:	e0bff417 	ldw	r2,-48(fp)
    c698:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c69c:	e0fffa17 	ldw	r3,-24(fp)
    c6a0:	e0bffc17 	ldw	r2,-16(fp)
    c6a4:	18800526 	beq	r3,r2,c6bc <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    c6a8:	e0fffa17 	ldw	r3,-24(fp)
    c6ac:	e0bffc17 	ldw	r2,-16(fp)
    c6b0:	1887c83a 	sub	r3,r3,r2
    c6b4:	e0ffff15 	stw	r3,-4(fp)
    c6b8:	00000906 	br	c6e0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    c6bc:	e0bffe17 	ldw	r2,-8(fp)
    c6c0:	1090000c 	andi	r2,r2,16384
    c6c4:	1005003a 	cmpeq	r2,r2,zero
    c6c8:	1000031e 	bne	r2,zero,c6d8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c6cc:	00bffd44 	movi	r2,-11
    c6d0:	e0bfff15 	stw	r2,-4(fp)
    c6d4:	00000206 	br	c6e0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c6d8:	00bffec4 	movi	r2,-5
    c6dc:	e0bfff15 	stw	r2,-4(fp)
    c6e0:	e0bfff17 	ldw	r2,-4(fp)
}
    c6e4:	e037883a 	mov	sp,fp
    c6e8:	dfc00117 	ldw	ra,4(sp)
    c6ec:	df000017 	ldw	fp,0(sp)
    c6f0:	dec00204 	addi	sp,sp,8
    c6f4:	f800283a 	ret

0000c6f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c6f8:	defff204 	addi	sp,sp,-56
    c6fc:	dfc00d15 	stw	ra,52(sp)
    c700:	df000c15 	stw	fp,48(sp)
    c704:	df000c04 	addi	fp,sp,48
    c708:	e13ffb15 	stw	r4,-20(fp)
    c70c:	e17ffc15 	stw	r5,-16(fp)
    c710:	e1bffd15 	stw	r6,-12(fp)
    c714:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c718:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c71c:	e0bffc17 	ldw	r2,-16(fp)
    c720:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c724:	00003a06 	br	c810 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c728:	e0bffb17 	ldw	r2,-20(fp)
    c72c:	10800c17 	ldw	r2,48(r2)
    c730:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c734:	e0bffb17 	ldw	r2,-20(fp)
    c738:	10800d17 	ldw	r2,52(r2)
    c73c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c740:	e0fffa17 	ldw	r3,-24(fp)
    c744:	e0bff917 	ldw	r2,-28(fp)
    c748:	1880062e 	bgeu	r3,r2,c764 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c74c:	e0fff917 	ldw	r3,-28(fp)
    c750:	e0bffa17 	ldw	r2,-24(fp)
    c754:	1885c83a 	sub	r2,r3,r2
    c758:	10bfffc4 	addi	r2,r2,-1
    c75c:	e0bff815 	stw	r2,-32(fp)
    c760:	00000c06 	br	c794 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c764:	e0bff917 	ldw	r2,-28(fp)
    c768:	1005003a 	cmpeq	r2,r2,zero
    c76c:	1000051e 	bne	r2,zero,c784 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c770:	00820004 	movi	r2,2048
    c774:	e0fffa17 	ldw	r3,-24(fp)
    c778:	10c5c83a 	sub	r2,r2,r3
    c77c:	e0bff815 	stw	r2,-32(fp)
    c780:	00000406 	br	c794 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c784:	0081ffc4 	movi	r2,2047
    c788:	e0fffa17 	ldw	r3,-24(fp)
    c78c:	10c5c83a 	sub	r2,r2,r3
    c790:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c794:	e0bff817 	ldw	r2,-32(fp)
    c798:	1005003a 	cmpeq	r2,r2,zero
    c79c:	10001f1e 	bne	r2,zero,c81c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c7a0:	e0fffd17 	ldw	r3,-12(fp)
    c7a4:	e0bff817 	ldw	r2,-32(fp)
    c7a8:	1880022e 	bgeu	r3,r2,c7b4 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c7ac:	e0bffd17 	ldw	r2,-12(fp)
    c7b0:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c7b4:	e0bffb17 	ldw	r2,-20(fp)
    c7b8:	10c20e04 	addi	r3,r2,2104
    c7bc:	e0bffa17 	ldw	r2,-24(fp)
    c7c0:	1885883a 	add	r2,r3,r2
    c7c4:	e0fffc17 	ldw	r3,-16(fp)
    c7c8:	1009883a 	mov	r4,r2
    c7cc:	180b883a 	mov	r5,r3
    c7d0:	e1bff817 	ldw	r6,-32(fp)
    c7d4:	0006f0c0 	call	6f0c <memcpy>
      ptr   += n;
    c7d8:	e0fff817 	ldw	r3,-32(fp)
    c7dc:	e0bffc17 	ldw	r2,-16(fp)
    c7e0:	10c5883a 	add	r2,r2,r3
    c7e4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c7e8:	e0fffd17 	ldw	r3,-12(fp)
    c7ec:	e0bff817 	ldw	r2,-32(fp)
    c7f0:	1885c83a 	sub	r2,r3,r2
    c7f4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c7f8:	e0fffa17 	ldw	r3,-24(fp)
    c7fc:	e0bff817 	ldw	r2,-32(fp)
    c800:	1885883a 	add	r2,r3,r2
    c804:	10c1ffcc 	andi	r3,r2,2047
    c808:	e0bffb17 	ldw	r2,-20(fp)
    c80c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c810:	e0bffd17 	ldw	r2,-12(fp)
    c814:	10800048 	cmpgei	r2,r2,1
    c818:	103fc31e 	bne	r2,zero,c728 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c81c:	0005303a 	rdctl	r2,status
    c820:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c824:	e0fff517 	ldw	r3,-44(fp)
    c828:	00bfff84 	movi	r2,-2
    c82c:	1884703a 	and	r2,r3,r2
    c830:	1001703a 	wrctl	status,r2
  
  return context;
    c834:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c838:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c83c:	e0bffb17 	ldw	r2,-20(fp)
    c840:	10800817 	ldw	r2,32(r2)
    c844:	10c00094 	ori	r3,r2,2
    c848:	e0bffb17 	ldw	r2,-20(fp)
    c84c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c850:	e0bffb17 	ldw	r2,-20(fp)
    c854:	10800017 	ldw	r2,0(r2)
    c858:	11000104 	addi	r4,r2,4
    c85c:	e0bffb17 	ldw	r2,-20(fp)
    c860:	10800817 	ldw	r2,32(r2)
    c864:	1007883a 	mov	r3,r2
    c868:	2005883a 	mov	r2,r4
    c86c:	10c00035 	stwio	r3,0(r2)
    c870:	e0bff717 	ldw	r2,-36(fp)
    c874:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c878:	e0bff417 	ldw	r2,-48(fp)
    c87c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c880:	e0bffd17 	ldw	r2,-12(fp)
    c884:	10800050 	cmplti	r2,r2,1
    c888:	1000111e 	bne	r2,zero,c8d0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c88c:	e0bffe17 	ldw	r2,-8(fp)
    c890:	1090000c 	andi	r2,r2,16384
    c894:	1004c03a 	cmpne	r2,r2,zero
    c898:	1000101e 	bne	r2,zero,c8dc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c89c:	e0bffb17 	ldw	r2,-20(fp)
    c8a0:	10c00d17 	ldw	r3,52(r2)
    c8a4:	e0bff917 	ldw	r2,-28(fp)
    c8a8:	1880051e 	bne	r3,r2,c8c0 <altera_avalon_jtag_uart_write+0x1c8>
    c8ac:	e0bffb17 	ldw	r2,-20(fp)
    c8b0:	10c00917 	ldw	r3,36(r2)
    c8b4:	e0bffb17 	ldw	r2,-20(fp)
    c8b8:	10800117 	ldw	r2,4(r2)
    c8bc:	18bff736 	bltu	r3,r2,c89c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c8c0:	e0bffb17 	ldw	r2,-20(fp)
    c8c4:	10c00d17 	ldw	r3,52(r2)
    c8c8:	e0bff917 	ldw	r2,-28(fp)
    c8cc:	18800326 	beq	r3,r2,c8dc <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    c8d0:	e0bffd17 	ldw	r2,-12(fp)
    c8d4:	10800048 	cmpgei	r2,r2,1
    c8d8:	103fcd1e 	bne	r2,zero,c810 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c8dc:	e0fffc17 	ldw	r3,-16(fp)
    c8e0:	e0bff617 	ldw	r2,-40(fp)
    c8e4:	18800526 	beq	r3,r2,c8fc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c8e8:	e0fffc17 	ldw	r3,-16(fp)
    c8ec:	e0bff617 	ldw	r2,-40(fp)
    c8f0:	1887c83a 	sub	r3,r3,r2
    c8f4:	e0ffff15 	stw	r3,-4(fp)
    c8f8:	00000906 	br	c920 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c8fc:	e0bffe17 	ldw	r2,-8(fp)
    c900:	1090000c 	andi	r2,r2,16384
    c904:	1005003a 	cmpeq	r2,r2,zero
    c908:	1000031e 	bne	r2,zero,c918 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c90c:	00bffd44 	movi	r2,-11
    c910:	e0bfff15 	stw	r2,-4(fp)
    c914:	00000206 	br	c920 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    c918:	00bffec4 	movi	r2,-5
    c91c:	e0bfff15 	stw	r2,-4(fp)
    c920:	e0bfff17 	ldw	r2,-4(fp)
}
    c924:	e037883a 	mov	sp,fp
    c928:	dfc00117 	ldw	ra,4(sp)
    c92c:	df000017 	ldw	fp,0(sp)
    c930:	dec00204 	addi	sp,sp,8
    c934:	f800283a 	ret

0000c938 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
    c938:	defffa04 	addi	sp,sp,-24
    c93c:	dfc00515 	stw	ra,20(sp)
    c940:	df000415 	stw	fp,16(sp)
    c944:	df000404 	addi	fp,sp,16
    c948:	e13ffe15 	stw	r4,-8(fp)
    c94c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
    c950:	e0bffe17 	ldw	r2,-8(fp)
    c954:	10800017 	ldw	r2,0(r2)
    c958:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    c95c:	008003f4 	movhi	r2,15
    c960:	10909004 	addi	r2,r2,16960
    c964:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    c968:	e0bffe17 	ldw	r2,-8(fp)
    c96c:	10800803 	ldbu	r2,32(r2)
    c970:	10803fcc 	andi	r2,r2,255
    c974:	1080201c 	xori	r2,r2,128
    c978:	10bfe004 	addi	r2,r2,-128
    c97c:	1004c03a 	cmpne	r2,r2,zero
    c980:	1000161e 	bne	r2,zero,c9dc <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    c984:	00000a06 	br	c9b0 <lcd_write_command+0x78>
    if (--i == 0)
    c988:	e0bffc17 	ldw	r2,-16(fp)
    c98c:	10bfffc4 	addi	r2,r2,-1
    c990:	e0bffc15 	stw	r2,-16(fp)
    c994:	e0bffc17 	ldw	r2,-16(fp)
    c998:	1004c03a 	cmpne	r2,r2,zero
    c99c:	1000041e 	bne	r2,zero,c9b0 <lcd_write_command+0x78>
    {
      sp->broken = 1;
    c9a0:	e0fffe17 	ldw	r3,-8(fp)
    c9a4:	00800044 	movi	r2,1
    c9a8:	18800805 	stb	r2,32(r3)
      return;
    c9ac:	00000b06 	br	c9dc <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    c9b0:	e0bffd17 	ldw	r2,-12(fp)
    c9b4:	10800104 	addi	r2,r2,4
    c9b8:	10800037 	ldwio	r2,0(r2)
    c9bc:	1080200c 	andi	r2,r2,128
    c9c0:	1004c03a 	cmpne	r2,r2,zero
    c9c4:	103ff01e 	bne	r2,zero,c988 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    c9c8:	01001904 	movi	r4,100
    c9cc:	000bc000 	call	bc00 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
    c9d0:	e0bffd17 	ldw	r2,-12(fp)
    c9d4:	e0ffff03 	ldbu	r3,-4(fp)
    c9d8:	10c00035 	stwio	r3,0(r2)
}
    c9dc:	e037883a 	mov	sp,fp
    c9e0:	dfc00117 	ldw	ra,4(sp)
    c9e4:	df000017 	ldw	fp,0(sp)
    c9e8:	dec00204 	addi	sp,sp,8
    c9ec:	f800283a 	ret

0000c9f0 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
    c9f0:	defffa04 	addi	sp,sp,-24
    c9f4:	dfc00515 	stw	ra,20(sp)
    c9f8:	df000415 	stw	fp,16(sp)
    c9fc:	df000404 	addi	fp,sp,16
    ca00:	e13ffe15 	stw	r4,-8(fp)
    ca04:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
    ca08:	e0bffe17 	ldw	r2,-8(fp)
    ca0c:	10800017 	ldw	r2,0(r2)
    ca10:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    ca14:	008003f4 	movhi	r2,15
    ca18:	10909004 	addi	r2,r2,16960
    ca1c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    ca20:	e0bffe17 	ldw	r2,-8(fp)
    ca24:	10800803 	ldbu	r2,32(r2)
    ca28:	10803fcc 	andi	r2,r2,255
    ca2c:	1080201c 	xori	r2,r2,128
    ca30:	10bfe004 	addi	r2,r2,-128
    ca34:	1004c03a 	cmpne	r2,r2,zero
    ca38:	10001d1e 	bne	r2,zero,cab0 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    ca3c:	00000a06 	br	ca68 <lcd_write_data+0x78>
    if (--i == 0)
    ca40:	e0bffc17 	ldw	r2,-16(fp)
    ca44:	10bfffc4 	addi	r2,r2,-1
    ca48:	e0bffc15 	stw	r2,-16(fp)
    ca4c:	e0bffc17 	ldw	r2,-16(fp)
    ca50:	1004c03a 	cmpne	r2,r2,zero
    ca54:	1000041e 	bne	r2,zero,ca68 <lcd_write_data+0x78>
    {
      sp->broken = 1;
    ca58:	e0fffe17 	ldw	r3,-8(fp)
    ca5c:	00800044 	movi	r2,1
    ca60:	18800805 	stb	r2,32(r3)
      return;
    ca64:	00001206 	br	cab0 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    ca68:	e0bffd17 	ldw	r2,-12(fp)
    ca6c:	10800104 	addi	r2,r2,4
    ca70:	10800037 	ldwio	r2,0(r2)
    ca74:	1080200c 	andi	r2,r2,128
    ca78:	1004c03a 	cmpne	r2,r2,zero
    ca7c:	103ff01e 	bne	r2,zero,ca40 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    ca80:	01001904 	movi	r4,100
    ca84:	000bc000 	call	bc00 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
    ca88:	e0bffd17 	ldw	r2,-12(fp)
    ca8c:	10800204 	addi	r2,r2,8
    ca90:	e0ffff03 	ldbu	r3,-4(fp)
    ca94:	10c00035 	stwio	r3,0(r2)

  sp->address++;
    ca98:	e0bffe17 	ldw	r2,-8(fp)
    ca9c:	108008c3 	ldbu	r2,35(r2)
    caa0:	10800044 	addi	r2,r2,1
    caa4:	1007883a 	mov	r3,r2
    caa8:	e0bffe17 	ldw	r2,-8(fp)
    caac:	10c008c5 	stb	r3,35(r2)
}
    cab0:	e037883a 	mov	sp,fp
    cab4:	dfc00117 	ldw	ra,4(sp)
    cab8:	df000017 	ldw	fp,0(sp)
    cabc:	dec00204 	addi	sp,sp,8
    cac0:	f800283a 	ret

0000cac4 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
    cac4:	defffc04 	addi	sp,sp,-16
    cac8:	dfc00315 	stw	ra,12(sp)
    cacc:	df000215 	stw	fp,8(sp)
    cad0:	df000204 	addi	fp,sp,8
    cad4:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
    cad8:	e13fff17 	ldw	r4,-4(fp)
    cadc:	01400044 	movi	r5,1
    cae0:	000c9380 	call	c938 <lcd_write_command>

  sp->x = 0;
    cae4:	e0bfff17 	ldw	r2,-4(fp)
    cae8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
    caec:	e0bfff17 	ldw	r2,-4(fp)
    caf0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
    caf4:	e0bfff17 	ldw	r2,-4(fp)
    caf8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cafc:	e03ffe15 	stw	zero,-8(fp)
    cb00:	00001906 	br	cb68 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    cb04:	e0bffe17 	ldw	r2,-8(fp)
    cb08:	108018e4 	muli	r2,r2,99
    cb0c:	10c01004 	addi	r3,r2,64
    cb10:	e0bfff17 	ldw	r2,-4(fp)
    cb14:	1889883a 	add	r4,r3,r2
    cb18:	01400804 	movi	r5,32
    cb1c:	01801444 	movi	r6,81
    cb20:	000708c0 	call	708c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    cb24:	e0bffe17 	ldw	r2,-8(fp)
    cb28:	108018e4 	muli	r2,r2,99
    cb2c:	10c00c04 	addi	r3,r2,48
    cb30:	e0bfff17 	ldw	r2,-4(fp)
    cb34:	1889883a 	add	r4,r3,r2
    cb38:	01400804 	movi	r5,32
    cb3c:	01800404 	movi	r6,16
    cb40:	000708c0 	call	708c <memset>
    sp->line[y].width = 0;
    cb44:	e0bffe17 	ldw	r2,-8(fp)
    cb48:	e0ffff17 	ldw	r3,-4(fp)
    cb4c:	108018e4 	muli	r2,r2,99
    cb50:	10c5883a 	add	r2,r2,r3
    cb54:	10802404 	addi	r2,r2,144
    cb58:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cb5c:	e0bffe17 	ldw	r2,-8(fp)
    cb60:	10800044 	addi	r2,r2,1
    cb64:	e0bffe15 	stw	r2,-8(fp)
    cb68:	e0bffe17 	ldw	r2,-8(fp)
    cb6c:	10800090 	cmplti	r2,r2,2
    cb70:	103fe41e 	bne	r2,zero,cb04 <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
    cb74:	e037883a 	mov	sp,fp
    cb78:	dfc00117 	ldw	ra,4(sp)
    cb7c:	df000017 	ldw	fp,0(sp)
    cb80:	dec00204 	addi	sp,sp,8
    cb84:	f800283a 	ret

0000cb88 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
    cb88:	defff604 	addi	sp,sp,-40
    cb8c:	dfc00915 	stw	ra,36(sp)
    cb90:	df000815 	stw	fp,32(sp)
    cb94:	dc000715 	stw	r16,28(sp)
    cb98:	df000704 	addi	fp,sp,28
    cb9c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
    cba0:	e0bfff17 	ldw	r2,-4(fp)
    cba4:	10800943 	ldbu	r2,37(r2)
    cba8:	10803fcc 	andi	r2,r2,255
    cbac:	1080201c 	xori	r2,r2,128
    cbb0:	10bfe004 	addi	r2,r2,-128
    cbb4:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cbb8:	e03ffe15 	stw	zero,-8(fp)
    cbbc:	00006406 	br	cd50 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
    cbc0:	e0bffe17 	ldw	r2,-8(fp)
    cbc4:	e0ffff17 	ldw	r3,-4(fp)
    cbc8:	108018e4 	muli	r2,r2,99
    cbcc:	10c5883a 	add	r2,r2,r3
    cbd0:	10802404 	addi	r2,r2,144
    cbd4:	10800043 	ldbu	r2,1(r2)
    cbd8:	10803fcc 	andi	r2,r2,255
    cbdc:	1080201c 	xori	r2,r2,128
    cbe0:	10bfe004 	addi	r2,r2,-128
    cbe4:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    cbe8:	e0bffe17 	ldw	r2,-8(fp)
    cbec:	e0ffff17 	ldw	r3,-4(fp)
    cbf0:	108018e4 	muli	r2,r2,99
    cbf4:	10c5883a 	add	r2,r2,r3
    cbf8:	10802404 	addi	r2,r2,144
    cbfc:	10800083 	ldbu	r2,2(r2)
    cc00:	10c03fcc 	andi	r3,r2,255
    cc04:	e0bffc17 	ldw	r2,-16(fp)
    cc08:	1885383a 	mul	r2,r3,r2
    cc0c:	1005d23a 	srai	r2,r2,8
    cc10:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
    cc14:	e0fffa17 	ldw	r3,-24(fp)
    cc18:	e0bffb17 	ldw	r2,-20(fp)
    cc1c:	18800116 	blt	r3,r2,cc24 <lcd_repaint_screen+0x9c>
      offset = 0;
    cc20:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    cc24:	e03ffd15 	stw	zero,-12(fp)
    cc28:	00004306 	br	cd38 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
    cc2c:	e43ffe17 	ldw	r16,-8(fp)
    cc30:	e0fffd17 	ldw	r3,-12(fp)
    cc34:	e0bffa17 	ldw	r2,-24(fp)
    cc38:	1889883a 	add	r4,r3,r2
    cc3c:	e17ffb17 	ldw	r5,-20(fp)
    cc40:	0001a6c0 	call	1a6c <__modsi3>
    cc44:	1009883a 	mov	r4,r2
    cc48:	e0ffff17 	ldw	r3,-4(fp)
    cc4c:	808018e4 	muli	r2,r16,99
    cc50:	10c5883a 	add	r2,r2,r3
    cc54:	1105883a 	add	r2,r2,r4
    cc58:	10801004 	addi	r2,r2,64
    cc5c:	10800003 	ldbu	r2,0(r2)
    cc60:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
    cc64:	e0bffe17 	ldw	r2,-8(fp)
    cc68:	e13ffd17 	ldw	r4,-12(fp)
    cc6c:	e0ffff17 	ldw	r3,-4(fp)
    cc70:	108018e4 	muli	r2,r2,99
    cc74:	10c5883a 	add	r2,r2,r3
    cc78:	1105883a 	add	r2,r2,r4
    cc7c:	10800c04 	addi	r2,r2,48
    cc80:	10800003 	ldbu	r2,0(r2)
    cc84:	10c03fcc 	andi	r3,r2,255
    cc88:	18c0201c 	xori	r3,r3,128
    cc8c:	18ffe004 	addi	r3,r3,-128
    cc90:	e0bff947 	ldb	r2,-27(fp)
    cc94:	18802526 	beq	r3,r2,cd2c <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
    cc98:	e0fffe17 	ldw	r3,-8(fp)
    cc9c:	d0a00f04 	addi	r2,gp,-32708
    cca0:	1885883a 	add	r2,r3,r2
    cca4:	10800003 	ldbu	r2,0(r2)
    cca8:	1007883a 	mov	r3,r2
    ccac:	e0bffd17 	ldw	r2,-12(fp)
    ccb0:	1885883a 	add	r2,r3,r2
    ccb4:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
    ccb8:	e0fff903 	ldbu	r3,-28(fp)
    ccbc:	e0bfff17 	ldw	r2,-4(fp)
    ccc0:	108008c3 	ldbu	r2,35(r2)
    ccc4:	10803fcc 	andi	r2,r2,255
    ccc8:	1080201c 	xori	r2,r2,128
    cccc:	10bfe004 	addi	r2,r2,-128
    ccd0:	18800926 	beq	r3,r2,ccf8 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
    ccd4:	e0fff903 	ldbu	r3,-28(fp)
    ccd8:	00bfe004 	movi	r2,-128
    ccdc:	1884b03a 	or	r2,r3,r2
    cce0:	11403fcc 	andi	r5,r2,255
    cce4:	e13fff17 	ldw	r4,-4(fp)
    cce8:	000c9380 	call	c938 <lcd_write_command>
          sp->address = address;
    ccec:	e0fff903 	ldbu	r3,-28(fp)
    ccf0:	e0bfff17 	ldw	r2,-4(fp)
    ccf4:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
    ccf8:	e0bff943 	ldbu	r2,-27(fp)
    ccfc:	11403fcc 	andi	r5,r2,255
    cd00:	e13fff17 	ldw	r4,-4(fp)
    cd04:	000c9f00 	call	c9f0 <lcd_write_data>
        sp->line[y].visible[x] = c;
    cd08:	e0bffe17 	ldw	r2,-8(fp)
    cd0c:	e13ffd17 	ldw	r4,-12(fp)
    cd10:	e0ffff17 	ldw	r3,-4(fp)
    cd14:	108018e4 	muli	r2,r2,99
    cd18:	10c5883a 	add	r2,r2,r3
    cd1c:	1105883a 	add	r2,r2,r4
    cd20:	10c00c04 	addi	r3,r2,48
    cd24:	e0bff943 	ldbu	r2,-27(fp)
    cd28:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    cd2c:	e0bffd17 	ldw	r2,-12(fp)
    cd30:	10800044 	addi	r2,r2,1
    cd34:	e0bffd15 	stw	r2,-12(fp)
    cd38:	e0bffd17 	ldw	r2,-12(fp)
    cd3c:	10800410 	cmplti	r2,r2,16
    cd40:	103fba1e 	bne	r2,zero,cc2c <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cd44:	e0bffe17 	ldw	r2,-8(fp)
    cd48:	10800044 	addi	r2,r2,1
    cd4c:	e0bffe15 	stw	r2,-8(fp)
    cd50:	e0bffe17 	ldw	r2,-8(fp)
    cd54:	10800090 	cmplti	r2,r2,2
    cd58:	103f991e 	bne	r2,zero,cbc0 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
    cd5c:	e037883a 	mov	sp,fp
    cd60:	dfc00217 	ldw	ra,8(sp)
    cd64:	df000117 	ldw	fp,4(sp)
    cd68:	dc000017 	ldw	r16,0(sp)
    cd6c:	dec00304 	addi	sp,sp,12
    cd70:	f800283a 	ret

0000cd74 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
    cd74:	defffc04 	addi	sp,sp,-16
    cd78:	dfc00315 	stw	ra,12(sp)
    cd7c:	df000215 	stw	fp,8(sp)
    cd80:	df000204 	addi	fp,sp,8
    cd84:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cd88:	e03ffe15 	stw	zero,-8(fp)
    cd8c:	00001d06 	br	ce04 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
    cd90:	e0bffe17 	ldw	r2,-8(fp)
    cd94:	10800048 	cmpgei	r2,r2,1
    cd98:	10000f1e 	bne	r2,zero,cdd8 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    cd9c:	e0bffe17 	ldw	r2,-8(fp)
    cda0:	108018e4 	muli	r2,r2,99
    cda4:	10c01004 	addi	r3,r2,64
    cda8:	e0bfff17 	ldw	r2,-4(fp)
    cdac:	1889883a 	add	r4,r3,r2
    cdb0:	e0bffe17 	ldw	r2,-8(fp)
    cdb4:	10800044 	addi	r2,r2,1
    cdb8:	108018e4 	muli	r2,r2,99
    cdbc:	10c01004 	addi	r3,r2,64
    cdc0:	e0bfff17 	ldw	r2,-4(fp)
    cdc4:	1885883a 	add	r2,r3,r2
    cdc8:	100b883a 	mov	r5,r2
    cdcc:	01801404 	movi	r6,80
    cdd0:	0006f0c0 	call	6f0c <memcpy>
    cdd4:	00000806 	br	cdf8 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
    cdd8:	e0bffe17 	ldw	r2,-8(fp)
    cddc:	108018e4 	muli	r2,r2,99
    cde0:	10c01004 	addi	r3,r2,64
    cde4:	e0bfff17 	ldw	r2,-4(fp)
    cde8:	1889883a 	add	r4,r3,r2
    cdec:	01400804 	movi	r5,32
    cdf0:	01801404 	movi	r6,80
    cdf4:	000708c0 	call	708c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cdf8:	e0bffe17 	ldw	r2,-8(fp)
    cdfc:	10800044 	addi	r2,r2,1
    ce00:	e0bffe15 	stw	r2,-8(fp)
    ce04:	e0bffe17 	ldw	r2,-8(fp)
    ce08:	10800090 	cmplti	r2,r2,2
    ce0c:	103fe01e 	bne	r2,zero,cd90 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
    ce10:	e0bfff17 	ldw	r2,-4(fp)
    ce14:	10800883 	ldbu	r2,34(r2)
    ce18:	10bfffc4 	addi	r2,r2,-1
    ce1c:	1007883a 	mov	r3,r2
    ce20:	e0bfff17 	ldw	r2,-4(fp)
    ce24:	10c00885 	stb	r3,34(r2)
}
    ce28:	e037883a 	mov	sp,fp
    ce2c:	dfc00117 	ldw	ra,4(sp)
    ce30:	df000017 	ldw	fp,0(sp)
    ce34:	dec00204 	addi	sp,sp,8
    ce38:	f800283a 	ret

0000ce3c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
    ce3c:	defff804 	addi	sp,sp,-32
    ce40:	dfc00715 	stw	ra,28(sp)
    ce44:	df000615 	stw	fp,24(sp)
    ce48:	df000604 	addi	fp,sp,24
    ce4c:	e13ffd15 	stw	r4,-12(fp)
    ce50:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
    ce54:	e03ffc15 	stw	zero,-16(fp)
    ce58:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
    ce5c:	e0bffd17 	ldw	r2,-12(fp)
    ce60:	10800a03 	ldbu	r2,40(r2)
    ce64:	10803fcc 	andi	r2,r2,255
    ce68:	1080201c 	xori	r2,r2,128
    ce6c:	10bfe004 	addi	r2,r2,-128
    ce70:	108016d8 	cmpnei	r2,r2,91
    ce74:	1000491e 	bne	r2,zero,cf9c <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
    ce78:	e0bffd17 	ldw	r2,-12(fp)
    ce7c:	10800a04 	addi	r2,r2,40
    ce80:	10800044 	addi	r2,r2,1
    ce84:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
    ce88:	00000d06 	br	cec0 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
    ce8c:	e0bffc17 	ldw	r2,-16(fp)
    ce90:	10c002a4 	muli	r3,r2,10
    ce94:	e0bffa17 	ldw	r2,-24(fp)
    ce98:	10800003 	ldbu	r2,0(r2)
    ce9c:	10803fcc 	andi	r2,r2,255
    cea0:	1080201c 	xori	r2,r2,128
    cea4:	10bfe004 	addi	r2,r2,-128
    cea8:	1885883a 	add	r2,r3,r2
    ceac:	10bff404 	addi	r2,r2,-48
    ceb0:	e0bffc15 	stw	r2,-16(fp)
    ceb4:	e0bffa17 	ldw	r2,-24(fp)
    ceb8:	10800044 	addi	r2,r2,1
    cebc:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
    cec0:	e0bffa17 	ldw	r2,-24(fp)
    cec4:	10800003 	ldbu	r2,0(r2)
    cec8:	10803fcc 	andi	r2,r2,255
    cecc:	1080201c 	xori	r2,r2,128
    ced0:	10bfe004 	addi	r2,r2,-128
    ced4:	1007883a 	mov	r3,r2
    ced8:	00800074 	movhi	r2,1
    cedc:	10854904 	addi	r2,r2,5412
    cee0:	10800017 	ldw	r2,0(r2)
    cee4:	1885883a 	add	r2,r3,r2
    cee8:	10800003 	ldbu	r2,0(r2)
    ceec:	10803fcc 	andi	r2,r2,255
    cef0:	1080010c 	andi	r2,r2,4
    cef4:	1004c03a 	cmpne	r2,r2,zero
    cef8:	103fe41e 	bne	r2,zero,ce8c <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    cefc:	e0bffa17 	ldw	r2,-24(fp)
    cf00:	10800003 	ldbu	r2,0(r2)
    cf04:	10803fcc 	andi	r2,r2,255
    cf08:	1080201c 	xori	r2,r2,128
    cf0c:	10bfe004 	addi	r2,r2,-128
    cf10:	10800ed8 	cmpnei	r2,r2,59
    cf14:	1000231e 	bne	r2,zero,cfa4 <lcd_handle_escape+0x168>
    {
      ptr++;
    cf18:	e0bffa17 	ldw	r2,-24(fp)
    cf1c:	10800044 	addi	r2,r2,1
    cf20:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
    cf24:	00000d06 	br	cf5c <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    cf28:	e0bffb17 	ldw	r2,-20(fp)
    cf2c:	10c002a4 	muli	r3,r2,10
    cf30:	e0bffa17 	ldw	r2,-24(fp)
    cf34:	10800003 	ldbu	r2,0(r2)
    cf38:	10803fcc 	andi	r2,r2,255
    cf3c:	1080201c 	xori	r2,r2,128
    cf40:	10bfe004 	addi	r2,r2,-128
    cf44:	1885883a 	add	r2,r3,r2
    cf48:	10bff404 	addi	r2,r2,-48
    cf4c:	e0bffb15 	stw	r2,-20(fp)
    cf50:	e0bffa17 	ldw	r2,-24(fp)
    cf54:	10800044 	addi	r2,r2,1
    cf58:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
    cf5c:	e0bffa17 	ldw	r2,-24(fp)
    cf60:	10800003 	ldbu	r2,0(r2)
    cf64:	10803fcc 	andi	r2,r2,255
    cf68:	1080201c 	xori	r2,r2,128
    cf6c:	10bfe004 	addi	r2,r2,-128
    cf70:	1007883a 	mov	r3,r2
    cf74:	00800074 	movhi	r2,1
    cf78:	10854904 	addi	r2,r2,5412
    cf7c:	10800017 	ldw	r2,0(r2)
    cf80:	1885883a 	add	r2,r3,r2
    cf84:	10800003 	ldbu	r2,0(r2)
    cf88:	10803fcc 	andi	r2,r2,255
    cf8c:	1080010c 	andi	r2,r2,4
    cf90:	1004c03a 	cmpne	r2,r2,zero
    cf94:	103fe41e 	bne	r2,zero,cf28 <lcd_handle_escape+0xec>
    cf98:	00000206 	br	cfa4 <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
    cf9c:	00bfffc4 	movi	r2,-1
    cfa0:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
    cfa4:	e0bffe07 	ldb	r2,-8(fp)
    cfa8:	e0bfff15 	stw	r2,-4(fp)
    cfac:	e0ffff17 	ldw	r3,-4(fp)
    cfb0:	188012a0 	cmpeqi	r2,r3,74
    cfb4:	10002f1e 	bne	r2,zero,d074 <lcd_handle_escape+0x238>
    cfb8:	e0ffff17 	ldw	r3,-4(fp)
    cfbc:	188012c8 	cmpgei	r2,r3,75
    cfc0:	1000041e 	bne	r2,zero,cfd4 <lcd_handle_escape+0x198>
    cfc4:	e0ffff17 	ldw	r3,-4(fp)
    cfc8:	18801220 	cmpeqi	r2,r3,72
    cfcc:	1000081e 	bne	r2,zero,cff0 <lcd_handle_escape+0x1b4>
    cfd0:	00004906 	br	d0f8 <lcd_handle_escape+0x2bc>
    cfd4:	e0ffff17 	ldw	r3,-4(fp)
    cfd8:	188012e0 	cmpeqi	r2,r3,75
    cfdc:	10002b1e 	bne	r2,zero,d08c <lcd_handle_escape+0x250>
    cfe0:	e0ffff17 	ldw	r3,-4(fp)
    cfe4:	188019a0 	cmpeqi	r2,r3,102
    cfe8:	1000011e 	bne	r2,zero,cff0 <lcd_handle_escape+0x1b4>
    cfec:	00004206 	br	d0f8 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
    cff0:	e0bffb17 	ldw	r2,-20(fp)
    cff4:	10800050 	cmplti	r2,r2,1
    cff8:	1000051e 	bne	r2,zero,d010 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
    cffc:	e0bffb17 	ldw	r2,-20(fp)
    d000:	10bfffc4 	addi	r2,r2,-1
    d004:	1007883a 	mov	r3,r2
    d008:	e0bffd17 	ldw	r2,-12(fp)
    d00c:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
    d010:	e0bffc17 	ldw	r2,-16(fp)
    d014:	10800050 	cmplti	r2,r2,1
    d018:	1000371e 	bne	r2,zero,d0f8 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
    d01c:	e0bffc17 	ldw	r2,-16(fp)
    d020:	10bfffc4 	addi	r2,r2,-1
    d024:	1007883a 	mov	r3,r2
    d028:	e0bffd17 	ldw	r2,-12(fp)
    d02c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
    d030:	e0bffd17 	ldw	r2,-12(fp)
    d034:	10800883 	ldbu	r2,34(r2)
    d038:	10803fcc 	andi	r2,r2,255
    d03c:	10800170 	cmpltui	r2,r2,5
    d040:	1000061e 	bne	r2,zero,d05c <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
    d044:	e0fffd17 	ldw	r3,-12(fp)
    d048:	00800104 	movi	r2,4
    d04c:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
    d050:	00000206 	br	d05c <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
    d054:	e13ffd17 	ldw	r4,-12(fp)
    d058:	000cd740 	call	cd74 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
    d05c:	e0bffd17 	ldw	r2,-12(fp)
    d060:	10800883 	ldbu	r2,34(r2)
    d064:	10803fcc 	andi	r2,r2,255
    d068:	108000e8 	cmpgeui	r2,r2,3
    d06c:	103ff91e 	bne	r2,zero,d054 <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
    d070:	00002106 	br	d0f8 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
    d074:	e0bffc17 	ldw	r2,-16(fp)
    d078:	10800098 	cmpnei	r2,r2,2
    d07c:	10001e1e 	bne	r2,zero,d0f8 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
    d080:	e13ffd17 	ldw	r4,-12(fp)
    d084:	000cac40 	call	cac4 <lcd_clear_screen>
    break;
    d088:	00001b06 	br	d0f8 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
    d08c:	e0bffc17 	ldw	r2,-16(fp)
    d090:	10800048 	cmpgei	r2,r2,1
    d094:	1000181e 	bne	r2,zero,d0f8 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    d098:	e0bffd17 	ldw	r2,-12(fp)
    d09c:	10800843 	ldbu	r2,33(r2)
    d0a0:	10803fcc 	andi	r2,r2,255
    d0a4:	10801428 	cmpgeui	r2,r2,80
    d0a8:	1000131e 	bne	r2,zero,d0f8 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    d0ac:	e0bffd17 	ldw	r2,-12(fp)
    d0b0:	10800883 	ldbu	r2,34(r2)
    d0b4:	10803fcc 	andi	r2,r2,255
    d0b8:	108018e4 	muli	r2,r2,99
    d0bc:	10c01004 	addi	r3,r2,64
    d0c0:	e0bffd17 	ldw	r2,-12(fp)
    d0c4:	1887883a 	add	r3,r3,r2
    d0c8:	e0bffd17 	ldw	r2,-12(fp)
    d0cc:	10800843 	ldbu	r2,33(r2)
    d0d0:	10803fcc 	andi	r2,r2,255
    d0d4:	1889883a 	add	r4,r3,r2
    d0d8:	e0bffd17 	ldw	r2,-12(fp)
    d0dc:	10800843 	ldbu	r2,33(r2)
    d0e0:	10c03fcc 	andi	r3,r2,255
    d0e4:	00801404 	movi	r2,80
    d0e8:	10c5c83a 	sub	r2,r2,r3
    d0ec:	100d883a 	mov	r6,r2
    d0f0:	01400804 	movi	r5,32
    d0f4:	000708c0 	call	708c <memset>
    }
    break;
  }
}
    d0f8:	e037883a 	mov	sp,fp
    d0fc:	dfc00117 	ldw	ra,4(sp)
    d100:	df000017 	ldw	fp,0(sp)
    d104:	dec00204 	addi	sp,sp,8
    d108:	f800283a 	ret

0000d10c <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
    d10c:	defff204 	addi	sp,sp,-56
    d110:	dfc00d15 	stw	ra,52(sp)
    d114:	df000c15 	stw	fp,48(sp)
    d118:	dc000b15 	stw	r16,44(sp)
    d11c:	df000b04 	addi	fp,sp,44
    d120:	e13ffc15 	stw	r4,-16(fp)
    d124:	e17ffd15 	stw	r5,-12(fp)
    d128:	e1bffe15 	stw	r6,-8(fp)
    d12c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
    d130:	e0bffe17 	ldw	r2,-8(fp)
    d134:	1007883a 	mov	r3,r2
    d138:	e0bffd17 	ldw	r2,-12(fp)
    d13c:	10c5883a 	add	r2,r2,r3
    d140:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
    d144:	e0fffc17 	ldw	r3,-16(fp)
    d148:	00800044 	movi	r2,1
    d14c:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
    d150:	0000a206 	br	d3dc <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
    d154:	e0bffd17 	ldw	r2,-12(fp)
    d158:	10800003 	ldbu	r2,0(r2)
    d15c:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
    d160:	e0bffc17 	ldw	r2,-16(fp)
    d164:	10800903 	ldbu	r2,36(r2)
    d168:	10803fcc 	andi	r2,r2,255
    d16c:	1080201c 	xori	r2,r2,128
    d170:	10bfe004 	addi	r2,r2,-128
    d174:	1004803a 	cmplt	r2,r2,zero
    d178:	10003b1e 	bne	r2,zero,d268 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
    d17c:	e0bffc17 	ldw	r2,-16(fp)
    d180:	10800903 	ldbu	r2,36(r2)
    d184:	10803fcc 	andi	r2,r2,255
    d188:	1080201c 	xori	r2,r2,128
    d18c:	10bfe004 	addi	r2,r2,-128
    d190:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    d194:	e0bff717 	ldw	r2,-36(fp)
    d198:	1004c03a 	cmpne	r2,r2,zero
    d19c:	1000031e 	bne	r2,zero,d1ac <altera_avalon_lcd_16207_write+0xa0>
    d1a0:	e0bff807 	ldb	r2,-32(fp)
    d1a4:	108016d8 	cmpnei	r2,r2,91
    d1a8:	1000111e 	bne	r2,zero,d1f0 <altera_avalon_lcd_16207_write+0xe4>
    d1ac:	e0bff717 	ldw	r2,-36(fp)
    d1b0:	1005003a 	cmpeq	r2,r2,zero
    d1b4:	10001a1e 	bne	r2,zero,d220 <altera_avalon_lcd_16207_write+0x114>
    d1b8:	e0bff807 	ldb	r2,-32(fp)
    d1bc:	1007883a 	mov	r3,r2
    d1c0:	00800074 	movhi	r2,1
    d1c4:	10854904 	addi	r2,r2,5412
    d1c8:	10800017 	ldw	r2,0(r2)
    d1cc:	1885883a 	add	r2,r3,r2
    d1d0:	10800003 	ldbu	r2,0(r2)
    d1d4:	10803fcc 	andi	r2,r2,255
    d1d8:	1080010c 	andi	r2,r2,4
    d1dc:	1004c03a 	cmpne	r2,r2,zero
    d1e0:	10000f1e 	bne	r2,zero,d220 <altera_avalon_lcd_16207_write+0x114>
    d1e4:	e0bff807 	ldb	r2,-32(fp)
    d1e8:	10800ee0 	cmpeqi	r2,r2,59
    d1ec:	10000c1e 	bne	r2,zero,d220 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
    d1f0:	e0fff717 	ldw	r3,-36(fp)
    d1f4:	e0bffc17 	ldw	r2,-16(fp)
    d1f8:	1885883a 	add	r2,r3,r2
    d1fc:	10800a04 	addi	r2,r2,40
    d200:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
    d204:	e17ff807 	ldb	r5,-32(fp)
    d208:	e13ffc17 	ldw	r4,-16(fp)
    d20c:	000ce3c0 	call	ce3c <lcd_handle_escape>

        sp->esccount = -1;
    d210:	e0fffc17 	ldw	r3,-16(fp)
    d214:	00bfffc4 	movi	r2,-1
    d218:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    d21c:	00006c06 	br	d3d0 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
    d220:	e0bffc17 	ldw	r2,-16(fp)
    d224:	10800903 	ldbu	r2,36(r2)
    d228:	10803fcc 	andi	r2,r2,255
    d22c:	108001e8 	cmpgeui	r2,r2,7
    d230:	1000671e 	bne	r2,zero,d3d0 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
    d234:	e0fff717 	ldw	r3,-36(fp)
    d238:	e0bffc17 	ldw	r2,-16(fp)
    d23c:	1885883a 	add	r2,r3,r2
    d240:	10c00a04 	addi	r3,r2,40
    d244:	e0bff803 	ldbu	r2,-32(fp)
    d248:	18800005 	stb	r2,0(r3)
        sp->esccount++;
    d24c:	e0bffc17 	ldw	r2,-16(fp)
    d250:	10800903 	ldbu	r2,36(r2)
    d254:	10800044 	addi	r2,r2,1
    d258:	1007883a 	mov	r3,r2
    d25c:	e0bffc17 	ldw	r2,-16(fp)
    d260:	10c00905 	stb	r3,36(r2)
    d264:	00005a06 	br	d3d0 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
    d268:	e0bff807 	ldb	r2,-32(fp)
    d26c:	108006d8 	cmpnei	r2,r2,27
    d270:	1000031e 	bne	r2,zero,d280 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
    d274:	e0bffc17 	ldw	r2,-16(fp)
    d278:	10000905 	stb	zero,36(r2)
    d27c:	00005406 	br	d3d0 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
    d280:	e0bff807 	ldb	r2,-32(fp)
    d284:	10800358 	cmpnei	r2,r2,13
    d288:	1000031e 	bne	r2,zero,d298 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
    d28c:	e0bffc17 	ldw	r2,-16(fp)
    d290:	10000845 	stb	zero,33(r2)
    d294:	00004e06 	br	d3d0 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
    d298:	e0bff807 	ldb	r2,-32(fp)
    d29c:	10800298 	cmpnei	r2,r2,10
    d2a0:	1000101e 	bne	r2,zero,d2e4 <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
    d2a4:	e0bffc17 	ldw	r2,-16(fp)
    d2a8:	10000845 	stb	zero,33(r2)
      sp->y++;
    d2ac:	e0bffc17 	ldw	r2,-16(fp)
    d2b0:	10800883 	ldbu	r2,34(r2)
    d2b4:	10800044 	addi	r2,r2,1
    d2b8:	1007883a 	mov	r3,r2
    d2bc:	e0bffc17 	ldw	r2,-16(fp)
    d2c0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
    d2c4:	e0bffc17 	ldw	r2,-16(fp)
    d2c8:	10800883 	ldbu	r2,34(r2)
    d2cc:	10803fcc 	andi	r2,r2,255
    d2d0:	108000f0 	cmpltui	r2,r2,3
    d2d4:	10003e1e 	bne	r2,zero,d3d0 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
    d2d8:	e13ffc17 	ldw	r4,-16(fp)
    d2dc:	000cd740 	call	cd74 <lcd_scroll_up>
    d2e0:	00003b06 	br	d3d0 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
    d2e4:	e0bff807 	ldb	r2,-32(fp)
    d2e8:	10800218 	cmpnei	r2,r2,8
    d2ec:	10000c1e 	bne	r2,zero,d320 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
    d2f0:	e0bffc17 	ldw	r2,-16(fp)
    d2f4:	10800843 	ldbu	r2,33(r2)
    d2f8:	10803fcc 	andi	r2,r2,255
    d2fc:	1005003a 	cmpeq	r2,r2,zero
    d300:	1000331e 	bne	r2,zero,d3d0 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
    d304:	e0bffc17 	ldw	r2,-16(fp)
    d308:	10800843 	ldbu	r2,33(r2)
    d30c:	10bfffc4 	addi	r2,r2,-1
    d310:	1007883a 	mov	r3,r2
    d314:	e0bffc17 	ldw	r2,-16(fp)
    d318:	10c00845 	stb	r3,33(r2)
    d31c:	00002c06 	br	d3d0 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
    d320:	e0bff807 	ldb	r2,-32(fp)
    d324:	1007883a 	mov	r3,r2
    d328:	00800074 	movhi	r2,1
    d32c:	10854904 	addi	r2,r2,5412
    d330:	10800017 	ldw	r2,0(r2)
    d334:	1885883a 	add	r2,r3,r2
    d338:	10800003 	ldbu	r2,0(r2)
    d33c:	10803fcc 	andi	r2,r2,255
    d340:	1080201c 	xori	r2,r2,128
    d344:	10bfe004 	addi	r2,r2,-128
    d348:	108025cc 	andi	r2,r2,151
    d34c:	1005003a 	cmpeq	r2,r2,zero
    d350:	10001f1e 	bne	r2,zero,d3d0 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
    d354:	e0bffc17 	ldw	r2,-16(fp)
    d358:	10800883 	ldbu	r2,34(r2)
    d35c:	10803fcc 	andi	r2,r2,255
    d360:	108000b0 	cmpltui	r2,r2,2
    d364:	1000021e 	bne	r2,zero,d370 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
    d368:	e13ffc17 	ldw	r4,-16(fp)
    d36c:	000cd740 	call	cd74 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    d370:	e0bffc17 	ldw	r2,-16(fp)
    d374:	10800843 	ldbu	r2,33(r2)
    d378:	10803fcc 	andi	r2,r2,255
    d37c:	10801428 	cmpgeui	r2,r2,80
    d380:	10000d1e 	bne	r2,zero,d3b8 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
    d384:	e0bffc17 	ldw	r2,-16(fp)
    d388:	10800883 	ldbu	r2,34(r2)
    d38c:	11003fcc 	andi	r4,r2,255
    d390:	e0bffc17 	ldw	r2,-16(fp)
    d394:	10800843 	ldbu	r2,33(r2)
    d398:	11403fcc 	andi	r5,r2,255
    d39c:	e0fffc17 	ldw	r3,-16(fp)
    d3a0:	208018e4 	muli	r2,r4,99
    d3a4:	10c5883a 	add	r2,r2,r3
    d3a8:	1145883a 	add	r2,r2,r5
    d3ac:	10c01004 	addi	r3,r2,64
    d3b0:	e0bff803 	ldbu	r2,-32(fp)
    d3b4:	18800005 	stb	r2,0(r3)

      sp->x++;
    d3b8:	e0bffc17 	ldw	r2,-16(fp)
    d3bc:	10800843 	ldbu	r2,33(r2)
    d3c0:	10800044 	addi	r2,r2,1
    d3c4:	1007883a 	mov	r3,r2
    d3c8:	e0bffc17 	ldw	r2,-16(fp)
    d3cc:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
    d3d0:	e0bffd17 	ldw	r2,-12(fp)
    d3d4:	10800044 	addi	r2,r2,1
    d3d8:	e0bffd15 	stw	r2,-12(fp)
    d3dc:	e0fffd17 	ldw	r3,-12(fp)
    d3e0:	e0bffb17 	ldw	r2,-20(fp)
    d3e4:	18bf5b36 	bltu	r3,r2,d154 <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
    d3e8:	00800404 	movi	r2,16
    d3ec:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    d3f0:	e03ffa15 	stw	zero,-24(fp)
    d3f4:	00003606 	br	d4d0 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    d3f8:	00801404 	movi	r2,80
    d3fc:	e0bff615 	stw	r2,-40(fp)
    d400:	00001106 	br	d448 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
    d404:	e13ffa17 	ldw	r4,-24(fp)
    d408:	e0bff617 	ldw	r2,-40(fp)
    d40c:	117fffc4 	addi	r5,r2,-1
    d410:	e0fffc17 	ldw	r3,-16(fp)
    d414:	208018e4 	muli	r2,r4,99
    d418:	10c5883a 	add	r2,r2,r3
    d41c:	1145883a 	add	r2,r2,r5
    d420:	10801004 	addi	r2,r2,64
    d424:	10800003 	ldbu	r2,0(r2)
    d428:	10803fcc 	andi	r2,r2,255
    d42c:	1080201c 	xori	r2,r2,128
    d430:	10bfe004 	addi	r2,r2,-128
    d434:	10800818 	cmpnei	r2,r2,32
    d438:	1000061e 	bne	r2,zero,d454 <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    d43c:	e0bff617 	ldw	r2,-40(fp)
    d440:	10bfffc4 	addi	r2,r2,-1
    d444:	e0bff615 	stw	r2,-40(fp)
    d448:	e0bff617 	ldw	r2,-40(fp)
    d44c:	10800048 	cmpgei	r2,r2,1
    d450:	103fec1e 	bne	r2,zero,d404 <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
    d454:	e0bff617 	ldw	r2,-40(fp)
    d458:	10800448 	cmpgei	r2,r2,17
    d45c:	1000031e 	bne	r2,zero,d46c <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
    d460:	00800404 	movi	r2,16
    d464:	e0bff615 	stw	r2,-40(fp)
    d468:	00000306 	br	d478 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
    d46c:	e0bff617 	ldw	r2,-40(fp)
    d470:	10800044 	addi	r2,r2,1
    d474:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
    d478:	e13ffa17 	ldw	r4,-24(fp)
    d47c:	e0bff617 	ldw	r2,-40(fp)
    d480:	100b883a 	mov	r5,r2
    d484:	e0fffc17 	ldw	r3,-16(fp)
    d488:	208018e4 	muli	r2,r4,99
    d48c:	10c5883a 	add	r2,r2,r3
    d490:	10802404 	addi	r2,r2,144
    d494:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
    d498:	e0fff917 	ldw	r3,-28(fp)
    d49c:	e0bff617 	ldw	r2,-40(fp)
    d4a0:	1880020e 	bge	r3,r2,d4ac <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
    d4a4:	e0bff617 	ldw	r2,-40(fp)
    d4a8:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
    d4ac:	e0bffa17 	ldw	r2,-24(fp)
    d4b0:	e0fffc17 	ldw	r3,-16(fp)
    d4b4:	108018e4 	muli	r2,r2,99
    d4b8:	10c5883a 	add	r2,r2,r3
    d4bc:	10802404 	addi	r2,r2,144
    d4c0:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    d4c4:	e0bffa17 	ldw	r2,-24(fp)
    d4c8:	10800044 	addi	r2,r2,1
    d4cc:	e0bffa15 	stw	r2,-24(fp)
    d4d0:	e0bffa17 	ldw	r2,-24(fp)
    d4d4:	10800090 	cmplti	r2,r2,2
    d4d8:	103fc71e 	bne	r2,zero,d3f8 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
    d4dc:	e0bff917 	ldw	r2,-28(fp)
    d4e0:	10800448 	cmpgei	r2,r2,17
    d4e4:	1000031e 	bne	r2,zero,d4f4 <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
    d4e8:	e0bffc17 	ldw	r2,-16(fp)
    d4ec:	10000985 	stb	zero,38(r2)
    d4f0:	00002d06 	br	d5a8 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
    d4f4:	e0bff917 	ldw	r2,-28(fp)
    d4f8:	1085883a 	add	r2,r2,r2
    d4fc:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
    d500:	e0bff917 	ldw	r2,-28(fp)
    d504:	1007883a 	mov	r3,r2
    d508:	e0bffc17 	ldw	r2,-16(fp)
    d50c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    d510:	e03ffa15 	stw	zero,-24(fp)
    d514:	00002106 	br	d59c <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
    d518:	e0bffa17 	ldw	r2,-24(fp)
    d51c:	e0fffc17 	ldw	r3,-16(fp)
    d520:	108018e4 	muli	r2,r2,99
    d524:	10c5883a 	add	r2,r2,r3
    d528:	10802404 	addi	r2,r2,144
    d52c:	10800043 	ldbu	r2,1(r2)
    d530:	10803fcc 	andi	r2,r2,255
    d534:	1080201c 	xori	r2,r2,128
    d538:	10bfe004 	addi	r2,r2,-128
    d53c:	10800450 	cmplti	r2,r2,17
    d540:	1000131e 	bne	r2,zero,d590 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
    d544:	e43ffa17 	ldw	r16,-24(fp)
    d548:	e0bffa17 	ldw	r2,-24(fp)
    d54c:	e0fffc17 	ldw	r3,-16(fp)
    d550:	108018e4 	muli	r2,r2,99
    d554:	10c5883a 	add	r2,r2,r3
    d558:	10802404 	addi	r2,r2,144
    d55c:	10800043 	ldbu	r2,1(r2)
    d560:	10803fcc 	andi	r2,r2,255
    d564:	1080201c 	xori	r2,r2,128
    d568:	10bfe004 	addi	r2,r2,-128
    d56c:	1008923a 	slli	r4,r2,8
    d570:	e17ff917 	ldw	r5,-28(fp)
    d574:	0001a0c0 	call	1a0c <__divsi3>
    d578:	1009883a 	mov	r4,r2
    d57c:	e0fffc17 	ldw	r3,-16(fp)
    d580:	808018e4 	muli	r2,r16,99
    d584:	10c5883a 	add	r2,r2,r3
    d588:	10802404 	addi	r2,r2,144
    d58c:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    d590:	e0bffa17 	ldw	r2,-24(fp)
    d594:	10800044 	addi	r2,r2,1
    d598:	e0bffa15 	stw	r2,-24(fp)
    d59c:	e0bffa17 	ldw	r2,-24(fp)
    d5a0:	10800090 	cmplti	r2,r2,2
    d5a4:	103fdc1e 	bne	r2,zero,d518 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
    d5a8:	e0bffc17 	ldw	r2,-16(fp)
    d5ac:	10800943 	ldbu	r2,37(r2)
    d5b0:	10803fcc 	andi	r2,r2,255
    d5b4:	1080201c 	xori	r2,r2,128
    d5b8:	10bfe004 	addi	r2,r2,-128
    d5bc:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
    d5c0:	e13ffc17 	ldw	r4,-16(fp)
    d5c4:	000cb880 	call	cb88 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
    d5c8:	e0bffc17 	ldw	r2,-16(fp)
    d5cc:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
    d5d0:	e0bffc17 	ldw	r2,-16(fp)
    d5d4:	10800943 	ldbu	r2,37(r2)
    d5d8:	10c03fcc 	andi	r3,r2,255
    d5dc:	18c0201c 	xori	r3,r3,128
    d5e0:	18ffe004 	addi	r3,r3,-128
    d5e4:	e0bff517 	ldw	r2,-44(fp)
    d5e8:	18800426 	beq	r3,r2,d5fc <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
    d5ec:	e0fffc17 	ldw	r3,-16(fp)
    d5f0:	00800044 	movi	r2,1
    d5f4:	188009c5 	stb	r2,39(r3)
  }
    d5f8:	003feb06 	br	d5a8 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
    d5fc:	e0bffe17 	ldw	r2,-8(fp)
}
    d600:	e037883a 	mov	sp,fp
    d604:	dfc00217 	ldw	ra,8(sp)
    d608:	df000117 	ldw	fp,4(sp)
    d60c:	dc000017 	ldw	r16,0(sp)
    d610:	dec00304 	addi	sp,sp,12
    d614:	f800283a 	ret

0000d618 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
    d618:	defffc04 	addi	sp,sp,-16
    d61c:	dfc00315 	stw	ra,12(sp)
    d620:	df000215 	stw	fp,8(sp)
    d624:	df000204 	addi	fp,sp,8
    d628:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
    d62c:	e0bfff17 	ldw	r2,-4(fp)
    d630:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
    d634:	e0bffe17 	ldw	r2,-8(fp)
    d638:	10800943 	ldbu	r2,37(r2)
    d63c:	10803fcc 	andi	r2,r2,255
    d640:	1080201c 	xori	r2,r2,128
    d644:	10bfe004 	addi	r2,r2,-128
    d648:	10c00044 	addi	r3,r2,1
    d64c:	e0bffe17 	ldw	r2,-8(fp)
    d650:	10800983 	ldbu	r2,38(r2)
    d654:	10803fcc 	andi	r2,r2,255
    d658:	1080201c 	xori	r2,r2,128
    d65c:	10bfe004 	addi	r2,r2,-128
    d660:	18800316 	blt	r3,r2,d670 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
    d664:	e0bffe17 	ldw	r2,-8(fp)
    d668:	10000945 	stb	zero,37(r2)
    d66c:	00000606 	br	d688 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
    d670:	e0bffe17 	ldw	r2,-8(fp)
    d674:	10800943 	ldbu	r2,37(r2)
    d678:	10800044 	addi	r2,r2,1
    d67c:	1007883a 	mov	r3,r2
    d680:	e0bffe17 	ldw	r2,-8(fp)
    d684:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
    d688:	e0bffe17 	ldw	r2,-8(fp)
    d68c:	10800983 	ldbu	r2,38(r2)
    d690:	10803fcc 	andi	r2,r2,255
    d694:	1080201c 	xori	r2,r2,128
    d698:	10bfe004 	addi	r2,r2,-128
    d69c:	10800050 	cmplti	r2,r2,1
    d6a0:	1000091e 	bne	r2,zero,d6c8 <alt_lcd_16207_timeout+0xb0>
    d6a4:	e0bffe17 	ldw	r2,-8(fp)
    d6a8:	108009c3 	ldbu	r2,39(r2)
    d6ac:	10803fcc 	andi	r2,r2,255
    d6b0:	1080201c 	xori	r2,r2,128
    d6b4:	10bfe004 	addi	r2,r2,-128
    d6b8:	1004c03a 	cmpne	r2,r2,zero
    d6bc:	1000021e 	bne	r2,zero,d6c8 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
    d6c0:	e13ffe17 	ldw	r4,-8(fp)
    d6c4:	000cb880 	call	cb88 <lcd_repaint_screen>

  return sp->period;
    d6c8:	e0bffe17 	ldw	r2,-8(fp)
    d6cc:	10800717 	ldw	r2,28(r2)
}
    d6d0:	e037883a 	mov	sp,fp
    d6d4:	dfc00117 	ldw	ra,4(sp)
    d6d8:	df000017 	ldw	fp,0(sp)
    d6dc:	dec00204 	addi	sp,sp,8
    d6e0:	f800283a 	ret

0000d6e4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
    d6e4:	defffc04 	addi	sp,sp,-16
    d6e8:	dfc00315 	stw	ra,12(sp)
    d6ec:	df000215 	stw	fp,8(sp)
    d6f0:	df000204 	addi	fp,sp,8
    d6f4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
    d6f8:	e0bfff17 	ldw	r2,-4(fp)
    d6fc:	10800017 	ldw	r2,0(r2)
    d700:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
    d704:	e0bfff17 	ldw	r2,-4(fp)
    d708:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
    d70c:	010ea604 	movi	r4,15000
    d710:	000bc000 	call	bc00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    d714:	e0bffe17 	ldw	r2,-8(fp)
    d718:	1007883a 	mov	r3,r2
    d71c:	00800c04 	movi	r2,48
    d720:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
    d724:	01040104 	movi	r4,4100
    d728:	000bc000 	call	bc00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    d72c:	e0bffe17 	ldw	r2,-8(fp)
    d730:	1007883a 	mov	r3,r2
    d734:	00800c04 	movi	r2,48
    d738:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
    d73c:	0100fa04 	movi	r4,1000
    d740:	000bc000 	call	bc00 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    d744:	e0bffe17 	ldw	r2,-8(fp)
    d748:	1007883a 	mov	r3,r2
    d74c:	00800c04 	movi	r2,48
    d750:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
    d754:	e13fff17 	ldw	r4,-4(fp)
    d758:	01400e04 	movi	r5,56
    d75c:	000c9380 	call	c938 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
    d760:	e13fff17 	ldw	r4,-4(fp)
    d764:	01400204 	movi	r5,8
    d768:	000c9380 	call	c938 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
    d76c:	e13fff17 	ldw	r4,-4(fp)
    d770:	000cac40 	call	cac4 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
    d774:	e13fff17 	ldw	r4,-4(fp)
    d778:	01400184 	movi	r5,6
    d77c:	000c9380 	call	c938 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
    d780:	e13fff17 	ldw	r4,-4(fp)
    d784:	01400304 	movi	r5,12
    d788:	000c9380 	call	c938 <lcd_write_command>

  sp->esccount = -1;
    d78c:	e0ffff17 	ldw	r3,-4(fp)
    d790:	00bfffc4 	movi	r2,-1
    d794:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
    d798:	e0bfff17 	ldw	r2,-4(fp)
    d79c:	11000a04 	addi	r4,r2,40
    d7a0:	000b883a 	mov	r5,zero
    d7a4:	01800204 	movi	r6,8
    d7a8:	000708c0 	call	708c <memset>

  sp->scrollpos = 0;
    d7ac:	e0bfff17 	ldw	r2,-4(fp)
    d7b0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
    d7b4:	e0bfff17 	ldw	r2,-4(fp)
    d7b8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
    d7bc:	e0bfff17 	ldw	r2,-4(fp)
    d7c0:	100009c5 	stb	zero,39(r2)
    d7c4:	00800074 	movhi	r2,1
    d7c8:	108ca004 	addi	r2,r2,12928
    d7cc:	10800017 	ldw	r2,0(r2)
    d7d0:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
    d7d4:	01400284 	movi	r5,10
    d7d8:	0001acc0 	call	1acc <__udivsi3>
    d7dc:	1007883a 	mov	r3,r2
    d7e0:	e0bfff17 	ldw	r2,-4(fp)
    d7e4:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
    d7e8:	e0bfff17 	ldw	r2,-4(fp)
    d7ec:	11000104 	addi	r4,r2,4
    d7f0:	e0bfff17 	ldw	r2,-4(fp)
    d7f4:	10800717 	ldw	r2,28(r2)
    d7f8:	100b883a 	mov	r5,r2
    d7fc:	01800074 	movhi	r6,1
    d800:	31b58604 	addi	r6,r6,-10728
    d804:	e1ffff17 	ldw	r7,-4(fp)
    d808:	000d9780 	call	d978 <alt_alarm_start>
}
    d80c:	e037883a 	mov	sp,fp
    d810:	dfc00117 	ldw	ra,4(sp)
    d814:	df000017 	ldw	fp,0(sp)
    d818:	dec00204 	addi	sp,sp,8
    d81c:	f800283a 	ret

0000d820 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d820:	defffa04 	addi	sp,sp,-24
    d824:	dfc00515 	stw	ra,20(sp)
    d828:	df000415 	stw	fp,16(sp)
    d82c:	df000404 	addi	fp,sp,16
    d830:	e13ffd15 	stw	r4,-12(fp)
    d834:	e17ffe15 	stw	r5,-8(fp)
    d838:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
    d83c:	e0bffd17 	ldw	r2,-12(fp)
    d840:	10800017 	ldw	r2,0(r2)
    d844:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
    d848:	e0bffc17 	ldw	r2,-16(fp)
    d84c:	11000a04 	addi	r4,r2,40
    d850:	e0bffd17 	ldw	r2,-12(fp)
    d854:	11c00217 	ldw	r7,8(r2)
    d858:	e17ffe17 	ldw	r5,-8(fp)
    d85c:	e1bfff17 	ldw	r6,-4(fp)
    d860:	000d10c0 	call	d10c <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
    d864:	e037883a 	mov	sp,fp
    d868:	dfc00117 	ldw	ra,4(sp)
    d86c:	df000017 	ldw	fp,0(sp)
    d870:	dec00204 	addi	sp,sp,8
    d874:	f800283a 	ret

0000d878 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d878:	defffa04 	addi	sp,sp,-24
    d87c:	dfc00515 	stw	ra,20(sp)
    d880:	df000415 	stw	fp,16(sp)
    d884:	df000404 	addi	fp,sp,16
    d888:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d88c:	e0bfff17 	ldw	r2,-4(fp)
    d890:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d894:	e0bfff17 	ldw	r2,-4(fp)
    d898:	10800104 	addi	r2,r2,4
    d89c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d8a0:	0005303a 	rdctl	r2,status
    d8a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d8a8:	e0fffd17 	ldw	r3,-12(fp)
    d8ac:	00bfff84 	movi	r2,-2
    d8b0:	1884703a 	and	r2,r3,r2
    d8b4:	1001703a 	wrctl	status,r2
  
  return context;
    d8b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d8bc:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    d8c0:	000baf40 	call	baf4 <alt_tick>
    d8c4:	e0bffe17 	ldw	r2,-8(fp)
    d8c8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d8cc:	e0bffc17 	ldw	r2,-16(fp)
    d8d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d8d4:	e037883a 	mov	sp,fp
    d8d8:	dfc00117 	ldw	ra,4(sp)
    d8dc:	df000017 	ldw	fp,0(sp)
    d8e0:	dec00204 	addi	sp,sp,8
    d8e4:	f800283a 	ret

0000d8e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d8e8:	defff804 	addi	sp,sp,-32
    d8ec:	dfc00715 	stw	ra,28(sp)
    d8f0:	df000615 	stw	fp,24(sp)
    d8f4:	df000604 	addi	fp,sp,24
    d8f8:	e13ffc15 	stw	r4,-16(fp)
    d8fc:	e17ffd15 	stw	r5,-12(fp)
    d900:	e1bffe15 	stw	r6,-8(fp)
    d904:	e1ffff15 	stw	r7,-4(fp)
    d908:	e0bfff17 	ldw	r2,-4(fp)
    d90c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    d910:	00800074 	movhi	r2,1
    d914:	108ca004 	addi	r2,r2,12928
    d918:	10800017 	ldw	r2,0(r2)
    d91c:	1004c03a 	cmpne	r2,r2,zero
    d920:	1000041e 	bne	r2,zero,d934 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    d924:	00c00074 	movhi	r3,1
    d928:	18cca004 	addi	r3,r3,12928
    d92c:	e0bffb17 	ldw	r2,-20(fp)
    d930:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    d934:	e0bffc17 	ldw	r2,-16(fp)
    d938:	10800104 	addi	r2,r2,4
    d93c:	1007883a 	mov	r3,r2
    d940:	008001c4 	movi	r2,7
    d944:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    d948:	d8000015 	stw	zero,0(sp)
    d94c:	e13ffd17 	ldw	r4,-12(fp)
    d950:	e17ffe17 	ldw	r5,-8(fp)
    d954:	01800074 	movhi	r6,1
    d958:	31b61e04 	addi	r6,r6,-10120
    d95c:	e1fffc17 	ldw	r7,-16(fp)
    d960:	000de400 	call	de40 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    d964:	e037883a 	mov	sp,fp
    d968:	dfc00117 	ldw	ra,4(sp)
    d96c:	df000017 	ldw	fp,0(sp)
    d970:	dec00204 	addi	sp,sp,8
    d974:	f800283a 	ret

0000d978 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    d978:	defff404 	addi	sp,sp,-48
    d97c:	df000b15 	stw	fp,44(sp)
    d980:	df000b04 	addi	fp,sp,44
    d984:	e13ffb15 	stw	r4,-20(fp)
    d988:	e17ffc15 	stw	r5,-16(fp)
    d98c:	e1bffd15 	stw	r6,-12(fp)
    d990:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    d994:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d998:	00800074 	movhi	r2,1
    d99c:	108ca004 	addi	r2,r2,12928
    d9a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    d9a4:	1005003a 	cmpeq	r2,r2,zero
    d9a8:	1000411e 	bne	r2,zero,dab0 <alt_alarm_start+0x138>
  {
    if (alarm)
    d9ac:	e0bffb17 	ldw	r2,-20(fp)
    d9b0:	1005003a 	cmpeq	r2,r2,zero
    d9b4:	10003b1e 	bne	r2,zero,daa4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    d9b8:	e0fffb17 	ldw	r3,-20(fp)
    d9bc:	e0bffd17 	ldw	r2,-12(fp)
    d9c0:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    d9c4:	e0fffb17 	ldw	r3,-20(fp)
    d9c8:	e0bffe17 	ldw	r2,-8(fp)
    d9cc:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d9d0:	0005303a 	rdctl	r2,status
    d9d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d9d8:	e0fff817 	ldw	r3,-32(fp)
    d9dc:	00bfff84 	movi	r2,-2
    d9e0:	1884703a 	and	r2,r3,r2
    d9e4:	1001703a 	wrctl	status,r2
  
  return context;
    d9e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    d9ec:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    d9f0:	00800074 	movhi	r2,1
    d9f4:	108ca104 	addi	r2,r2,12932
    d9f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    d9fc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    da00:	e0fffc17 	ldw	r3,-16(fp)
    da04:	e0bff917 	ldw	r2,-28(fp)
    da08:	1885883a 	add	r2,r3,r2
    da0c:	10c00044 	addi	r3,r2,1
    da10:	e0bffb17 	ldw	r2,-20(fp)
    da14:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    da18:	e0bffb17 	ldw	r2,-20(fp)
    da1c:	10c00217 	ldw	r3,8(r2)
    da20:	e0bff917 	ldw	r2,-28(fp)
    da24:	1880042e 	bgeu	r3,r2,da38 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    da28:	e0fffb17 	ldw	r3,-20(fp)
    da2c:	00800044 	movi	r2,1
    da30:	18800405 	stb	r2,16(r3)
    da34:	00000206 	br	da40 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    da38:	e0bffb17 	ldw	r2,-20(fp)
    da3c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    da40:	e0fffb17 	ldw	r3,-20(fp)
    da44:	00800074 	movhi	r2,1
    da48:	10854504 	addi	r2,r2,5396
    da4c:	e0bff615 	stw	r2,-40(fp)
    da50:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    da54:	e0fff717 	ldw	r3,-36(fp)
    da58:	e0bff617 	ldw	r2,-40(fp)
    da5c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    da60:	e0bff617 	ldw	r2,-40(fp)
    da64:	10c00017 	ldw	r3,0(r2)
    da68:	e0bff717 	ldw	r2,-36(fp)
    da6c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    da70:	e0bff617 	ldw	r2,-40(fp)
    da74:	10c00017 	ldw	r3,0(r2)
    da78:	e0bff717 	ldw	r2,-36(fp)
    da7c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    da80:	e0fff617 	ldw	r3,-40(fp)
    da84:	e0bff717 	ldw	r2,-36(fp)
    da88:	18800015 	stw	r2,0(r3)
    da8c:	e0bffa17 	ldw	r2,-24(fp)
    da90:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    da94:	e0bff517 	ldw	r2,-44(fp)
    da98:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    da9c:	e03fff15 	stw	zero,-4(fp)
    daa0:	00000506 	br	dab8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    daa4:	00bffa84 	movi	r2,-22
    daa8:	e0bfff15 	stw	r2,-4(fp)
    daac:	00000206 	br	dab8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    dab0:	00bfde84 	movi	r2,-134
    dab4:	e0bfff15 	stw	r2,-4(fp)
    dab8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    dabc:	e037883a 	mov	sp,fp
    dac0:	df000017 	ldw	fp,0(sp)
    dac4:	dec00104 	addi	sp,sp,4
    dac8:	f800283a 	ret

0000dacc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    dacc:	defffa04 	addi	sp,sp,-24
    dad0:	dfc00515 	stw	ra,20(sp)
    dad4:	df000415 	stw	fp,16(sp)
    dad8:	df000404 	addi	fp,sp,16
    dadc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    dae0:	008000c4 	movi	r2,3
    dae4:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    dae8:	e0fffc17 	ldw	r3,-16(fp)
    daec:	008003f4 	movhi	r2,15
    daf0:	10909004 	addi	r2,r2,16960
    daf4:	188b383a 	mul	r5,r3,r2
    daf8:	01017db4 	movhi	r4,1526
    dafc:	21384004 	addi	r4,r4,-7936
    db00:	0001acc0 	call	1acc <__udivsi3>
    db04:	100b883a 	mov	r5,r2
    db08:	01200034 	movhi	r4,32768
    db0c:	213fffc4 	addi	r4,r4,-1
    db10:	0001acc0 	call	1acc <__udivsi3>
    db14:	100b883a 	mov	r5,r2
    db18:	e13fff17 	ldw	r4,-4(fp)
    db1c:	0001acc0 	call	1acc <__udivsi3>
    db20:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    db24:	e0bffd17 	ldw	r2,-12(fp)
    db28:	1005003a 	cmpeq	r2,r2,zero
    db2c:	1000281e 	bne	r2,zero,dbd0 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
    db30:	e03ffe15 	stw	zero,-8(fp)
    db34:	00001606 	br	db90 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    db38:	00a00034 	movhi	r2,32768
    db3c:	10bfffc4 	addi	r2,r2,-1
    db40:	10bfffc4 	addi	r2,r2,-1
    db44:	103ffe1e 	bne	r2,zero,db40 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    db48:	e0fffc17 	ldw	r3,-16(fp)
    db4c:	008003f4 	movhi	r2,15
    db50:	10909004 	addi	r2,r2,16960
    db54:	188b383a 	mul	r5,r3,r2
    db58:	01017db4 	movhi	r4,1526
    db5c:	21384004 	addi	r4,r4,-7936
    db60:	0001acc0 	call	1acc <__udivsi3>
    db64:	100b883a 	mov	r5,r2
    db68:	01200034 	movhi	r4,32768
    db6c:	213fffc4 	addi	r4,r4,-1
    db70:	0001acc0 	call	1acc <__udivsi3>
    db74:	1007883a 	mov	r3,r2
    db78:	e0bfff17 	ldw	r2,-4(fp)
    db7c:	10c5c83a 	sub	r2,r2,r3
    db80:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    db84:	e0bffe17 	ldw	r2,-8(fp)
    db88:	10800044 	addi	r2,r2,1
    db8c:	e0bffe15 	stw	r2,-8(fp)
    db90:	e0fffe17 	ldw	r3,-8(fp)
    db94:	e0bffd17 	ldw	r2,-12(fp)
    db98:	18bfe716 	blt	r3,r2,db38 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    db9c:	e0fffc17 	ldw	r3,-16(fp)
    dba0:	008003f4 	movhi	r2,15
    dba4:	10909004 	addi	r2,r2,16960
    dba8:	188b383a 	mul	r5,r3,r2
    dbac:	01017db4 	movhi	r4,1526
    dbb0:	21384004 	addi	r4,r4,-7936
    dbb4:	0001acc0 	call	1acc <__udivsi3>
    dbb8:	1007883a 	mov	r3,r2
    dbbc:	e0bfff17 	ldw	r2,-4(fp)
    dbc0:	1885383a 	mul	r2,r3,r2
    dbc4:	10bfffc4 	addi	r2,r2,-1
    dbc8:	103ffe1e 	bne	r2,zero,dbc4 <alt_busy_sleep+0xf8>
    dbcc:	00000c06 	br	dc00 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    dbd0:	e0fffc17 	ldw	r3,-16(fp)
    dbd4:	008003f4 	movhi	r2,15
    dbd8:	10909004 	addi	r2,r2,16960
    dbdc:	188b383a 	mul	r5,r3,r2
    dbe0:	01017db4 	movhi	r4,1526
    dbe4:	21384004 	addi	r4,r4,-7936
    dbe8:	0001acc0 	call	1acc <__udivsi3>
    dbec:	1007883a 	mov	r3,r2
    dbf0:	e0bfff17 	ldw	r2,-4(fp)
    dbf4:	1885383a 	mul	r2,r3,r2
    dbf8:	10bfffc4 	addi	r2,r2,-1
    dbfc:	00bffe16 	blt	zero,r2,dbf8 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    dc00:	0005883a 	mov	r2,zero
}
    dc04:	e037883a 	mov	sp,fp
    dc08:	dfc00117 	ldw	ra,4(sp)
    dc0c:	df000017 	ldw	fp,0(sp)
    dc10:	dec00204 	addi	sp,sp,8
    dc14:	f800283a 	ret

0000dc18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    dc18:	deffff04 	addi	sp,sp,-4
    dc1c:	df000015 	stw	fp,0(sp)
    dc20:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    dc24:	e037883a 	mov	sp,fp
    dc28:	df000017 	ldw	fp,0(sp)
    dc2c:	dec00104 	addi	sp,sp,4
    dc30:	f800283a 	ret

0000dc34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    dc34:	defff904 	addi	sp,sp,-28
    dc38:	dfc00615 	stw	ra,24(sp)
    dc3c:	df000515 	stw	fp,20(sp)
    dc40:	df000504 	addi	fp,sp,20
    dc44:	e13ffd15 	stw	r4,-12(fp)
    dc48:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    dc4c:	e0bffd17 	ldw	r2,-12(fp)
    dc50:	1005003a 	cmpeq	r2,r2,zero
    dc54:	1000041e 	bne	r2,zero,dc68 <alt_dev_llist_insert+0x34>
    dc58:	e0bffd17 	ldw	r2,-12(fp)
    dc5c:	10800217 	ldw	r2,8(r2)
    dc60:	1004c03a 	cmpne	r2,r2,zero
    dc64:	1000071e 	bne	r2,zero,dc84 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    dc68:	000dce80 	call	dce8 <alt_get_errno>
    dc6c:	1007883a 	mov	r3,r2
    dc70:	00800584 	movi	r2,22
    dc74:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    dc78:	00bffa84 	movi	r2,-22
    dc7c:	e0bfff15 	stw	r2,-4(fp)
    dc80:	00001306 	br	dcd0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    dc84:	e0fffd17 	ldw	r3,-12(fp)
    dc88:	e0bffe17 	ldw	r2,-8(fp)
    dc8c:	e0bffb15 	stw	r2,-20(fp)
    dc90:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    dc94:	e0fffc17 	ldw	r3,-16(fp)
    dc98:	e0bffb17 	ldw	r2,-20(fp)
    dc9c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    dca0:	e0bffb17 	ldw	r2,-20(fp)
    dca4:	10c00017 	ldw	r3,0(r2)
    dca8:	e0bffc17 	ldw	r2,-16(fp)
    dcac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    dcb0:	e0bffb17 	ldw	r2,-20(fp)
    dcb4:	10c00017 	ldw	r3,0(r2)
    dcb8:	e0bffc17 	ldw	r2,-16(fp)
    dcbc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    dcc0:	e0fffb17 	ldw	r3,-20(fp)
    dcc4:	e0bffc17 	ldw	r2,-16(fp)
    dcc8:	18800015 	stw	r2,0(r3)

  return 0;  
    dccc:	e03fff15 	stw	zero,-4(fp)
    dcd0:	e0bfff17 	ldw	r2,-4(fp)
}
    dcd4:	e037883a 	mov	sp,fp
    dcd8:	dfc00117 	ldw	ra,4(sp)
    dcdc:	df000017 	ldw	fp,0(sp)
    dce0:	dec00204 	addi	sp,sp,8
    dce4:	f800283a 	ret

0000dce8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dce8:	defffd04 	addi	sp,sp,-12
    dcec:	dfc00215 	stw	ra,8(sp)
    dcf0:	df000115 	stw	fp,4(sp)
    dcf4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    dcf8:	00800074 	movhi	r2,1
    dcfc:	10854304 	addi	r2,r2,5388
    dd00:	10800017 	ldw	r2,0(r2)
    dd04:	1005003a 	cmpeq	r2,r2,zero
    dd08:	1000061e 	bne	r2,zero,dd24 <alt_get_errno+0x3c>
    dd0c:	00800074 	movhi	r2,1
    dd10:	10854304 	addi	r2,r2,5388
    dd14:	10800017 	ldw	r2,0(r2)
    dd18:	103ee83a 	callr	r2
    dd1c:	e0bfff15 	stw	r2,-4(fp)
    dd20:	00000306 	br	dd30 <alt_get_errno+0x48>
    dd24:	00800074 	movhi	r2,1
    dd28:	108c9904 	addi	r2,r2,12900
    dd2c:	e0bfff15 	stw	r2,-4(fp)
    dd30:	e0bfff17 	ldw	r2,-4(fp)
}
    dd34:	e037883a 	mov	sp,fp
    dd38:	dfc00117 	ldw	ra,4(sp)
    dd3c:	df000017 	ldw	fp,0(sp)
    dd40:	dec00204 	addi	sp,sp,8
    dd44:	f800283a 	ret

0000dd48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    dd48:	defffd04 	addi	sp,sp,-12
    dd4c:	dfc00215 	stw	ra,8(sp)
    dd50:	df000115 	stw	fp,4(sp)
    dd54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    dd58:	00bfff04 	movi	r2,-4
    dd5c:	00c00074 	movhi	r3,1
    dd60:	18fb2804 	addi	r3,r3,-4960
    dd64:	1885883a 	add	r2,r3,r2
    dd68:	e0bfff15 	stw	r2,-4(fp)
    dd6c:	00000606 	br	dd88 <_do_ctors+0x40>
        (*ctor) (); 
    dd70:	e0bfff17 	ldw	r2,-4(fp)
    dd74:	10800017 	ldw	r2,0(r2)
    dd78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    dd7c:	e0bfff17 	ldw	r2,-4(fp)
    dd80:	10bfff04 	addi	r2,r2,-4
    dd84:	e0bfff15 	stw	r2,-4(fp)
    dd88:	e0ffff17 	ldw	r3,-4(fp)
    dd8c:	00800074 	movhi	r2,1
    dd90:	10bb2704 	addi	r2,r2,-4964
    dd94:	18bff62e 	bgeu	r3,r2,dd70 <_do_ctors+0x28>
        (*ctor) (); 
}
    dd98:	e037883a 	mov	sp,fp
    dd9c:	dfc00117 	ldw	ra,4(sp)
    dda0:	df000017 	ldw	fp,0(sp)
    dda4:	dec00204 	addi	sp,sp,8
    dda8:	f800283a 	ret

0000ddac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    ddac:	defffd04 	addi	sp,sp,-12
    ddb0:	dfc00215 	stw	ra,8(sp)
    ddb4:	df000115 	stw	fp,4(sp)
    ddb8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ddbc:	00bfff04 	movi	r2,-4
    ddc0:	00c00074 	movhi	r3,1
    ddc4:	18fb2804 	addi	r3,r3,-4960
    ddc8:	1885883a 	add	r2,r3,r2
    ddcc:	e0bfff15 	stw	r2,-4(fp)
    ddd0:	00000606 	br	ddec <_do_dtors+0x40>
        (*dtor) (); 
    ddd4:	e0bfff17 	ldw	r2,-4(fp)
    ddd8:	10800017 	ldw	r2,0(r2)
    dddc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    dde0:	e0bfff17 	ldw	r2,-4(fp)
    dde4:	10bfff04 	addi	r2,r2,-4
    dde8:	e0bfff15 	stw	r2,-4(fp)
    ddec:	e0ffff17 	ldw	r3,-4(fp)
    ddf0:	00800074 	movhi	r2,1
    ddf4:	10bb2804 	addi	r2,r2,-4960
    ddf8:	18bff62e 	bgeu	r3,r2,ddd4 <_do_dtors+0x28>
        (*dtor) (); 
}
    ddfc:	e037883a 	mov	sp,fp
    de00:	dfc00117 	ldw	ra,4(sp)
    de04:	df000017 	ldw	fp,0(sp)
    de08:	dec00204 	addi	sp,sp,8
    de0c:	f800283a 	ret

0000de10 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    de10:	defffe04 	addi	sp,sp,-8
    de14:	dfc00115 	stw	ra,4(sp)
    de18:	df000015 	stw	fp,0(sp)
    de1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    de20:	0009883a 	mov	r4,zero
    de24:	01440004 	movi	r5,4096
    de28:	000e7980 	call	e798 <alt_icache_flush>
#endif
}
    de2c:	e037883a 	mov	sp,fp
    de30:	dfc00117 	ldw	ra,4(sp)
    de34:	df000017 	ldw	fp,0(sp)
    de38:	dec00204 	addi	sp,sp,8
    de3c:	f800283a 	ret

0000de40 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    de40:	defff904 	addi	sp,sp,-28
    de44:	dfc00615 	stw	ra,24(sp)
    de48:	df000515 	stw	fp,20(sp)
    de4c:	df000504 	addi	fp,sp,20
    de50:	e13ffc15 	stw	r4,-16(fp)
    de54:	e17ffd15 	stw	r5,-12(fp)
    de58:	e1bffe15 	stw	r6,-8(fp)
    de5c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    de60:	e0800217 	ldw	r2,8(fp)
    de64:	d8800015 	stw	r2,0(sp)
    de68:	e13ffc17 	ldw	r4,-16(fp)
    de6c:	e17ffd17 	ldw	r5,-12(fp)
    de70:	e1bffe17 	ldw	r6,-8(fp)
    de74:	e1ffff17 	ldw	r7,-4(fp)
    de78:	000e0140 	call	e014 <alt_iic_isr_register>
}  
    de7c:	e037883a 	mov	sp,fp
    de80:	dfc00117 	ldw	ra,4(sp)
    de84:	df000017 	ldw	fp,0(sp)
    de88:	dec00204 	addi	sp,sp,8
    de8c:	f800283a 	ret

0000de90 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    de90:	defff904 	addi	sp,sp,-28
    de94:	df000615 	stw	fp,24(sp)
    de98:	df000604 	addi	fp,sp,24
    de9c:	e13ffe15 	stw	r4,-8(fp)
    dea0:	e17fff15 	stw	r5,-4(fp)
    dea4:	e0bfff17 	ldw	r2,-4(fp)
    dea8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    deac:	0005303a 	rdctl	r2,status
    deb0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    deb4:	e0fffb17 	ldw	r3,-20(fp)
    deb8:	00bfff84 	movi	r2,-2
    debc:	1884703a 	and	r2,r3,r2
    dec0:	1001703a 	wrctl	status,r2
  
  return context;
    dec4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    dec8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    decc:	e0fffc17 	ldw	r3,-16(fp)
    ded0:	00800044 	movi	r2,1
    ded4:	10c4983a 	sll	r2,r2,r3
    ded8:	1007883a 	mov	r3,r2
    dedc:	00800074 	movhi	r2,1
    dee0:	108ca204 	addi	r2,r2,12936
    dee4:	10800017 	ldw	r2,0(r2)
    dee8:	1886b03a 	or	r3,r3,r2
    deec:	00800074 	movhi	r2,1
    def0:	108ca204 	addi	r2,r2,12936
    def4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    def8:	00800074 	movhi	r2,1
    defc:	108ca204 	addi	r2,r2,12936
    df00:	10800017 	ldw	r2,0(r2)
    df04:	100170fa 	wrctl	ienable,r2
    df08:	e0bffd17 	ldw	r2,-12(fp)
    df0c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df10:	e0bffa17 	ldw	r2,-24(fp)
    df14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    df18:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    df1c:	e037883a 	mov	sp,fp
    df20:	df000017 	ldw	fp,0(sp)
    df24:	dec00104 	addi	sp,sp,4
    df28:	f800283a 	ret

0000df2c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    df2c:	defff904 	addi	sp,sp,-28
    df30:	df000615 	stw	fp,24(sp)
    df34:	df000604 	addi	fp,sp,24
    df38:	e13ffe15 	stw	r4,-8(fp)
    df3c:	e17fff15 	stw	r5,-4(fp)
    df40:	e0bfff17 	ldw	r2,-4(fp)
    df44:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df48:	0005303a 	rdctl	r2,status
    df4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df50:	e0fffb17 	ldw	r3,-20(fp)
    df54:	00bfff84 	movi	r2,-2
    df58:	1884703a 	and	r2,r3,r2
    df5c:	1001703a 	wrctl	status,r2
  
  return context;
    df60:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    df64:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    df68:	e0fffc17 	ldw	r3,-16(fp)
    df6c:	00800044 	movi	r2,1
    df70:	10c4983a 	sll	r2,r2,r3
    df74:	0084303a 	nor	r2,zero,r2
    df78:	1007883a 	mov	r3,r2
    df7c:	00800074 	movhi	r2,1
    df80:	108ca204 	addi	r2,r2,12936
    df84:	10800017 	ldw	r2,0(r2)
    df88:	1886703a 	and	r3,r3,r2
    df8c:	00800074 	movhi	r2,1
    df90:	108ca204 	addi	r2,r2,12936
    df94:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    df98:	00800074 	movhi	r2,1
    df9c:	108ca204 	addi	r2,r2,12936
    dfa0:	10800017 	ldw	r2,0(r2)
    dfa4:	100170fa 	wrctl	ienable,r2
    dfa8:	e0bffd17 	ldw	r2,-12(fp)
    dfac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dfb0:	e0bffa17 	ldw	r2,-24(fp)
    dfb4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    dfb8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    dfbc:	e037883a 	mov	sp,fp
    dfc0:	df000017 	ldw	fp,0(sp)
    dfc4:	dec00104 	addi	sp,sp,4
    dfc8:	f800283a 	ret

0000dfcc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    dfcc:	defffc04 	addi	sp,sp,-16
    dfd0:	df000315 	stw	fp,12(sp)
    dfd4:	df000304 	addi	fp,sp,12
    dfd8:	e13ffe15 	stw	r4,-8(fp)
    dfdc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    dfe0:	000530fa 	rdctl	r2,ienable
    dfe4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    dfe8:	e0ffff17 	ldw	r3,-4(fp)
    dfec:	00800044 	movi	r2,1
    dff0:	10c4983a 	sll	r2,r2,r3
    dff4:	1007883a 	mov	r3,r2
    dff8:	e0bffd17 	ldw	r2,-12(fp)
    dffc:	1884703a 	and	r2,r3,r2
    e000:	1004c03a 	cmpne	r2,r2,zero
}
    e004:	e037883a 	mov	sp,fp
    e008:	df000017 	ldw	fp,0(sp)
    e00c:	dec00104 	addi	sp,sp,4
    e010:	f800283a 	ret

0000e014 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e014:	defff404 	addi	sp,sp,-48
    e018:	dfc00b15 	stw	ra,44(sp)
    e01c:	df000a15 	stw	fp,40(sp)
    e020:	df000a04 	addi	fp,sp,40
    e024:	e13ffb15 	stw	r4,-20(fp)
    e028:	e17ffc15 	stw	r5,-16(fp)
    e02c:	e1bffd15 	stw	r6,-12(fp)
    e030:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    e034:	00bffa84 	movi	r2,-22
    e038:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e03c:	e0bffc17 	ldw	r2,-16(fp)
    e040:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e044:	e0bff917 	ldw	r2,-28(fp)
    e048:	10800808 	cmpgei	r2,r2,32
    e04c:	1000291e 	bne	r2,zero,e0f4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e050:	0005303a 	rdctl	r2,status
    e054:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e058:	e0fff717 	ldw	r3,-36(fp)
    e05c:	00bfff84 	movi	r2,-2
    e060:	1884703a 	and	r2,r3,r2
    e064:	1001703a 	wrctl	status,r2
  
  return context;
    e068:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e06c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    e070:	e0bff917 	ldw	r2,-28(fp)
    e074:	00c00074 	movhi	r3,1
    e078:	18ccb104 	addi	r3,r3,12996
    e07c:	100490fa 	slli	r2,r2,3
    e080:	10c7883a 	add	r3,r2,r3
    e084:	e0bffd17 	ldw	r2,-12(fp)
    e088:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    e08c:	e0bff917 	ldw	r2,-28(fp)
    e090:	00c00074 	movhi	r3,1
    e094:	18ccb104 	addi	r3,r3,12996
    e098:	100490fa 	slli	r2,r2,3
    e09c:	10c5883a 	add	r2,r2,r3
    e0a0:	10c00104 	addi	r3,r2,4
    e0a4:	e0bffe17 	ldw	r2,-8(fp)
    e0a8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    e0ac:	e0bffd17 	ldw	r2,-12(fp)
    e0b0:	1005003a 	cmpeq	r2,r2,zero
    e0b4:	1000051e 	bne	r2,zero,e0cc <alt_iic_isr_register+0xb8>
    e0b8:	e17ff917 	ldw	r5,-28(fp)
    e0bc:	e13ffb17 	ldw	r4,-20(fp)
    e0c0:	000de900 	call	de90 <alt_ic_irq_enable>
    e0c4:	e0bfff15 	stw	r2,-4(fp)
    e0c8:	00000406 	br	e0dc <alt_iic_isr_register+0xc8>
    e0cc:	e17ff917 	ldw	r5,-28(fp)
    e0d0:	e13ffb17 	ldw	r4,-20(fp)
    e0d4:	000df2c0 	call	df2c <alt_ic_irq_disable>
    e0d8:	e0bfff15 	stw	r2,-4(fp)
    e0dc:	e0bfff17 	ldw	r2,-4(fp)
    e0e0:	e0bffa15 	stw	r2,-24(fp)
    e0e4:	e0bff817 	ldw	r2,-32(fp)
    e0e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e0ec:	e0bff617 	ldw	r2,-40(fp)
    e0f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    e0f4:	e0bffa17 	ldw	r2,-24(fp)
}
    e0f8:	e037883a 	mov	sp,fp
    e0fc:	dfc00117 	ldw	ra,4(sp)
    e100:	df000017 	ldw	fp,0(sp)
    e104:	dec00204 	addi	sp,sp,8
    e108:	f800283a 	ret

0000e10c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e10c:	defff904 	addi	sp,sp,-28
    e110:	dfc00615 	stw	ra,24(sp)
    e114:	df000515 	stw	fp,20(sp)
    e118:	df000504 	addi	fp,sp,20
    e11c:	e13ffc15 	stw	r4,-16(fp)
    e120:	e17ffd15 	stw	r5,-12(fp)
    e124:	e1bffe15 	stw	r6,-8(fp)
    e128:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    e12c:	e13ffd17 	ldw	r4,-12(fp)
    e130:	e17ffe17 	ldw	r5,-8(fp)
    e134:	e1bfff17 	ldw	r6,-4(fp)
    e138:	000e3240 	call	e324 <open>
    e13c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    e140:	e0bffb17 	ldw	r2,-20(fp)
    e144:	1004803a 	cmplt	r2,r2,zero
    e148:	10001c1e 	bne	r2,zero,e1bc <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    e14c:	e0bffb17 	ldw	r2,-20(fp)
    e150:	00c00074 	movhi	r3,1
    e154:	18c07804 	addi	r3,r3,480
    e158:	10800324 	muli	r2,r2,12
    e15c:	10c5883a 	add	r2,r2,r3
    e160:	10c00017 	ldw	r3,0(r2)
    e164:	e0bffc17 	ldw	r2,-16(fp)
    e168:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e16c:	e0bffb17 	ldw	r2,-20(fp)
    e170:	00c00074 	movhi	r3,1
    e174:	18c07804 	addi	r3,r3,480
    e178:	10800324 	muli	r2,r2,12
    e17c:	10c5883a 	add	r2,r2,r3
    e180:	10800104 	addi	r2,r2,4
    e184:	10c00017 	ldw	r3,0(r2)
    e188:	e0bffc17 	ldw	r2,-16(fp)
    e18c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e190:	e0bffb17 	ldw	r2,-20(fp)
    e194:	00c00074 	movhi	r3,1
    e198:	18c07804 	addi	r3,r3,480
    e19c:	10800324 	muli	r2,r2,12
    e1a0:	10c5883a 	add	r2,r2,r3
    e1a4:	10800204 	addi	r2,r2,8
    e1a8:	10c00017 	ldw	r3,0(r2)
    e1ac:	e0bffc17 	ldw	r2,-16(fp)
    e1b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e1b4:	e13ffb17 	ldw	r4,-20(fp)
    e1b8:	000b9400 	call	b940 <alt_release_fd>
  }
} 
    e1bc:	e037883a 	mov	sp,fp
    e1c0:	dfc00117 	ldw	ra,4(sp)
    e1c4:	df000017 	ldw	fp,0(sp)
    e1c8:	dec00204 	addi	sp,sp,8
    e1cc:	f800283a 	ret

0000e1d0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e1d0:	defffb04 	addi	sp,sp,-20
    e1d4:	dfc00415 	stw	ra,16(sp)
    e1d8:	df000315 	stw	fp,12(sp)
    e1dc:	df000304 	addi	fp,sp,12
    e1e0:	e13ffd15 	stw	r4,-12(fp)
    e1e4:	e17ffe15 	stw	r5,-8(fp)
    e1e8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e1ec:	01000074 	movhi	r4,1
    e1f0:	21007b04 	addi	r4,r4,492
    e1f4:	e17ffd17 	ldw	r5,-12(fp)
    e1f8:	01800044 	movi	r6,1
    e1fc:	01c07fc4 	movi	r7,511
    e200:	000e10c0 	call	e10c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e204:	01000074 	movhi	r4,1
    e208:	21007804 	addi	r4,r4,480
    e20c:	e17ffe17 	ldw	r5,-8(fp)
    e210:	000d883a 	mov	r6,zero
    e214:	01c07fc4 	movi	r7,511
    e218:	000e10c0 	call	e10c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e21c:	01000074 	movhi	r4,1
    e220:	21007e04 	addi	r4,r4,504
    e224:	e17fff17 	ldw	r5,-4(fp)
    e228:	01800044 	movi	r6,1
    e22c:	01c07fc4 	movi	r7,511
    e230:	000e10c0 	call	e10c <alt_open_fd>
}  
    e234:	e037883a 	mov	sp,fp
    e238:	dfc00117 	ldw	ra,4(sp)
    e23c:	df000017 	ldw	fp,0(sp)
    e240:	dec00204 	addi	sp,sp,8
    e244:	f800283a 	ret

0000e248 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e248:	defffc04 	addi	sp,sp,-16
    e24c:	df000315 	stw	fp,12(sp)
    e250:	df000304 	addi	fp,sp,12
    e254:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e258:	e0bffe17 	ldw	r2,-8(fp)
    e25c:	10800217 	ldw	r2,8(r2)
    e260:	10d00034 	orhi	r3,r2,16384
    e264:	e0bffe17 	ldw	r2,-8(fp)
    e268:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e26c:	e03ffd15 	stw	zero,-12(fp)
    e270:	00002006 	br	e2f4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e274:	e0bffd17 	ldw	r2,-12(fp)
    e278:	00c00074 	movhi	r3,1
    e27c:	18c07804 	addi	r3,r3,480
    e280:	10800324 	muli	r2,r2,12
    e284:	10c5883a 	add	r2,r2,r3
    e288:	10c00017 	ldw	r3,0(r2)
    e28c:	e0bffe17 	ldw	r2,-8(fp)
    e290:	10800017 	ldw	r2,0(r2)
    e294:	1880141e 	bne	r3,r2,e2e8 <alt_file_locked+0xa0>
    e298:	e0bffd17 	ldw	r2,-12(fp)
    e29c:	00c00074 	movhi	r3,1
    e2a0:	18c07804 	addi	r3,r3,480
    e2a4:	10800324 	muli	r2,r2,12
    e2a8:	10c5883a 	add	r2,r2,r3
    e2ac:	10800204 	addi	r2,r2,8
    e2b0:	10800017 	ldw	r2,0(r2)
    e2b4:	1004403a 	cmpge	r2,r2,zero
    e2b8:	10000b1e 	bne	r2,zero,e2e8 <alt_file_locked+0xa0>
    e2bc:	e0bffd17 	ldw	r2,-12(fp)
    e2c0:	10800324 	muli	r2,r2,12
    e2c4:	1007883a 	mov	r3,r2
    e2c8:	00800074 	movhi	r2,1
    e2cc:	10807804 	addi	r2,r2,480
    e2d0:	1887883a 	add	r3,r3,r2
    e2d4:	e0bffe17 	ldw	r2,-8(fp)
    e2d8:	18800326 	beq	r3,r2,e2e8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    e2dc:	00bffcc4 	movi	r2,-13
    e2e0:	e0bfff15 	stw	r2,-4(fp)
    e2e4:	00000a06 	br	e310 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e2e8:	e0bffd17 	ldw	r2,-12(fp)
    e2ec:	10800044 	addi	r2,r2,1
    e2f0:	e0bffd15 	stw	r2,-12(fp)
    e2f4:	00800074 	movhi	r2,1
    e2f8:	10854204 	addi	r2,r2,5384
    e2fc:	10800017 	ldw	r2,0(r2)
    e300:	1007883a 	mov	r3,r2
    e304:	e0bffd17 	ldw	r2,-12(fp)
    e308:	18bfda2e 	bgeu	r3,r2,e274 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e30c:	e03fff15 	stw	zero,-4(fp)
    e310:	e0bfff17 	ldw	r2,-4(fp)
}
    e314:	e037883a 	mov	sp,fp
    e318:	df000017 	ldw	fp,0(sp)
    e31c:	dec00104 	addi	sp,sp,4
    e320:	f800283a 	ret

0000e324 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e324:	defff404 	addi	sp,sp,-48
    e328:	dfc00b15 	stw	ra,44(sp)
    e32c:	df000a15 	stw	fp,40(sp)
    e330:	df000a04 	addi	fp,sp,40
    e334:	e13ffb15 	stw	r4,-20(fp)
    e338:	e17ffc15 	stw	r5,-16(fp)
    e33c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e340:	00bfffc4 	movi	r2,-1
    e344:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    e348:	00bffb44 	movi	r2,-19
    e34c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    e350:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e354:	e13ffb17 	ldw	r4,-20(fp)
    e358:	01400074 	movhi	r5,1
    e35c:	29454004 	addi	r5,r5,5376
    e360:	000e52c0 	call	e52c <alt_find_dev>
    e364:	e0bffa15 	stw	r2,-24(fp)
    e368:	e0bffa17 	ldw	r2,-24(fp)
    e36c:	1004c03a 	cmpne	r2,r2,zero
    e370:	1000051e 	bne	r2,zero,e388 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e374:	e13ffb17 	ldw	r4,-20(fp)
    e378:	000e5c00 	call	e5c0 <alt_find_file>
    e37c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    e380:	00800044 	movi	r2,1
    e384:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e388:	e0bffa17 	ldw	r2,-24(fp)
    e38c:	1005003a 	cmpeq	r2,r2,zero
    e390:	1000301e 	bne	r2,zero,e454 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e394:	e13ffa17 	ldw	r4,-24(fp)
    e398:	000e6e00 	call	e6e0 <alt_get_fd>
    e39c:	e0bff815 	stw	r2,-32(fp)
    e3a0:	e0bff817 	ldw	r2,-32(fp)
    e3a4:	1004403a 	cmpge	r2,r2,zero
    e3a8:	1000031e 	bne	r2,zero,e3b8 <open+0x94>
    {
      status = index;
    e3ac:	e0bff817 	ldw	r2,-32(fp)
    e3b0:	e0bff715 	stw	r2,-36(fp)
    e3b4:	00002906 	br	e45c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    e3b8:	e0bff817 	ldw	r2,-32(fp)
    e3bc:	10800324 	muli	r2,r2,12
    e3c0:	1007883a 	mov	r3,r2
    e3c4:	00800074 	movhi	r2,1
    e3c8:	10807804 	addi	r2,r2,480
    e3cc:	1885883a 	add	r2,r3,r2
    e3d0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    e3d4:	e0fffc17 	ldw	r3,-16(fp)
    e3d8:	00900034 	movhi	r2,16384
    e3dc:	10bfffc4 	addi	r2,r2,-1
    e3e0:	1886703a 	and	r3,r3,r2
    e3e4:	e0bff917 	ldw	r2,-28(fp)
    e3e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    e3ec:	e0bff617 	ldw	r2,-40(fp)
    e3f0:	1004c03a 	cmpne	r2,r2,zero
    e3f4:	1000061e 	bne	r2,zero,e410 <open+0xec>
    e3f8:	e13ff917 	ldw	r4,-28(fp)
    e3fc:	000e2480 	call	e248 <alt_file_locked>
    e400:	e0bff715 	stw	r2,-36(fp)
    e404:	e0bff717 	ldw	r2,-36(fp)
    e408:	1004803a 	cmplt	r2,r2,zero
    e40c:	1000131e 	bne	r2,zero,e45c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    e410:	e0bffa17 	ldw	r2,-24(fp)
    e414:	10800317 	ldw	r2,12(r2)
    e418:	1005003a 	cmpeq	r2,r2,zero
    e41c:	1000091e 	bne	r2,zero,e444 <open+0x120>
    e420:	e0bffa17 	ldw	r2,-24(fp)
    e424:	10800317 	ldw	r2,12(r2)
    e428:	e13ff917 	ldw	r4,-28(fp)
    e42c:	e17ffb17 	ldw	r5,-20(fp)
    e430:	e1bffc17 	ldw	r6,-16(fp)
    e434:	e1fffd17 	ldw	r7,-12(fp)
    e438:	103ee83a 	callr	r2
    e43c:	e0bfff15 	stw	r2,-4(fp)
    e440:	00000106 	br	e448 <open+0x124>
    e444:	e03fff15 	stw	zero,-4(fp)
    e448:	e0bfff17 	ldw	r2,-4(fp)
    e44c:	e0bff715 	stw	r2,-36(fp)
    e450:	00000206 	br	e45c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    e454:	00bffb44 	movi	r2,-19
    e458:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    e45c:	e0bff717 	ldw	r2,-36(fp)
    e460:	1004403a 	cmpge	r2,r2,zero
    e464:	1000091e 	bne	r2,zero,e48c <open+0x168>
  {
    alt_release_fd (index);  
    e468:	e13ff817 	ldw	r4,-32(fp)
    e46c:	000b9400 	call	b940 <alt_release_fd>
    ALT_ERRNO = -status;
    e470:	000e4ac0 	call	e4ac <alt_get_errno>
    e474:	e0fff717 	ldw	r3,-36(fp)
    e478:	00c7c83a 	sub	r3,zero,r3
    e47c:	10c00015 	stw	r3,0(r2)
    return -1;
    e480:	00bfffc4 	movi	r2,-1
    e484:	e0bffe15 	stw	r2,-8(fp)
    e488:	00000206 	br	e494 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    e48c:	e0bff817 	ldw	r2,-32(fp)
    e490:	e0bffe15 	stw	r2,-8(fp)
    e494:	e0bffe17 	ldw	r2,-8(fp)
}
    e498:	e037883a 	mov	sp,fp
    e49c:	dfc00117 	ldw	ra,4(sp)
    e4a0:	df000017 	ldw	fp,0(sp)
    e4a4:	dec00204 	addi	sp,sp,8
    e4a8:	f800283a 	ret

0000e4ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e4ac:	defffd04 	addi	sp,sp,-12
    e4b0:	dfc00215 	stw	ra,8(sp)
    e4b4:	df000115 	stw	fp,4(sp)
    e4b8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e4bc:	00800074 	movhi	r2,1
    e4c0:	10854304 	addi	r2,r2,5388
    e4c4:	10800017 	ldw	r2,0(r2)
    e4c8:	1005003a 	cmpeq	r2,r2,zero
    e4cc:	1000061e 	bne	r2,zero,e4e8 <alt_get_errno+0x3c>
    e4d0:	00800074 	movhi	r2,1
    e4d4:	10854304 	addi	r2,r2,5388
    e4d8:	10800017 	ldw	r2,0(r2)
    e4dc:	103ee83a 	callr	r2
    e4e0:	e0bfff15 	stw	r2,-4(fp)
    e4e4:	00000306 	br	e4f4 <alt_get_errno+0x48>
    e4e8:	00800074 	movhi	r2,1
    e4ec:	108c9904 	addi	r2,r2,12900
    e4f0:	e0bfff15 	stw	r2,-4(fp)
    e4f4:	e0bfff17 	ldw	r2,-4(fp)
}
    e4f8:	e037883a 	mov	sp,fp
    e4fc:	dfc00117 	ldw	ra,4(sp)
    e500:	df000017 	ldw	fp,0(sp)
    e504:	dec00204 	addi	sp,sp,8
    e508:	f800283a 	ret

0000e50c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    e50c:	deffff04 	addi	sp,sp,-4
    e510:	df000015 	stw	fp,0(sp)
    e514:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    e518:	000170fa 	wrctl	ienable,zero
}
    e51c:	e037883a 	mov	sp,fp
    e520:	df000017 	ldw	fp,0(sp)
    e524:	dec00104 	addi	sp,sp,4
    e528:	f800283a 	ret

0000e52c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e52c:	defff904 	addi	sp,sp,-28
    e530:	dfc00615 	stw	ra,24(sp)
    e534:	df000515 	stw	fp,20(sp)
    e538:	df000504 	addi	fp,sp,20
    e53c:	e13ffd15 	stw	r4,-12(fp)
    e540:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e544:	e0bffe17 	ldw	r2,-8(fp)
    e548:	10800017 	ldw	r2,0(r2)
    e54c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e550:	e13ffd17 	ldw	r4,-12(fp)
    e554:	00023e00 	call	23e0 <strlen>
    e558:	10800044 	addi	r2,r2,1
    e55c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e560:	00000d06 	br	e598 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e564:	e0bffc17 	ldw	r2,-16(fp)
    e568:	11000217 	ldw	r4,8(r2)
    e56c:	e1bffb17 	ldw	r6,-20(fp)
    e570:	e17ffd17 	ldw	r5,-12(fp)
    e574:	000e8740 	call	e874 <memcmp>
    e578:	1004c03a 	cmpne	r2,r2,zero
    e57c:	1000031e 	bne	r2,zero,e58c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e580:	e0bffc17 	ldw	r2,-16(fp)
    e584:	e0bfff15 	stw	r2,-4(fp)
    e588:	00000706 	br	e5a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e58c:	e0bffc17 	ldw	r2,-16(fp)
    e590:	10800017 	ldw	r2,0(r2)
    e594:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e598:	e0fffe17 	ldw	r3,-8(fp)
    e59c:	e0bffc17 	ldw	r2,-16(fp)
    e5a0:	10fff01e 	bne	r2,r3,e564 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    e5a4:	e03fff15 	stw	zero,-4(fp)
    e5a8:	e0bfff17 	ldw	r2,-4(fp)
}
    e5ac:	e037883a 	mov	sp,fp
    e5b0:	dfc00117 	ldw	ra,4(sp)
    e5b4:	df000017 	ldw	fp,0(sp)
    e5b8:	dec00204 	addi	sp,sp,8
    e5bc:	f800283a 	ret

0000e5c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    e5c0:	defffa04 	addi	sp,sp,-24
    e5c4:	dfc00515 	stw	ra,20(sp)
    e5c8:	df000415 	stw	fp,16(sp)
    e5cc:	df000404 	addi	fp,sp,16
    e5d0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    e5d4:	00800074 	movhi	r2,1
    e5d8:	10853e04 	addi	r2,r2,5368
    e5dc:	10800017 	ldw	r2,0(r2)
    e5e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e5e4:	00003306 	br	e6b4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    e5e8:	e0bffd17 	ldw	r2,-12(fp)
    e5ec:	11000217 	ldw	r4,8(r2)
    e5f0:	00023e00 	call	23e0 <strlen>
    e5f4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    e5f8:	e0bffd17 	ldw	r2,-12(fp)
    e5fc:	10c00217 	ldw	r3,8(r2)
    e600:	e0bffc17 	ldw	r2,-16(fp)
    e604:	1885883a 	add	r2,r3,r2
    e608:	10bfffc4 	addi	r2,r2,-1
    e60c:	10800003 	ldbu	r2,0(r2)
    e610:	10803fcc 	andi	r2,r2,255
    e614:	1080201c 	xori	r2,r2,128
    e618:	10bfe004 	addi	r2,r2,-128
    e61c:	10800bd8 	cmpnei	r2,r2,47
    e620:	1000031e 	bne	r2,zero,e630 <alt_find_file+0x70>
    {
      len -= 1;
    e624:	e0bffc17 	ldw	r2,-16(fp)
    e628:	10bfffc4 	addi	r2,r2,-1
    e62c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e630:	e0bffc17 	ldw	r2,-16(fp)
    e634:	1007883a 	mov	r3,r2
    e638:	e0bffe17 	ldw	r2,-8(fp)
    e63c:	1885883a 	add	r2,r3,r2
    e640:	10800003 	ldbu	r2,0(r2)
    e644:	10803fcc 	andi	r2,r2,255
    e648:	1080201c 	xori	r2,r2,128
    e64c:	10bfe004 	addi	r2,r2,-128
    e650:	10800be0 	cmpeqi	r2,r2,47
    e654:	10000a1e 	bne	r2,zero,e680 <alt_find_file+0xc0>
    e658:	e0bffc17 	ldw	r2,-16(fp)
    e65c:	1007883a 	mov	r3,r2
    e660:	e0bffe17 	ldw	r2,-8(fp)
    e664:	1885883a 	add	r2,r3,r2
    e668:	10800003 	ldbu	r2,0(r2)
    e66c:	10803fcc 	andi	r2,r2,255
    e670:	1080201c 	xori	r2,r2,128
    e674:	10bfe004 	addi	r2,r2,-128
    e678:	1004c03a 	cmpne	r2,r2,zero
    e67c:	10000a1e 	bne	r2,zero,e6a8 <alt_find_file+0xe8>
    e680:	e0bffd17 	ldw	r2,-12(fp)
    e684:	11000217 	ldw	r4,8(r2)
    e688:	e1bffc17 	ldw	r6,-16(fp)
    e68c:	e17ffe17 	ldw	r5,-8(fp)
    e690:	000e8740 	call	e874 <memcmp>
    e694:	1004c03a 	cmpne	r2,r2,zero
    e698:	1000031e 	bne	r2,zero,e6a8 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    e69c:	e0bffd17 	ldw	r2,-12(fp)
    e6a0:	e0bfff15 	stw	r2,-4(fp)
    e6a4:	00000806 	br	e6c8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    e6a8:	e0bffd17 	ldw	r2,-12(fp)
    e6ac:	10800017 	ldw	r2,0(r2)
    e6b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e6b4:	00c00074 	movhi	r3,1
    e6b8:	18c53e04 	addi	r3,r3,5368
    e6bc:	e0bffd17 	ldw	r2,-12(fp)
    e6c0:	10ffc91e 	bne	r2,r3,e5e8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    e6c4:	e03fff15 	stw	zero,-4(fp)
    e6c8:	e0bfff17 	ldw	r2,-4(fp)
}
    e6cc:	e037883a 	mov	sp,fp
    e6d0:	dfc00117 	ldw	ra,4(sp)
    e6d4:	df000017 	ldw	fp,0(sp)
    e6d8:	dec00204 	addi	sp,sp,8
    e6dc:	f800283a 	ret

0000e6e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e6e0:	defffc04 	addi	sp,sp,-16
    e6e4:	df000315 	stw	fp,12(sp)
    e6e8:	df000304 	addi	fp,sp,12
    e6ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    e6f0:	00bffa04 	movi	r2,-24
    e6f4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e6f8:	e03ffe15 	stw	zero,-8(fp)
    e6fc:	00001e06 	br	e778 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    e700:	e0bffe17 	ldw	r2,-8(fp)
    e704:	00c00074 	movhi	r3,1
    e708:	18c07804 	addi	r3,r3,480
    e70c:	10800324 	muli	r2,r2,12
    e710:	10c5883a 	add	r2,r2,r3
    e714:	10800017 	ldw	r2,0(r2)
    e718:	1004c03a 	cmpne	r2,r2,zero
    e71c:	1000131e 	bne	r2,zero,e76c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    e720:	e0bffe17 	ldw	r2,-8(fp)
    e724:	00c00074 	movhi	r3,1
    e728:	18c07804 	addi	r3,r3,480
    e72c:	10800324 	muli	r2,r2,12
    e730:	10c7883a 	add	r3,r2,r3
    e734:	e0bfff17 	ldw	r2,-4(fp)
    e738:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    e73c:	00800074 	movhi	r2,1
    e740:	10854204 	addi	r2,r2,5384
    e744:	10c00017 	ldw	r3,0(r2)
    e748:	e0bffe17 	ldw	r2,-8(fp)
    e74c:	1880040e 	bge	r3,r2,e760 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    e750:	00c00074 	movhi	r3,1
    e754:	18c54204 	addi	r3,r3,5384
    e758:	e0bffe17 	ldw	r2,-8(fp)
    e75c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    e760:	e0bffe17 	ldw	r2,-8(fp)
    e764:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    e768:	00000606 	br	e784 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e76c:	e0bffe17 	ldw	r2,-8(fp)
    e770:	10800044 	addi	r2,r2,1
    e774:	e0bffe15 	stw	r2,-8(fp)
    e778:	e0bffe17 	ldw	r2,-8(fp)
    e77c:	10800810 	cmplti	r2,r2,32
    e780:	103fdf1e 	bne	r2,zero,e700 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    e784:	e0bffd17 	ldw	r2,-12(fp)
}
    e788:	e037883a 	mov	sp,fp
    e78c:	df000017 	ldw	fp,0(sp)
    e790:	dec00104 	addi	sp,sp,4
    e794:	f800283a 	ret

0000e798 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    e798:	defffb04 	addi	sp,sp,-20
    e79c:	df000415 	stw	fp,16(sp)
    e7a0:	df000404 	addi	fp,sp,16
    e7a4:	e13ffe15 	stw	r4,-8(fp)
    e7a8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    e7ac:	e0bfff17 	ldw	r2,-4(fp)
    e7b0:	10840070 	cmpltui	r2,r2,4097
    e7b4:	1000021e 	bne	r2,zero,e7c0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    e7b8:	00840004 	movi	r2,4096
    e7bc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    e7c0:	e0fffe17 	ldw	r3,-8(fp)
    e7c4:	e0bfff17 	ldw	r2,-4(fp)
    e7c8:	1885883a 	add	r2,r3,r2
    e7cc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e7d0:	e0bffe17 	ldw	r2,-8(fp)
    e7d4:	e0bffd15 	stw	r2,-12(fp)
    e7d8:	00000506 	br	e7f0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    e7dc:	e0bffd17 	ldw	r2,-12(fp)
    e7e0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e7e4:	e0bffd17 	ldw	r2,-12(fp)
    e7e8:	10800804 	addi	r2,r2,32
    e7ec:	e0bffd15 	stw	r2,-12(fp)
    e7f0:	e0fffd17 	ldw	r3,-12(fp)
    e7f4:	e0bffc17 	ldw	r2,-16(fp)
    e7f8:	18bff836 	bltu	r3,r2,e7dc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e7fc:	e0bffe17 	ldw	r2,-8(fp)
    e800:	108007cc 	andi	r2,r2,31
    e804:	1005003a 	cmpeq	r2,r2,zero
    e808:	1000021e 	bne	r2,zero,e814 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e80c:	e0bffd17 	ldw	r2,-12(fp)
    e810:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e814:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e818:	e037883a 	mov	sp,fp
    e81c:	df000017 	ldw	fp,0(sp)
    e820:	dec00104 	addi	sp,sp,4
    e824:	f800283a 	ret

0000e828 <atexit>:
    e828:	200b883a 	mov	r5,r4
    e82c:	000d883a 	mov	r6,zero
    e830:	0009883a 	mov	r4,zero
    e834:	000f883a 	mov	r7,zero
    e838:	000e8e81 	jmpi	e8e8 <__register_exitproc>

0000e83c <exit>:
    e83c:	defffe04 	addi	sp,sp,-8
    e840:	000b883a 	mov	r5,zero
    e844:	dc000015 	stw	r16,0(sp)
    e848:	dfc00115 	stw	ra,4(sp)
    e84c:	2021883a 	mov	r16,r4
    e850:	000ea200 	call	ea20 <__call_exitprocs>
    e854:	00800074 	movhi	r2,1
    e858:	10853b04 	addi	r2,r2,5356
    e85c:	11000017 	ldw	r4,0(r2)
    e860:	20800f17 	ldw	r2,60(r4)
    e864:	10000126 	beq	r2,zero,e86c <exit+0x30>
    e868:	103ee83a 	callr	r2
    e86c:	8009883a 	mov	r4,r16
    e870:	000ec100 	call	ec10 <_exit>

0000e874 <memcmp>:
    e874:	00c000c4 	movi	r3,3
    e878:	1980032e 	bgeu	r3,r6,e888 <memcmp+0x14>
    e87c:	2144b03a 	or	r2,r4,r5
    e880:	10c4703a 	and	r2,r2,r3
    e884:	10000f26 	beq	r2,zero,e8c4 <memcmp+0x50>
    e888:	31ffffc4 	addi	r7,r6,-1
    e88c:	3000061e 	bne	r6,zero,e8a8 <memcmp+0x34>
    e890:	00000a06 	br	e8bc <memcmp+0x48>
    e894:	39ffffc4 	addi	r7,r7,-1
    e898:	00bfffc4 	movi	r2,-1
    e89c:	21000044 	addi	r4,r4,1
    e8a0:	29400044 	addi	r5,r5,1
    e8a4:	38800526 	beq	r7,r2,e8bc <memcmp+0x48>
    e8a8:	20c00003 	ldbu	r3,0(r4)
    e8ac:	28800003 	ldbu	r2,0(r5)
    e8b0:	18bff826 	beq	r3,r2,e894 <memcmp+0x20>
    e8b4:	1885c83a 	sub	r2,r3,r2
    e8b8:	f800283a 	ret
    e8bc:	0005883a 	mov	r2,zero
    e8c0:	f800283a 	ret
    e8c4:	180f883a 	mov	r7,r3
    e8c8:	20c00017 	ldw	r3,0(r4)
    e8cc:	28800017 	ldw	r2,0(r5)
    e8d0:	18bfed1e 	bne	r3,r2,e888 <memcmp+0x14>
    e8d4:	31bfff04 	addi	r6,r6,-4
    e8d8:	21000104 	addi	r4,r4,4
    e8dc:	29400104 	addi	r5,r5,4
    e8e0:	39bff936 	bltu	r7,r6,e8c8 <memcmp+0x54>
    e8e4:	003fe806 	br	e888 <memcmp+0x14>

0000e8e8 <__register_exitproc>:
    e8e8:	defffa04 	addi	sp,sp,-24
    e8ec:	00800074 	movhi	r2,1
    e8f0:	10853b04 	addi	r2,r2,5356
    e8f4:	dc000015 	stw	r16,0(sp)
    e8f8:	14000017 	ldw	r16,0(r2)
    e8fc:	dd000415 	stw	r20,16(sp)
    e900:	2829883a 	mov	r20,r5
    e904:	81405217 	ldw	r5,328(r16)
    e908:	dcc00315 	stw	r19,12(sp)
    e90c:	dc800215 	stw	r18,8(sp)
    e910:	dc400115 	stw	r17,4(sp)
    e914:	dfc00515 	stw	ra,20(sp)
    e918:	2023883a 	mov	r17,r4
    e91c:	3027883a 	mov	r19,r6
    e920:	3825883a 	mov	r18,r7
    e924:	28002526 	beq	r5,zero,e9bc <__register_exitproc+0xd4>
    e928:	29000117 	ldw	r4,4(r5)
    e92c:	008007c4 	movi	r2,31
    e930:	11002716 	blt	r2,r4,e9d0 <__register_exitproc+0xe8>
    e934:	8800101e 	bne	r17,zero,e978 <__register_exitproc+0x90>
    e938:	2105883a 	add	r2,r4,r4
    e93c:	1085883a 	add	r2,r2,r2
    e940:	20c00044 	addi	r3,r4,1
    e944:	1145883a 	add	r2,r2,r5
    e948:	0009883a 	mov	r4,zero
    e94c:	15000215 	stw	r20,8(r2)
    e950:	28c00115 	stw	r3,4(r5)
    e954:	2005883a 	mov	r2,r4
    e958:	dfc00517 	ldw	ra,20(sp)
    e95c:	dd000417 	ldw	r20,16(sp)
    e960:	dcc00317 	ldw	r19,12(sp)
    e964:	dc800217 	ldw	r18,8(sp)
    e968:	dc400117 	ldw	r17,4(sp)
    e96c:	dc000017 	ldw	r16,0(sp)
    e970:	dec00604 	addi	sp,sp,24
    e974:	f800283a 	ret
    e978:	29802204 	addi	r6,r5,136
    e97c:	00800044 	movi	r2,1
    e980:	110e983a 	sll	r7,r2,r4
    e984:	30c04017 	ldw	r3,256(r6)
    e988:	2105883a 	add	r2,r4,r4
    e98c:	1085883a 	add	r2,r2,r2
    e990:	1185883a 	add	r2,r2,r6
    e994:	19c6b03a 	or	r3,r3,r7
    e998:	14802015 	stw	r18,128(r2)
    e99c:	14c00015 	stw	r19,0(r2)
    e9a0:	00800084 	movi	r2,2
    e9a4:	30c04015 	stw	r3,256(r6)
    e9a8:	88bfe31e 	bne	r17,r2,e938 <__register_exitproc+0x50>
    e9ac:	30804117 	ldw	r2,260(r6)
    e9b0:	11c4b03a 	or	r2,r2,r7
    e9b4:	30804115 	stw	r2,260(r6)
    e9b8:	003fdf06 	br	e938 <__register_exitproc+0x50>
    e9bc:	00800074 	movhi	r2,1
    e9c0:	108cf104 	addi	r2,r2,13252
    e9c4:	100b883a 	mov	r5,r2
    e9c8:	80805215 	stw	r2,328(r16)
    e9cc:	003fd606 	br	e928 <__register_exitproc+0x40>
    e9d0:	00800034 	movhi	r2,0
    e9d4:	1086bc04 	addi	r2,r2,6896
    e9d8:	1000021e 	bne	r2,zero,e9e4 <__register_exitproc+0xfc>
    e9dc:	013fffc4 	movi	r4,-1
    e9e0:	003fdc06 	br	e954 <__register_exitproc+0x6c>
    e9e4:	01006404 	movi	r4,400
    e9e8:	103ee83a 	callr	r2
    e9ec:	1007883a 	mov	r3,r2
    e9f0:	103ffa26 	beq	r2,zero,e9dc <__register_exitproc+0xf4>
    e9f4:	80805217 	ldw	r2,328(r16)
    e9f8:	180b883a 	mov	r5,r3
    e9fc:	18000115 	stw	zero,4(r3)
    ea00:	18800015 	stw	r2,0(r3)
    ea04:	80c05215 	stw	r3,328(r16)
    ea08:	18006215 	stw	zero,392(r3)
    ea0c:	18006315 	stw	zero,396(r3)
    ea10:	0009883a 	mov	r4,zero
    ea14:	883fc826 	beq	r17,zero,e938 <__register_exitproc+0x50>
    ea18:	003fd706 	br	e978 <__register_exitproc+0x90>

0000ea1c <register_fini>:
    ea1c:	f800283a 	ret

0000ea20 <__call_exitprocs>:
    ea20:	00800074 	movhi	r2,1
    ea24:	10853b04 	addi	r2,r2,5356
    ea28:	10800017 	ldw	r2,0(r2)
    ea2c:	defff304 	addi	sp,sp,-52
    ea30:	df000b15 	stw	fp,44(sp)
    ea34:	d8800115 	stw	r2,4(sp)
    ea38:	00800034 	movhi	r2,0
    ea3c:	1086b704 	addi	r2,r2,6876
    ea40:	1005003a 	cmpeq	r2,r2,zero
    ea44:	d8800215 	stw	r2,8(sp)
    ea48:	d8800117 	ldw	r2,4(sp)
    ea4c:	dd400815 	stw	r21,32(sp)
    ea50:	dd000715 	stw	r20,28(sp)
    ea54:	10805204 	addi	r2,r2,328
    ea58:	dfc00c15 	stw	ra,48(sp)
    ea5c:	ddc00a15 	stw	r23,40(sp)
    ea60:	dd800915 	stw	r22,36(sp)
    ea64:	dcc00615 	stw	r19,24(sp)
    ea68:	dc800515 	stw	r18,20(sp)
    ea6c:	dc400415 	stw	r17,16(sp)
    ea70:	dc000315 	stw	r16,12(sp)
    ea74:	282b883a 	mov	r21,r5
    ea78:	2039883a 	mov	fp,r4
    ea7c:	d8800015 	stw	r2,0(sp)
    ea80:	2829003a 	cmpeq	r20,r5,zero
    ea84:	d8800117 	ldw	r2,4(sp)
    ea88:	14405217 	ldw	r17,328(r2)
    ea8c:	88001026 	beq	r17,zero,ead0 <__call_exitprocs+0xb0>
    ea90:	ddc00017 	ldw	r23,0(sp)
    ea94:	88800117 	ldw	r2,4(r17)
    ea98:	8c802204 	addi	r18,r17,136
    ea9c:	143fffc4 	addi	r16,r2,-1
    eaa0:	80000916 	blt	r16,zero,eac8 <__call_exitprocs+0xa8>
    eaa4:	05bfffc4 	movi	r22,-1
    eaa8:	a000151e 	bne	r20,zero,eb00 <__call_exitprocs+0xe0>
    eaac:	8409883a 	add	r4,r16,r16
    eab0:	2105883a 	add	r2,r4,r4
    eab4:	1485883a 	add	r2,r2,r18
    eab8:	10c02017 	ldw	r3,128(r2)
    eabc:	a8c01126 	beq	r21,r3,eb04 <__call_exitprocs+0xe4>
    eac0:	843fffc4 	addi	r16,r16,-1
    eac4:	85bff81e 	bne	r16,r22,eaa8 <__call_exitprocs+0x88>
    eac8:	d8800217 	ldw	r2,8(sp)
    eacc:	10003126 	beq	r2,zero,eb94 <__call_exitprocs+0x174>
    ead0:	dfc00c17 	ldw	ra,48(sp)
    ead4:	df000b17 	ldw	fp,44(sp)
    ead8:	ddc00a17 	ldw	r23,40(sp)
    eadc:	dd800917 	ldw	r22,36(sp)
    eae0:	dd400817 	ldw	r21,32(sp)
    eae4:	dd000717 	ldw	r20,28(sp)
    eae8:	dcc00617 	ldw	r19,24(sp)
    eaec:	dc800517 	ldw	r18,20(sp)
    eaf0:	dc400417 	ldw	r17,16(sp)
    eaf4:	dc000317 	ldw	r16,12(sp)
    eaf8:	dec00d04 	addi	sp,sp,52
    eafc:	f800283a 	ret
    eb00:	8409883a 	add	r4,r16,r16
    eb04:	88c00117 	ldw	r3,4(r17)
    eb08:	2105883a 	add	r2,r4,r4
    eb0c:	1445883a 	add	r2,r2,r17
    eb10:	18ffffc4 	addi	r3,r3,-1
    eb14:	11800217 	ldw	r6,8(r2)
    eb18:	1c001526 	beq	r3,r16,eb70 <__call_exitprocs+0x150>
    eb1c:	10000215 	stw	zero,8(r2)
    eb20:	303fe726 	beq	r6,zero,eac0 <__call_exitprocs+0xa0>
    eb24:	00c00044 	movi	r3,1
    eb28:	1c06983a 	sll	r3,r3,r16
    eb2c:	90804017 	ldw	r2,256(r18)
    eb30:	8cc00117 	ldw	r19,4(r17)
    eb34:	1884703a 	and	r2,r3,r2
    eb38:	10001426 	beq	r2,zero,eb8c <__call_exitprocs+0x16c>
    eb3c:	90804117 	ldw	r2,260(r18)
    eb40:	1884703a 	and	r2,r3,r2
    eb44:	10000c1e 	bne	r2,zero,eb78 <__call_exitprocs+0x158>
    eb48:	2105883a 	add	r2,r4,r4
    eb4c:	1485883a 	add	r2,r2,r18
    eb50:	11400017 	ldw	r5,0(r2)
    eb54:	e009883a 	mov	r4,fp
    eb58:	303ee83a 	callr	r6
    eb5c:	88800117 	ldw	r2,4(r17)
    eb60:	98bfc81e 	bne	r19,r2,ea84 <__call_exitprocs+0x64>
    eb64:	b8800017 	ldw	r2,0(r23)
    eb68:	147fd526 	beq	r2,r17,eac0 <__call_exitprocs+0xa0>
    eb6c:	003fc506 	br	ea84 <__call_exitprocs+0x64>
    eb70:	8c000115 	stw	r16,4(r17)
    eb74:	003fea06 	br	eb20 <__call_exitprocs+0x100>
    eb78:	2105883a 	add	r2,r4,r4
    eb7c:	1485883a 	add	r2,r2,r18
    eb80:	11000017 	ldw	r4,0(r2)
    eb84:	303ee83a 	callr	r6
    eb88:	003ff406 	br	eb5c <__call_exitprocs+0x13c>
    eb8c:	303ee83a 	callr	r6
    eb90:	003ff206 	br	eb5c <__call_exitprocs+0x13c>
    eb94:	88800117 	ldw	r2,4(r17)
    eb98:	1000081e 	bne	r2,zero,ebbc <__call_exitprocs+0x19c>
    eb9c:	89000017 	ldw	r4,0(r17)
    eba0:	20000726 	beq	r4,zero,ebc0 <__call_exitprocs+0x1a0>
    eba4:	b9000015 	stw	r4,0(r23)
    eba8:	8809883a 	mov	r4,r17
    ebac:	0001adc0 	call	1adc <free>
    ebb0:	bc400017 	ldw	r17,0(r23)
    ebb4:	883fb71e 	bne	r17,zero,ea94 <__call_exitprocs+0x74>
    ebb8:	003fc506 	br	ead0 <__call_exitprocs+0xb0>
    ebbc:	89000017 	ldw	r4,0(r17)
    ebc0:	882f883a 	mov	r23,r17
    ebc4:	2023883a 	mov	r17,r4
    ebc8:	883fb21e 	bne	r17,zero,ea94 <__call_exitprocs+0x74>
    ebcc:	003fc006 	br	ead0 <__call_exitprocs+0xb0>

0000ebd0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    ebd0:	defffd04 	addi	sp,sp,-12
    ebd4:	df000215 	stw	fp,8(sp)
    ebd8:	df000204 	addi	fp,sp,8
    ebdc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    ebe0:	e0bfff17 	ldw	r2,-4(fp)
    ebe4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ebe8:	e0bffe17 	ldw	r2,-8(fp)
    ebec:	1005003a 	cmpeq	r2,r2,zero
    ebf0:	1000021e 	bne	r2,zero,ebfc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    ebf4:	002af070 	cmpltui	zero,zero,43969
    ebf8:	00000106 	br	ec00 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    ebfc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    ec00:	e037883a 	mov	sp,fp
    ec04:	df000017 	ldw	fp,0(sp)
    ec08:	dec00104 	addi	sp,sp,4
    ec0c:	f800283a 	ret

0000ec10 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ec10:	defffd04 	addi	sp,sp,-12
    ec14:	dfc00215 	stw	ra,8(sp)
    ec18:	df000115 	stw	fp,4(sp)
    ec1c:	df000104 	addi	fp,sp,4
    ec20:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    ec24:	e13fff17 	ldw	r4,-4(fp)
    ec28:	000ebd00 	call	ebd0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ec2c:	003fff06 	br	ec2c <_exit+0x1c>
    ec30:	00000010 	cmplti	zero,zero,0
    ec34:	00000000 	call	0 <__reset>
    ec38:	00527a01 	jmpi	527a0 <_gp+0x392c0>
    ec3c:	011f7c01 	jmpi	11f7c0 <_gp+0x1062e0>
    ec40:	001b0c0b 	ldhu	zero,27696(zero)
    ec44:	00000028 	cmpgeui	zero,zero,0
    ec48:	00000018 	cmpnei	zero,zero,0
    ec4c:	00008e18 	cmpnei	zero,zero,568
    ec50:	000005dc 	xori	zero,zero,23
    ec54:	400e4400 	call	400e440 <_gp+0x3ff4f60>
    ec58:	92099170 	cmpltui	r8,r18,9797
    ec5c:	95079308 	cmpgei	r20,r18,7756
    ec60:	97049605 	stb	fp,4696(r18)
    ec64:	90019f03 	ldbu	zero,1660(r18)
    ec68:	9c06940a 	0x9c06940a
    ec6c:	00000002 	0x2
    ec70:	00000028 	cmpgeui	zero,zero,0
    ec74:	00000044 	movi	zero,1
    ec78:	000093f4 	movhi	zero,591
    ec7c:	000005b0 	cmpltui	zero,zero,22
    ec80:	3c0e4400 	call	3c0e440 <_gp+0x3bf4f60>
    ec84:	92099168 	cmpgeui	r8,r18,9797
    ec88:	95079308 	cmpgei	r20,r18,7756
    ec8c:	9c039705 	stb	r16,3676(r19)
    ec90:	90019f02 	0x90019f02
    ec94:	9606940a 	0x9606940a
    ec98:	00000004 	movi	zero,0
    ec9c:	0000ea1c 	xori	zero,zero,936
