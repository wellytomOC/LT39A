// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/13/2024 17:53:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Saida
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Saida_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg [3:0] Q;
reg [3:0] R;
reg Strobe;
// wires                                               
wire [6:0] ssdAD;
wire [6:0] ssdAU;
wire [6:0] ssdBD;
wire [6:0] ssdBU;
wire [6:0] ssdQD;
wire [6:0] ssdQU;
wire [6:0] ssdRD;
wire [6:0] ssdRU;

// assign statements (if any)                          
Saida i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Q(Q),
	.R(R),
	.Strobe(Strobe),
	.ssdAD(ssdAD),
	.ssdAU(ssdAU),
	.ssdBD(ssdBD),
	.ssdBU(ssdBU),
	.ssdQD(ssdQD),
	.ssdQU(ssdQU),
	.ssdRD(ssdRD),
	.ssdRU(ssdRU)
);
initial 
begin 
#1000000 $finish;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
end 
// A[ 1 ]
always
begin
	A[1] = 1'b0;
	A[1] = #500000 1'b1;
	#500000;
end 
// A[ 0 ]
always
begin
	A[0] = 1'b0;
	A[0] = #250000 1'b1;
	#250000;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
always
begin
	B[2] = 1'b0;
	B[2] = #500000 1'b1;
	#500000;
end 
// B[ 1 ]
always
begin
	B[1] = 1'b0;
	B[1] = #250000 1'b1;
	#250000;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b0;
end 
// Q[ 3 ]
initial
begin
	Q[3] = 1'b0;
end 
// Q[ 2 ]
initial
begin
	Q[2] = 1'b1;
end 
// Q[ 1 ]
initial
begin
	Q[1] = 1'b0;
	Q[1] = #500000 1'b1;
end 
// Q[ 0 ]
always
begin
	Q[0] = 1'b0;
	Q[0] = #250000 1'b1;
	#250000;
end 
// R[ 3 ]
always
begin
	R[3] = 1'b0;
	R[3] = #500000 1'b1;
	#500000;
end 
// R[ 2 ]
always
begin
	R[2] = 1'b0;
	R[2] = #250000 1'b1;
	#250000;
end 
// R[ 1 ]
initial
begin
	R[1] = 1'b0;
end 
// R[ 0 ]
initial
begin
	R[0] = 1'b0;
end 

// Strobe
initial
begin
	Strobe = 1'b0;
	Strobe = #750000 1'b1;
end 
endmodule

